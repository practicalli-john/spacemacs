{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A practical guide to Spacemacs, a community driven Emacs configuration that makes it easy to use all the power of Emacs and Vim. The guide contains specific sections on Clojure development, although the majority of the content is applicable to any language. This guide uses Spacemacs Version 0.300, the Spacemacs develop branch (develop is now the default branch). Emacs has been a shining beacon of Free and Open Source software from the early 1970's and has grown to be a versatile set of development tools for all languages. This long history has given Emacs the ability to interact with almost every aspect of your digital life. Spacemacs is a community configuration providing a consistent and simple to learn approach to using all the features and power of Emacs . Spacemacs also integrates the raw text manipulation speed of Vim and multi-modal editing into the Emacs experience, enabling you to be even more productive. Practicalli Spacemacs configuration \u03bb\ufe0e practicalli/spacemacs.d repository contains a rich configuration for Clojure development and supporting tools. Browse the repository online or fork / clone the repository Free Desktop XDG Config Classic Config git clone https://github.com/practicalli/spacemacs.d.git $XDG_CONFIG_HOME /spacemacs ` The above command creates the ~/.config/spacemacs/init.el that contains the configuration used in Practicalli Spacemacs book, all in one place. git clone https://github.com/practicalli/spacemacs.d.git $HOME /.spacemacs.d ` The above command creates the ~/.spacemacs.d/init.el that contains the configuration used in Practicalli Spacemacs book, all in one place. Practicalli Spacemacs.d configuration uses a light theme and the simplified doom mode line which again can be easily changed. Sponsor my work \u03bb\ufe0e The majority of my work is now focused on the Practicalli series of books and videos and an advisory role with several communities Thank you to Cognitect , Nubank and a wide range of other sponsors from the Clojure community for your continued support Creative commons license \u03bb\ufe0e This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images & stylesheets).","title":"Index"},{"location":"#practicalli-spacemacs-configuration","text":"practicalli/spacemacs.d repository contains a rich configuration for Clojure development and supporting tools. Browse the repository online or fork / clone the repository Free Desktop XDG Config Classic Config git clone https://github.com/practicalli/spacemacs.d.git $XDG_CONFIG_HOME /spacemacs ` The above command creates the ~/.config/spacemacs/init.el that contains the configuration used in Practicalli Spacemacs book, all in one place. git clone https://github.com/practicalli/spacemacs.d.git $HOME /.spacemacs.d ` The above command creates the ~/.spacemacs.d/init.el that contains the configuration used in Practicalli Spacemacs book, all in one place. Practicalli Spacemacs.d configuration uses a light theme and the simplified doom mode line which again can be easily changed.","title":"Practicalli Spacemacs configuration"},{"location":"#sponsor-my-work","text":"The majority of my work is now focused on the Practicalli series of books and videos and an advisory role with several communities Thank you to Cognitect , Nubank and a wide range of other sponsors from the Clojure community for your continued support","title":"Sponsor my work"},{"location":"#creative-commons-license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images & stylesheets).","title":"Creative commons license"},{"location":"contributing/","text":"Contributing \u03bb\ufe0e How to contribute to Practicalli Spacemacs and the Spacemacs project itself. Issues Pull requests practicalli/spacemacs.d practicalli/spacemacs is written in markdown and uses MkDocs to generate the website via a GitHub action. practicalli/spacemacs.d contains the complete Spacemacs configuration used in this guide written in Emacs Lisp, with its own Issues and pull requests By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license . Attribution will be detailed via GitHub contributors . All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct. Book Status \u03bb\ufe0e Submit and issue or idea \u03bb\ufe0e If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can. Considering a Pull request? \u03bb\ufe0e Before investing any time in a pull request, please raise an issue explaining the situation. This can save you and the maintainer time and avoid rejected pull requests. Please keep pull requests small and focused, as they are much quicker to review and easier to accept. Ideally PR's should be for a specific page or at most a section. A PR with a list of changes across different sections will not be merged, it will be reviewed and changes merged eventually. Contributing to Spacemacs \u03bb\ufe0e The Spacemacs contribution guidelines details how to get help, report issues and contribute to the project. SPC h I to raise an issue on the Spacemacs GitHub issue tracker , automatically including your Spacemacs and Operating system details. Please review issues and leave feedback, especially confirming issues are reproducible on your Spacemacs configuration. SPC h d s to include your system configuration. Contribute changes via pull requests: 1. Fork the Spacemacs project on GitHub and clone your fork 2. Create a new branch from the develop branch ( SPC g s for magit status, b c to create a new branch) 3. Make changes and update relevant README files and the CHANGELOG.develop file 4. Commit changes to the new branch and push to your fork. 5. Visit your fork on GitHub and create a pull request (or setup forge and create PR from Magit) Making a change to a pull request you have created is also easy to do Thank you to all contributors \u03bb\ufe0e A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language. Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling. I would also like to thank everyone that has joined in with the London Clojurins community , ClojureBridgeLondon , Clojurians Slack community , Clojurians Zulip community and Clojureverse community . Thank you to everyone who sponsors the Practicalli websites and videos and for the recent Clojurists Together sponsorship , it helps me continue the work at a much faster pace. Special thanks to Bruce Durling for getting me into Cloure in the first place. duianto for discussions and accepting my pull requests to Spacemacs In no specific order, the following people have provided valuable input to this work Chris Howe-Jones - @agile-geek Colin Yates - @yatesco Jun Tian Stefan Pfeiffer","title":"Contributing"},{"location":"contributing/#contributing","text":"How to contribute to Practicalli Spacemacs and the Spacemacs project itself. Issues Pull requests practicalli/spacemacs.d practicalli/spacemacs is written in markdown and uses MkDocs to generate the website via a GitHub action. practicalli/spacemacs.d contains the complete Spacemacs configuration used in this guide written in Emacs Lisp, with its own Issues and pull requests By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license . Attribution will be detailed via GitHub contributors . All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.","title":"Contributing"},{"location":"contributing/#book-status","text":"","title":"Book Status"},{"location":"contributing/#submit-and-issue-or-idea","text":"If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.","title":"Submit and issue or idea"},{"location":"contributing/#considering-a-pull-request","text":"Before investing any time in a pull request, please raise an issue explaining the situation. This can save you and the maintainer time and avoid rejected pull requests. Please keep pull requests small and focused, as they are much quicker to review and easier to accept. Ideally PR's should be for a specific page or at most a section. A PR with a list of changes across different sections will not be merged, it will be reviewed and changes merged eventually.","title":"Considering a Pull request?"},{"location":"contributing/#contributing-to-spacemacs","text":"The Spacemacs contribution guidelines details how to get help, report issues and contribute to the project. SPC h I to raise an issue on the Spacemacs GitHub issue tracker , automatically including your Spacemacs and Operating system details. Please review issues and leave feedback, especially confirming issues are reproducible on your Spacemacs configuration. SPC h d s to include your system configuration. Contribute changes via pull requests: 1. Fork the Spacemacs project on GitHub and clone your fork 2. Create a new branch from the develop branch ( SPC g s for magit status, b c to create a new branch) 3. Make changes and update relevant README files and the CHANGELOG.develop file 4. Commit changes to the new branch and push to your fork. 5. Visit your fork on GitHub and create a pull request (or setup forge and create PR from Magit) Making a change to a pull request you have created is also easy to do","title":"Contributing to Spacemacs"},{"location":"contributing/#thank-you-to-all-contributors","text":"A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language. Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling. I would also like to thank everyone that has joined in with the London Clojurins community , ClojureBridgeLondon , Clojurians Slack community , Clojurians Zulip community and Clojureverse community . Thank you to everyone who sponsors the Practicalli websites and videos and for the recent Clojurists Together sponsorship , it helps me continue the work at a much faster pace. Special thanks to Bruce Durling for getting me into Cloure in the first place. duianto for discussions and accepting my pull requests to Spacemacs In no specific order, the following people have provided valuable input to this work Chris Howe-Jones - @agile-geek Colin Yates - @yatesco Jun Tian Stefan Pfeiffer","title":"Thank you to all contributors"},{"location":"repl-workflow/","text":"REPL Driven Development \u03bb\ufe0e Clojure is a powerful, fun and highly productive language for developing applications and services. The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop). The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests). REPL driven development is the foundation of working with Clojure effectively Coding with a REPL provides instant feedback as design decisions are coded. The REPL feedback helps test the assumptions that are driving the design choices. Important design choices should be codified in unit tests, optionally using spec. Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code. Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed Print - results of the code are displayed, either in the REPL or as part of the application. Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application. Always be REPL'ing Coding without a REPL feels like so limiting. I want instant fast feedback from my code as I craft it, testing my assumptions and design choices every step of the journey to a solution - John Stevenson, Practical.li Evaluating source code \u03bb\ufe0e A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline. Source code is evaluated in its respective namespace, removing the need to change namespaces in the REPL directly, ( in-ns ), or use fully qualified names to call functions. Evaluate Clojure in Spacemacs , e f evaluates the top level form under the cursor, , e e evaluated the expression immediately before the cursor (useful for evaluating nested expressions) Hint , e ; ( cider-eval-defun-to-comment ) evaluates the current form and prints the result under the expression as a comment Adding result comment is an effective way to show the expected results of the code design, especially as a journal. Rich Comment blocks - living documentation \u03bb\ufe0e The (comment ,,,) function wraps code that is only run directly by the developer using a Clojure aware editor . Expressions in rich comment blocks can represent how to use the functions that make up the namespace API. For example, starting/restarting the system, updating the database, etc. Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with. Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations. Hide clj-kondo linter warnings for redefined vars ( def , defn ) when using this approach. ;; Rich comment block with redefined vars ignored # _ { :clj-kondo/ignore [ :redefined-var ]} ( comment ( defn value-added-tax [] ;; algorithm design - first try) ( defn value-added-tax [] ;; algorithm design - first try) ) ;; End of rich comment block The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design. Design Journal \u03bb\ufe0e A journal of design decisions makes the code easier to understand and maintain. Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions. Journals simplify the developer on-boarding processes as the journey through design decisions are already documented. A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace. A journal should cover the following aspects Relevant expressions use to test assumptions about design options. Examples of design choices not taken and discussions why (saves repeating the same design discussions) Expressions that can be evaluated to explain how a function or parts of a function work The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations. Example design journal Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics Viewing data structures \u03bb\ufe0e Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results. , e p on the Spacemacs Clojure menu has several commands to Pretty Print data structure results when evaluating code. , d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail. , d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls. Cider inspector is an effective way to navigate nested data and page through large data sets. External data browsers can visualise data in many different forms. Code Style and idiomatic Clojure \u03bb\ufe0e Clojure aware editors should automatically apply formatting that follows the Clojure Style guide . Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process. The Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt. Emacs clojure-mode will automatically format code and so will Clojure LSP (via cljfmt). These tools are configurable and should be tailored to the teams standard. Test Driven Development and REPL Driven Development \u03bb\ufe0e Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback. Test Driven Development fits well with Hammock Time, as good design comes from deep thought RDD enables rapid design experiments so different approaches can easily and quickly be evaluated . TDD focuses the results of the REPL experiments into design decisions, codified as unit tests. These tests guide the correctness of specific implementations and provide critical feedback when changes break that design. Unit tests should support the public API of each namespace in a project to help prevent regressions in the code. Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought. clojure.test library is part of the Clojure standard library that provides a simple way to start writing unit tests. Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests. Specifications can be defined for values and functions. Clojure has a number of test runners available. Kaocha is a test runner that will run unit tests and function specification checks. Automate local test runner Use kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) clojure -X:test/watch Continuous Integration and Deployment \u03bb\ufe0e Add a continuous integration service to run tests and builds code on every shared commit. Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback. CircleCI provides a simple to use service that supports Clojure projects. GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action . GitLab CI Live Coding with Data - Stuart Halloway \u03bb\ufe0e There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process. Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore! This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.","title":"REPL Workflow"},{"location":"repl-workflow/#repl-driven-development","text":"Clojure is a powerful, fun and highly productive language for developing applications and services. The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop). The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests). REPL driven development is the foundation of working with Clojure effectively Coding with a REPL provides instant feedback as design decisions are coded. The REPL feedback helps test the assumptions that are driving the design choices. Important design choices should be codified in unit tests, optionally using spec. Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code. Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed Print - results of the code are displayed, either in the REPL or as part of the application. Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application. Always be REPL'ing Coding without a REPL feels like so limiting. I want instant fast feedback from my code as I craft it, testing my assumptions and design choices every step of the journey to a solution - John Stevenson, Practical.li","title":"REPL Driven Development"},{"location":"repl-workflow/#evaluating-source-code","text":"A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline. Source code is evaluated in its respective namespace, removing the need to change namespaces in the REPL directly, ( in-ns ), or use fully qualified names to call functions. Evaluate Clojure in Spacemacs , e f evaluates the top level form under the cursor, , e e evaluated the expression immediately before the cursor (useful for evaluating nested expressions) Hint , e ; ( cider-eval-defun-to-comment ) evaluates the current form and prints the result under the expression as a comment Adding result comment is an effective way to show the expected results of the code design, especially as a journal.","title":"Evaluating source code"},{"location":"repl-workflow/#rich-comment-blocks-living-documentation","text":"The (comment ,,,) function wraps code that is only run directly by the developer using a Clojure aware editor . Expressions in rich comment blocks can represent how to use the functions that make up the namespace API. For example, starting/restarting the system, updating the database, etc. Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with. Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations. Hide clj-kondo linter warnings for redefined vars ( def , defn ) when using this approach. ;; Rich comment block with redefined vars ignored # _ { :clj-kondo/ignore [ :redefined-var ]} ( comment ( defn value-added-tax [] ;; algorithm design - first try) ( defn value-added-tax [] ;; algorithm design - first try) ) ;; End of rich comment block The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.","title":"Rich Comment blocks - living documentation"},{"location":"repl-workflow/#design-journal","text":"A journal of design decisions makes the code easier to understand and maintain. Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions. Journals simplify the developer on-boarding processes as the journey through design decisions are already documented. A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace. A journal should cover the following aspects Relevant expressions use to test assumptions about design options. Examples of design choices not taken and discussions why (saves repeating the same design discussions) Expressions that can be evaluated to explain how a function or parts of a function work The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations. Example design journal Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics","title":"Design Journal"},{"location":"repl-workflow/#viewing-data-structures","text":"Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results. , e p on the Spacemacs Clojure menu has several commands to Pretty Print data structure results when evaluating code. , d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail. , d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls. Cider inspector is an effective way to navigate nested data and page through large data sets. External data browsers can visualise data in many different forms.","title":"Viewing data structures"},{"location":"repl-workflow/#code-style-and-idiomatic-clojure","text":"Clojure aware editors should automatically apply formatting that follows the Clojure Style guide . Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process. The Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt. Emacs clojure-mode will automatically format code and so will Clojure LSP (via cljfmt). These tools are configurable and should be tailored to the teams standard.","title":"Code Style and idiomatic Clojure"},{"location":"repl-workflow/#test-driven-development-and-repl-driven-development","text":"Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback. Test Driven Development fits well with Hammock Time, as good design comes from deep thought RDD enables rapid design experiments so different approaches can easily and quickly be evaluated . TDD focuses the results of the REPL experiments into design decisions, codified as unit tests. These tests guide the correctness of specific implementations and provide critical feedback when changes break that design. Unit tests should support the public API of each namespace in a project to help prevent regressions in the code. Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought. clojure.test library is part of the Clojure standard library that provides a simple way to start writing unit tests. Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests. Specifications can be defined for values and functions. Clojure has a number of test runners available. Kaocha is a test runner that will run unit tests and function specification checks. Automate local test runner Use kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) clojure -X:test/watch","title":"Test Driven Development and REPL Driven Development"},{"location":"repl-workflow/#continuous-integration-and-deployment","text":"Add a continuous integration service to run tests and builds code on every shared commit. Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback. CircleCI provides a simple to use service that supports Clojure projects. GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action . GitLab CI","title":"Continuous Integration and Deployment"},{"location":"repl-workflow/#live-coding-with-data-stuart-halloway","text":"There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process. Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore! This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.","title":"Live Coding with Data - Stuart Halloway"},{"location":"spacemacs-mini-cheatsheet/","text":"Spacemacs Mini Cheatsheet \u03bb\ufe0e Ctrl-g two times will cancel most actions in Spacemacs Spacemacs Holy Mode : use M-m instead of SPC and M-RET instead of , in the Keys below Clojure \u03bb\ufe0e Key action , ' start the REPL , e f evaluate a function , e ; evaluate a function, add result as comment , m b show running REPL's (browse) , t a run all tests (use in test namespace) Working with projects \u03bb\ufe0e Key action SPC f f find file SPC p f project specific find file SPC p a toggle between source and test files SPC TAB switch to previous buffer SPC s s swoop search in project SPC b b List current buffers SPC b d Kill current buffer SPC number Jump to window number Using Vim \u03bb\ufe0e Key action j move cursor down one line k move cursor up one line l move cursor right one character h move cursor left one character * to next matching symbol name $ end of current line 0 start of current line % jump to matching parens or next closed paren gg start of buffer G end of buffer v visual select y yank - copy selected text y y yank line - copy entire line / search forwards in current buffer Changing Text \u03bb\ufe0e Key Action i insert - edit at cursor a append - edit after cursor o new line after cursor O new line before cursor ESC return to normal mode x delete character and add to kill ring p paste (put) u undo Ctrl-r redo g c c comment current line D delete to end of line dd delete the current line dt delete to a character (not including character) Quit / restart \u03bb\ufe0e Key action SPS q r Restart Spacemacs keeping window and buffer layouts SPC q q Quit Spacemacs","title":"Mini-cheatsheet"},{"location":"spacemacs-mini-cheatsheet/#spacemacs-mini-cheatsheet","text":"Ctrl-g two times will cancel most actions in Spacemacs Spacemacs Holy Mode : use M-m instead of SPC and M-RET instead of , in the Keys below","title":"Spacemacs Mini Cheatsheet"},{"location":"spacemacs-mini-cheatsheet/#clojure","text":"Key action , ' start the REPL , e f evaluate a function , e ; evaluate a function, add result as comment , m b show running REPL's (browse) , t a run all tests (use in test namespace)","title":"Clojure"},{"location":"spacemacs-mini-cheatsheet/#working-with-projects","text":"Key action SPC f f find file SPC p f project specific find file SPC p a toggle between source and test files SPC TAB switch to previous buffer SPC s s swoop search in project SPC b b List current buffers SPC b d Kill current buffer SPC number Jump to window number","title":"Working with projects"},{"location":"spacemacs-mini-cheatsheet/#using-vim","text":"Key action j move cursor down one line k move cursor up one line l move cursor right one character h move cursor left one character * to next matching symbol name $ end of current line 0 start of current line % jump to matching parens or next closed paren gg start of buffer G end of buffer v visual select y yank - copy selected text y y yank line - copy entire line / search forwards in current buffer","title":"Using Vim"},{"location":"spacemacs-mini-cheatsheet/#changing-text","text":"Key Action i insert - edit at cursor a append - edit after cursor o new line after cursor O new line before cursor ESC return to normal mode x delete character and add to kill ring p paste (put) u undo Ctrl-r redo g c c comment current line D delete to end of line dd delete the current line dt delete to a character (not including character)","title":"Changing Text"},{"location":"spacemacs-mini-cheatsheet/#quit-restart","text":"Key action SPS q r Restart Spacemacs keeping window and buffer layouts SPC q q Quit Spacemacs","title":"Quit / restart"},{"location":"spacemacs-on-android/","text":"Spacemacs on Android \u03bb\ufe0e Spacemacs runs on an Android mobile devices using termux, a terminal emulator and Linux environment as just another Android app. Spacemacs enables coding on the move or note taking in org-mode. As Clojure has a relatively terse syntax, it is a little more feasible for writing code on a mobile device. For a better experience, a portable keyboard such as the Keyboard.io Atreus could also be used to provide a mechanical keyboard typing experience F-Droid Installation \u03bb\ufe0e Navigate to f-droid website (link on Termux website) Click blue f-droid button to download Once downloaded, ope the apx file browser message \"For Security your pohone is not allowed to install unknown apps from this source\" Select Settings > allow install from browser source Select install Termux installs Open termux - it automatically updates packages termux shows list of packages Termux install from F-Droid \u03bb\ufe0e Open F-droid Search packages for termux Select the termux package and press the install button, or open button if already installed (which it probably will be). Optional extras \u03bb\ufe0e Termux:Styling - colour schemes and poperline-ready fonts Termux:Widget - Launch Termux commands from the homescreen Original author Termux install approach: Install Termux from the Play Store (app will not get termux updates using this approach). Termux has it's own package manager pkg, but if you type apt iso. pkg, that will also work. It comes with many packages. After the apt update / apt upgrade, I recommend to install fish or tweak bash in order to have some sort of autocompletion. Termux can read and write the external SD card (you need to run termux-setup-storage), but git can't write to the SD card. So I don't recommend creating any projects on the SD card.Install a text editor (nano or vi with apt, or micro via curl cf. their website). Configure the termux extra key rows https://wiki.termux.com/wiki/Touch_KeyboardInstall termux-ubuntuAs I said above, java can't be installed directly in termux. To be completely honest, there is one package which installs java, but it's terribly slow. It's better to install the termux-ubuntu chroot, which is here: https://github.com/Neo-Oli/termux-ubuntu This creates a folder subsystem, and a startup script. The result is a terminal version of ubuntu. The available packages depend on your architecture. I was disappointed to learn that I have a 32 bit architecture, although the processor is 64 bit. Install Clojure in termux-ubuntuStart your termux-ubuntu session (you might want to create a shortcut for that later via termux-widget). Dependencies: apt update apt-get install openjdk-8-jdk curl rlwrap Clojure: curl -O https://download.clojure.org/install/linux-install-1.10.1.469.sh chmod +x linux-install-1.10.1.469.sh ./linux-install-1.10.1.469.sh Leiningen: curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein mv lein ~/../bin/lein chmod +x ~/../bin/lein bash ~/../bin/lein install spacemacs Note: In termux-ubuntu the installation of packages doesn't work, error Bad address and other errors.Workaround: - install emacs in both termux and termux-ubuntu - copy the folder .emacs.d from termux to termux-ubuntu - recompile packages Install spacemacs in termux: apt install emacs git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d I recommend to git check out the dev version, so you can use clj-kondo Install emacs in termux-ubuntu Do not install the ubuntu emacs package, rather: add-apt-repository ppa:kelleyk/emacs apt update apt install emacs26-nox (the terminal version of emacs) Again, I recommend to check out the dev version, so you can use clj-kondo. Copy the folder .emacs.d from termux to termux-ubuntu (adapt to your folder structure) : cp .emacs.d jails/ubuntu/ubuntu-fs/root/ cp .spacemacs jails/ubuntu/ubuntu-fs/root/.spacemacs","title":"Spacemacs on Android"},{"location":"spacemacs-on-android/#spacemacs-on-android","text":"Spacemacs runs on an Android mobile devices using termux, a terminal emulator and Linux environment as just another Android app. Spacemacs enables coding on the move or note taking in org-mode. As Clojure has a relatively terse syntax, it is a little more feasible for writing code on a mobile device. For a better experience, a portable keyboard such as the Keyboard.io Atreus could also be used to provide a mechanical keyboard typing experience","title":"Spacemacs on Android"},{"location":"spacemacs-on-android/#f-droid-installation","text":"Navigate to f-droid website (link on Termux website) Click blue f-droid button to download Once downloaded, ope the apx file browser message \"For Security your pohone is not allowed to install unknown apps from this source\" Select Settings > allow install from browser source Select install Termux installs Open termux - it automatically updates packages termux shows list of packages","title":"F-Droid Installation"},{"location":"spacemacs-on-android/#termux-install-from-f-droid","text":"Open F-droid Search packages for termux Select the termux package and press the install button, or open button if already installed (which it probably will be).","title":"Termux install from F-Droid"},{"location":"spacemacs-on-android/#optional-extras","text":"Termux:Styling - colour schemes and poperline-ready fonts Termux:Widget - Launch Termux commands from the homescreen Original author Termux install approach: Install Termux from the Play Store (app will not get termux updates using this approach). Termux has it's own package manager pkg, but if you type apt iso. pkg, that will also work. It comes with many packages. After the apt update / apt upgrade, I recommend to install fish or tweak bash in order to have some sort of autocompletion. Termux can read and write the external SD card (you need to run termux-setup-storage), but git can't write to the SD card. So I don't recommend creating any projects on the SD card.Install a text editor (nano or vi with apt, or micro via curl cf. their website). Configure the termux extra key rows https://wiki.termux.com/wiki/Touch_KeyboardInstall termux-ubuntuAs I said above, java can't be installed directly in termux. To be completely honest, there is one package which installs java, but it's terribly slow. It's better to install the termux-ubuntu chroot, which is here: https://github.com/Neo-Oli/termux-ubuntu This creates a folder subsystem, and a startup script. The result is a terminal version of ubuntu. The available packages depend on your architecture. I was disappointed to learn that I have a 32 bit architecture, although the processor is 64 bit. Install Clojure in termux-ubuntuStart your termux-ubuntu session (you might want to create a shortcut for that later via termux-widget). Dependencies: apt update apt-get install openjdk-8-jdk curl rlwrap Clojure: curl -O https://download.clojure.org/install/linux-install-1.10.1.469.sh chmod +x linux-install-1.10.1.469.sh ./linux-install-1.10.1.469.sh Leiningen: curl -O https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein mv lein ~/../bin/lein chmod +x ~/../bin/lein bash ~/../bin/lein install spacemacs Note: In termux-ubuntu the installation of packages doesn't work, error Bad address and other errors.Workaround: - install emacs in both termux and termux-ubuntu - copy the folder .emacs.d from termux to termux-ubuntu - recompile packages Install spacemacs in termux: apt install emacs git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d I recommend to git check out the dev version, so you can use clj-kondo Install emacs in termux-ubuntu Do not install the ubuntu emacs package, rather: add-apt-repository ppa:kelleyk/emacs apt update apt install emacs26-nox (the terminal version of emacs) Again, I recommend to check out the dev version, so you can use clj-kondo. Copy the folder .emacs.d from termux to termux-ubuntu (adapt to your folder structure) : cp .emacs.d jails/ubuntu/ubuntu-fs/root/ cp .spacemacs jails/ubuntu/ubuntu-fs/root/.spacemacs","title":"Optional extras"},{"location":"why-move-from-vi-to-spacemacs/","text":"Thoughts on moving from Vim to Spacemacs \u03bb\ufe0e Do you think it's worth for a beginner developer who still doesn't know much about the big frameworks to spend time learning Emacs? Especially if said developer has been using Emacs' fabled competitor for over four years now? I was searching for what the best free IDE is, and ended up finding your answer in quora about emacs https://www.quora.com/What-is-the-best-free-IDE/answer/John-Stevenson-12 Ever since I did a few projects in Racket I have been interested in the lisp scheme syntax, and been dancing with the idea of learning Emacs. But since I found my first job, I've been jumping from (the introduction) of one technology or another because I needed them for my role. Now I'm about to be furloughed, and the dance of learning Emacs seems much more attractive, but I don't know if it's the right time for this.So I'd really appreciate to hear your take on this dilemma. :) Short answer: Yes, definitely learn Emacs, start with Spacemacs develop branch and read my book https://practical.li/spacemacs/ Longer answer: It sounds like you have the agony of choice, which is a very real problem in our modern world. There are so many things you can do with your time. I can offer my experiences as a guide, but only you know how best to spend your time I would certainly recommend looking at Emacs and specifically Spacemacs if you have the time. There are lots of features you can just drop into Emacs that can help with a wide range of languages. Arguably Emacs has the most up to date support for the vast majority of languages (with LSP there is even excellent support for Java). Using a community configuration like Spacemacs means standing on the shoulders of giants, using the cumulative experience of the community to do much more. So the learning curve for Emacs can be very shallow. I assume you refer to Vi/Vim as the alternative to Emacs. I find the Vi style editing (multi-modal) to be amazingly productive and feel lost without it. Ironically, I only learnt Vi style editing when I started using Spacemacs. I suggest reasons to move away from a specific Vim tool and to Emacs are 1) VimScript (some people find this less than productive) and Emacs lisp is a very effective and elegant programming language with which to configure your editor. 2) Arguably there are more features / better language support generally available in Emacs than Vim The single biggest change in moving from Vim to Emacs is that you run Emacs once and keep it open all the time. If you keep closing and opening Emacs, as is often the case with vim, its likely you will find Emacs slow and will be less likely to want to use Emacs instead of Vim. You can set up a persistent server or daemon process for Emacs too, then use emacsclient command. If you use a community configuration for Emacs (Spacemacs, Prelude, Doom) then this can save a lot of time setting up the basics. Using Spacemacs I have discovered lots of very useful features that speed up my work that would have taken a lot longer to discover and configure on my own. Spacemacs has become my config of choice, so much so I wrote (am still writing) a book on using this. Initially for Clojure development, but has broadened to a more general Spacemacs / Emacs guide. https://practical.li/spacemacs/ If you do try Spacemacs, I highly recommend using the develop branch. It is quite stable and has all the latest bug fixes and new features like Language Server Protocol which many languages are adopting (Clojure already has CIDER which already does a lot more than LSP).","title":"Thoughts on moving from Vim to Spacemacs"},{"location":"why-move-from-vi-to-spacemacs/#thoughts-on-moving-from-vim-to-spacemacs","text":"Do you think it's worth for a beginner developer who still doesn't know much about the big frameworks to spend time learning Emacs? Especially if said developer has been using Emacs' fabled competitor for over four years now? I was searching for what the best free IDE is, and ended up finding your answer in quora about emacs https://www.quora.com/What-is-the-best-free-IDE/answer/John-Stevenson-12 Ever since I did a few projects in Racket I have been interested in the lisp scheme syntax, and been dancing with the idea of learning Emacs. But since I found my first job, I've been jumping from (the introduction) of one technology or another because I needed them for my role. Now I'm about to be furloughed, and the dance of learning Emacs seems much more attractive, but I don't know if it's the right time for this.So I'd really appreciate to hear your take on this dilemma. :) Short answer: Yes, definitely learn Emacs, start with Spacemacs develop branch and read my book https://practical.li/spacemacs/ Longer answer: It sounds like you have the agony of choice, which is a very real problem in our modern world. There are so many things you can do with your time. I can offer my experiences as a guide, but only you know how best to spend your time I would certainly recommend looking at Emacs and specifically Spacemacs if you have the time. There are lots of features you can just drop into Emacs that can help with a wide range of languages. Arguably Emacs has the most up to date support for the vast majority of languages (with LSP there is even excellent support for Java). Using a community configuration like Spacemacs means standing on the shoulders of giants, using the cumulative experience of the community to do much more. So the learning curve for Emacs can be very shallow. I assume you refer to Vi/Vim as the alternative to Emacs. I find the Vi style editing (multi-modal) to be amazingly productive and feel lost without it. Ironically, I only learnt Vi style editing when I started using Spacemacs. I suggest reasons to move away from a specific Vim tool and to Emacs are 1) VimScript (some people find this less than productive) and Emacs lisp is a very effective and elegant programming language with which to configure your editor. 2) Arguably there are more features / better language support generally available in Emacs than Vim The single biggest change in moving from Vim to Emacs is that you run Emacs once and keep it open all the time. If you keep closing and opening Emacs, as is often the case with vim, its likely you will find Emacs slow and will be less likely to want to use Emacs instead of Vim. You can set up a persistent server or daemon process for Emacs too, then use emacsclient command. If you use a community configuration for Emacs (Spacemacs, Prelude, Doom) then this can save a lot of time setting up the basics. Using Spacemacs I have discovered lots of very useful features that speed up my work that would have taken a lot longer to discover and configure on my own. Spacemacs has become my config of choice, so much so I wrote (am still writing) a book on using this. Initially for Clojure development, but has broadened to a more general Spacemacs / Emacs guide. https://practical.li/spacemacs/ If you do try Spacemacs, I highly recommend using the develop branch. It is quite stable and has all the latest bug fixes and new features like Language Server Protocol which many languages are adopting (Clojure already has CIDER which already does a lot more than LSP).","title":"Thoughts on moving from Vim to Spacemacs"},{"location":"writing-tips/","text":"Writing tips for MkDocs \u03bb\ufe0e Making the docs more engaging using the mkdocs-material theme reference guide Hypertext links \u03bb\ufe0e Links open in the same browser window/tab by default. Add {target=_blank} to the end of a link to configure opening in a new tab [ link text ]( url ){target=_blank} Buttons \u03bb\ufe0e Convert any link into a button by adding { .md-button } class names to end of the markdown for a link, which uses .md-button-primary by default. Include target=_blank for buttons with links to external sites. [link text](http://practical.li/blog){ .md-button target=_blank } Practicalli Blog Add an icon to the button with fontawsome Practicalli Issues YouTube video \u03bb\ufe0e Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position < p style = \"text-align:center\" > < iframe width = \"560\" height = \"315\" src = \"https://www.youtube.com/embed/rQ802kSaip4\" title = \"YouTube video player\" frameborder = \"0\" allow = \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen ></ iframe > </ p > mkdocs material does not have direct support for adding a YouTube video via markdown. Admonitions \u03bb\ufe0e Supported admonition types Note Use !!! followed by NOTE Adding a title Use !!! followed by NOTE and a \"title in double quotes\" Shh, no title bar just the text... Use !!! followed by NOTE and a \"\" empty double quotes Abstract Use !!! followed by ABSTRACT Info Use !!! followed by INFO Tip Use !!! followed by TIP Success Use !!! followed by SUCCESS Question Use !!! followed by QUESTION Warning Use !!! followed by WARNING Failure Use !!! followed by FAILURE Danger Use !!! followed by DANGER Bug Use !!! followed by BUG Example Use !!! followed by EXAMPLE Quote Use !!! followed by QUOTE Collapsing admonitions \u03bb\ufe0e Note Collapse those admonitions using ??? instead of !!! Replace with a title Use ??? followed by NOTE and a \"title in double quotes\" Expanded by default Use ???+ , note the + character, followed by NOTE and a \"title in double quotes\" Inline blocks \u03bb\ufe0e Inline blocks of text to make a very specific callout within text Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding something to then end of text is probably my favourite Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Code blocks \u03bb\ufe0e Code blocks include a copy icon automatically Syntax highlighting in code blocks ( defn my-function ; Write a simple function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Give the code block a title using title=\"\" after the backtics and language name src/practicalli/gameboard.clj ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) We all like line numbers, especially when you can set the starting line src/practicalli/gameboard.clj 42 43 44 45 ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Add linenums=42 to start line numbers from 42 onward clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\" Annotations \u03bb\ufe0e Add an annotation using # (1) where 1 is the number of the annotation ls -la $HOME /Downloads # (1) 1. :woman_raising_hand: I'm a code annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be written in Markdown. Code blocks with annotation, add ! after the annotation number to suppress the # character ( defn helper-function \"Doc-string with description of function purpose\" ; (1)! [ data ] ( merge { :fish 1 } data ) ) 1. Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is. GitHub action example with multiple annotations GitHub action example with multiple annotations name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further [MkDocs plugins] or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ... Highlight lines in code blocks \u03bb\ufe0e hl_lines=\"2\" where 2 is the line number to highlight ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Content tabs \u03bb\ufe0e Create in page tabs that can also be Setting up a project Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/gameboard lein new app practicalli/gameboard Or nest the content tabs in an admonition Run a terminal REPL Clojure CLI Leiningen clojure -T:repl/rebel lein repl Diagrams \u03bb\ufe0e Neat flow diagrams graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; UML Sequence Diagrams sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! state transition diagrams stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagrams - but dont need them. Entity relationship diagrams are handy though erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Other diagram types \u03bb\ufe0e Besides the diagram types listed above, [Mermaid.js] provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile. Formatting \u03bb\ufe0e Keyboard keys for all those key bindings... each number and alphabet character has their own key Space or Space for leader and , for local leader Punctionation keys by name, e.g. | Left + Up + Down + Right Meta + X for all the classic Emacs fun Ctrl + Alt + Del Grids \u03bb\ufe0e Useful for putting button links on the main page as quick links into the key parts of the book HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Sponsor only feature Images \u03bb\ufe0e Oh yesssss... aligning images... I am in love... and lazy loading too Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If the image is too big then it will simply take up the whole width of the page When adding the color pallet toggle , have different images for light and dark Lists \u03bb\ufe0e Task lists Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Tooltips \u03bb\ufe0e The humble tool tip Hover me with references Hover me Icon tool tip with a title Abreviations \u03bb\ufe0e The HTML specification is maintained by the W3C. [HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium Magic links \u03bb\ufe0e MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format. Email Practicalli Practicalli Neovim","title":"Writing Tips"},{"location":"writing-tips/#writing-tips-for-mkdocs","text":"Making the docs more engaging using the mkdocs-material theme reference guide","title":"Writing tips for MkDocs"},{"location":"writing-tips/#hypertext-links","text":"Links open in the same browser window/tab by default. Add {target=_blank} to the end of a link to configure opening in a new tab [ link text ]( url ){target=_blank}","title":"Hypertext links"},{"location":"writing-tips/#buttons","text":"Convert any link into a button by adding { .md-button } class names to end of the markdown for a link, which uses .md-button-primary by default. Include target=_blank for buttons with links to external sites. [link text](http://practical.li/blog){ .md-button target=_blank } Practicalli Blog Add an icon to the button with fontawsome Practicalli Issues","title":"Buttons"},{"location":"writing-tips/#youtube-video","text":"Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position < p style = \"text-align:center\" > < iframe width = \"560\" height = \"315\" src = \"https://www.youtube.com/embed/rQ802kSaip4\" title = \"YouTube video player\" frameborder = \"0\" allow = \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen ></ iframe > </ p > mkdocs material does not have direct support for adding a YouTube video via markdown.","title":"YouTube video"},{"location":"writing-tips/#admonitions","text":"Supported admonition types Note Use !!! followed by NOTE Adding a title Use !!! followed by NOTE and a \"title in double quotes\" Shh, no title bar just the text... Use !!! followed by NOTE and a \"\" empty double quotes Abstract Use !!! followed by ABSTRACT Info Use !!! followed by INFO Tip Use !!! followed by TIP Success Use !!! followed by SUCCESS Question Use !!! followed by QUESTION Warning Use !!! followed by WARNING Failure Use !!! followed by FAILURE Danger Use !!! followed by DANGER Bug Use !!! followed by BUG Example Use !!! followed by EXAMPLE Quote Use !!! followed by QUOTE","title":"Admonitions"},{"location":"writing-tips/#collapsing-admonitions","text":"Note Collapse those admonitions using ??? instead of !!! Replace with a title Use ??? followed by NOTE and a \"title in double quotes\" Expanded by default Use ???+ , note the + character, followed by NOTE and a \"title in double quotes\"","title":"Collapsing admonitions"},{"location":"writing-tips/#inline-blocks","text":"Inline blocks of text to make a very specific callout within text Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Adding something to then end of text is probably my favourite Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Inline blocks"},{"location":"writing-tips/#code-blocks","text":"Code blocks include a copy icon automatically Syntax highlighting in code blocks ( defn my-function ; Write a simple function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Give the code block a title using title=\"\" after the backtics and language name src/practicalli/gameboard.clj ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) We all like line numbers, especially when you can set the starting line src/practicalli/gameboard.clj 42 43 44 45 ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ])) Add linenums=42 to start line numbers from 42 onward clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"","title":"Code blocks"},{"location":"writing-tips/#annotations","text":"Add an annotation using # (1) where 1 is the number of the annotation ls -la $HOME /Downloads # (1) 1. :woman_raising_hand: I'm a code annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be written in Markdown. Code blocks with annotation, add ! after the annotation number to suppress the # character ( defn helper-function \"Doc-string with description of function purpose\" ; (1)! [ data ] ( merge { :fish 1 } data ) ) 1. Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is. GitHub action example with multiple annotations GitHub action example with multiple annotations name : ci # (1)! on : push : branches : - master # (2)! - main permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v3 - uses : actions/setup-python@v4 with : python-version : 3.x - run : pip install mkdocs-material # (3)! - run : mkdocs gh-deploy --force You can change the name to your liking. At some point, GitHub renamed master to main . If your default branch is named master , you can safely remove main , vice versa. This is the place to install further [MkDocs plugins] or Markdown extensions with pip to be used during the build: pip install \\ mkdocs-material \\ mkdocs-awesome-pages-plugin \\ ...","title":"Annotations"},{"location":"writing-tips/#highlight-lines-in-code-blocks","text":"hl_lines=\"2\" where 2 is the line number to highlight ( defn my-function \"With a lovely doc-string\" [ arguments ] ( map inc [ 1 2 3 ]))","title":"Highlight lines in code blocks"},{"location":"writing-tips/#content-tabs","text":"Create in page tabs that can also be Setting up a project Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/gameboard lein new app practicalli/gameboard Or nest the content tabs in an admonition Run a terminal REPL Clojure CLI Leiningen clojure -T:repl/rebel lein repl","title":"Content tabs"},{"location":"writing-tips/#diagrams","text":"Neat flow diagrams graph LR A[Start] --> B{Error?}; B -->|Yes| C[Hmm...]; C --> D[Debug]; D --> B; B ---->|No| E[Yay!]; UML Sequence Diagrams sequenceDiagram Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! state transition diagrams stateDiagram-v2 state fork_state <<fork>> [*] --> fork_state fork_state --> State2 fork_state --> State3 state join_state <<join>> State2 --> join_state State3 --> join_state join_state --> State4 State4 --> [*] Class diagrams - but dont need them. Entity relationship diagrams are handy though erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses","title":"Diagrams"},{"location":"writing-tips/#other-diagram-types","text":"Besides the diagram types listed above, [Mermaid.js] provides support for pie charts , gantt charts , user journeys , git graphs and requirement diagrams , all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile.","title":"Other diagram types"},{"location":"writing-tips/#formatting","text":"Keyboard keys for all those key bindings... each number and alphabet character has their own key Space or Space for leader and , for local leader Punctionation keys by name, e.g. | Left + Up + Down + Right Meta + X for all the classic Emacs fun Ctrl + Alt + Del","title":"Formatting"},{"location":"writing-tips/#grids","text":"Useful for putting button links on the main page as quick links into the key parts of the book HTML for content and structure JavaScript for interactivity CSS for text running out of boxes Internet Explorer ... huh? Sponsor only feature","title":"Grids"},{"location":"writing-tips/#images","text":"Oh yesssss... aligning images... I am in love... and lazy loading too Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. If the image is too big then it will simply take up the whole width of the page When adding the color pallet toggle , have different images for light and dark","title":"Images"},{"location":"writing-tips/#lists","text":"Task lists Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Lists"},{"location":"writing-tips/#tooltips","text":"The humble tool tip Hover me with references Hover me Icon tool tip with a title","title":"Tooltips"},{"location":"writing-tips/#abreviations","text":"The HTML specification is maintained by the W3C. [HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium","title":"Abreviations"},{"location":"writing-tips/#magic-links","text":"MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format. Email Practicalli Practicalli Neovim","title":"Magic links"},{"location":"alternative-tooling/","text":"Alternative Tooling \u03bb\ufe0e Alternative tooling that can be used with Spacemacs but it not the main focus of this guide. Joker for linting Parinfer for structural editing Leiningen External Clojure REPL Structural Editing Alternatives \u03bb\ufe0e Paredit was the original structural editing mode just for lisps, however, it is not actively maintained. The Clojure layer in Spacemacs actually includes paredit, however no keybindings are defined, so you either have to use commands via SPC SPC or add your own keybindings to dotspacemacs/user-config , preferably using hooks on the Clojure mode. Parinfer is relatively new and self describes as a bit of an experiment. It does provide a bit more indentation automation which for some is great and for others quite confusing or annoying. Smartparens and Clojure mode formatting does everything that Parinfer does, its just parinfer works a little differently and needs some configuration.","title":"Alternative Tooling"},{"location":"alternative-tooling/#alternative-tooling","text":"Alternative tooling that can be used with Spacemacs but it not the main focus of this guide. Joker for linting Parinfer for structural editing Leiningen External Clojure REPL","title":"Alternative Tooling"},{"location":"alternative-tooling/#structural-editing-alternatives","text":"Paredit was the original structural editing mode just for lisps, however, it is not actively maintained. The Clojure layer in Spacemacs actually includes paredit, however no keybindings are defined, so you either have to use commands via SPC SPC or add your own keybindings to dotspacemacs/user-config , preferably using hooks on the Clojure mode. Parinfer is relatively new and self describes as a bit of an experiment. It does provide a bit more indentation automation which for some is great and for others quite confusing or annoying. Smartparens and Clojure mode formatting does everything that Parinfer does, its just parinfer works a little differently and needs some configuration.","title":"Structural Editing Alternatives"},{"location":"alternative-tooling/leiningen/","text":"Leiningen \u03bb\ufe0e Leiningen is the most commonly used build automation tool used to manage Clojure projects. Install by saving the Leiningen install script and running it inside a terminal window. Install script for Linux & MacOSX Install script for Microsoft Windows or use the Linux script from GitBash (recommended). Save the lein file to somewhere on your operating system path, eg ~/bin chmod a+x ~/bin/lein lein Now run this script on the command line lein The first time you run this script it downloads a Java archive file (JAR) of the latest version of Leiningen. When you run the script again, you have a working Leiningen build tool. Running lein once installed will show you a list of available commands. Clojure \u03bb\ufe0e If you are using Leiningen then there is no specific install for Clojure. Clojure comes as a library, a JAR file, managed by the build tool Leiningen just like any other dependency. When you create a project with Leiningen, the configuration is created in a file called project.clj . Inside this project.clj is a dependencies entry where the version of clojure is specified along with any other dependencies. Here is an example of a project.clj configuration with just Clojure as a dependency (defproject project-name \"0.1.0-SNAPSHOT\" :description \"FIXME: write description\" :url \"http://example.com/FIXME\" :license {:name \"Eclipse Public License\" :url \"http://www.eclipse.org/legal/epl-v10.html\"} :dependencies [[org.clojure/clojure \"1.8.0\"]]) Hint The Clojure library is very small (~3.6Mb) and Leiningen caches it and all other libraries locally in the same folder structure that Maven uses, eg Clojure version 0.1.8 would be cached in .m2/repository/org/clojure/clojure/1.8.0","title":"Leiningen"},{"location":"alternative-tooling/leiningen/#leiningen","text":"Leiningen is the most commonly used build automation tool used to manage Clojure projects. Install by saving the Leiningen install script and running it inside a terminal window. Install script for Linux & MacOSX Install script for Microsoft Windows or use the Linux script from GitBash (recommended). Save the lein file to somewhere on your operating system path, eg ~/bin chmod a+x ~/bin/lein lein Now run this script on the command line lein The first time you run this script it downloads a Java archive file (JAR) of the latest version of Leiningen. When you run the script again, you have a working Leiningen build tool. Running lein once installed will show you a list of available commands.","title":"Leiningen"},{"location":"alternative-tooling/leiningen/#clojure","text":"If you are using Leiningen then there is no specific install for Clojure. Clojure comes as a library, a JAR file, managed by the build tool Leiningen just like any other dependency. When you create a project with Leiningen, the configuration is created in a file called project.clj . Inside this project.clj is a dependencies entry where the version of clojure is specified along with any other dependencies. Here is an example of a project.clj configuration with just Clojure as a dependency (defproject project-name \"0.1.0-SNAPSHOT\" :description \"FIXME: write description\" :url \"http://example.com/FIXME\" :license {:name \"Eclipse Public License\" :url \"http://www.eclipse.org/legal/epl-v10.html\"} :dependencies [[org.clojure/clojure \"1.8.0\"]]) Hint The Clojure library is very small (~3.6Mb) and Leiningen caches it and all other libraries locally in the same folder structure that Maven uses, eg Clojure version 0.1.8 would be cached in .m2/repository/org/clojure/clojure/1.8.0","title":"Clojure"},{"location":"alternative-tooling/org-easy-templates/","text":"Org-mode Easy Templates \u03bb\ufe0e Hint::Additional configuration required \u03bb\ufe0e (require 'org-tempo) must be added to dotspacemacs/user-config in the .spacemacs file for Easy Templates to work. org-reveal also conflicts with newer versions of Org-mode easy templates provide source code block and other highlight sections. < followed by the template alias and then TAB will expand the block template. Name Template Description s #+BEGIN_SRC ... #+END_SRC Adds a source block e #+BEGIN_EXAMPLE ... #+END_EXAMPLE q #+BEGIN_QUOTE ... #+END_QUOTE v #+BEGIN_VERSE ... #+END_VERSE c #+BEGIN_CENTER ... #+END_CENTER l #+BEGIN_LaTeX ... #+END_LaTeX LaTeX markup section L #+LaTeX: h #+BEGIN_HTML ... #+END_HTML HTML section H #+HTML: a #+BEGIN_ASCII ... #+END_ASCII A #+ASCII: i #+INDEX: line I #+INCLUDE: line Add custom templates by adding to the org-structure-template-alist","title":"Org-mode Easy Templates"},{"location":"alternative-tooling/org-easy-templates/#org-mode-easy-templates","text":"","title":"Org-mode Easy Templates"},{"location":"alternative-tooling/org-easy-templates/#hintadditional-configuration-required","text":"(require 'org-tempo) must be added to dotspacemacs/user-config in the .spacemacs file for Easy Templates to work. org-reveal also conflicts with newer versions of Org-mode easy templates provide source code block and other highlight sections. < followed by the template alias and then TAB will expand the block template. Name Template Description s #+BEGIN_SRC ... #+END_SRC Adds a source block e #+BEGIN_EXAMPLE ... #+END_EXAMPLE q #+BEGIN_QUOTE ... #+END_QUOTE v #+BEGIN_VERSE ... #+END_VERSE c #+BEGIN_CENTER ... #+END_CENTER l #+BEGIN_LaTeX ... #+END_LaTeX LaTeX markup section L #+LaTeX: h #+BEGIN_HTML ... #+END_HTML HTML section H #+HTML: a #+BEGIN_ASCII ... #+END_ASCII A #+ASCII: i #+INDEX: line I #+INCLUDE: line Add custom templates by adding to the org-structure-template-alist","title":"Hint::Additional configuration required"},{"location":"alternative-tooling/paredit-keybindings/","text":"Paredit keybindings \u03bb\ufe0e To use Paredit with Spacemacs you can use commands via SPC SPC or define your own keybindings. Spacemacs recommended custom keybindings \u03bb\ufe0e Spacemacs recommends custom keybindings be defined under SPC o . So you can define keybindings under SPC o for paredit, for example SPC o p s for paredit slurp. Using SPC o ensures that your keybindings will not clash with any others provided by Spacemacs. Classic Paredit keybindings \u03bb\ufe0e You could use the classic Emacs style keybindings for paredit as follows TODO::Should provide examples of using web hook \u03bb\ufe0e define-key on the global-map will set the keybindings for every mode. For paredit it makes sense to set these keybindings for only clojure-mode For example, you can define keybindings for slurping and barfing in the dotspacemacs/user-config section of the .spacemacs file. ( define-key global-map ( kbd \"C-)\" ) 'sp-forward-slurp-sexp ) ( define-key global-map ( kbd \"C-(\" ) 'sp-backward-slurp-sexp ) ( define-key global-map ( kbd \"M-)\" ) 'sp-forward-barf-sexp ) ( define-key global-map ( kbd \"M-(\" ) 'sp-backward-barf-sexp )","title":"Paredit keybindings"},{"location":"alternative-tooling/paredit-keybindings/#paredit-keybindings","text":"To use Paredit with Spacemacs you can use commands via SPC SPC or define your own keybindings.","title":"Paredit keybindings"},{"location":"alternative-tooling/paredit-keybindings/#spacemacs-recommended-custom-keybindings","text":"Spacemacs recommends custom keybindings be defined under SPC o . So you can define keybindings under SPC o for paredit, for example SPC o p s for paredit slurp. Using SPC o ensures that your keybindings will not clash with any others provided by Spacemacs.","title":"Spacemacs recommended custom keybindings"},{"location":"alternative-tooling/paredit-keybindings/#classic-paredit-keybindings","text":"You could use the classic Emacs style keybindings for paredit as follows","title":"Classic Paredit keybindings"},{"location":"alternative-tooling/paredit-keybindings/#todoshould-provide-examples-of-using-web-hook","text":"define-key on the global-map will set the keybindings for every mode. For paredit it makes sense to set these keybindings for only clojure-mode For example, you can define keybindings for slurping and barfing in the dotspacemacs/user-config section of the .spacemacs file. ( define-key global-map ( kbd \"C-)\" ) 'sp-forward-slurp-sexp ) ( define-key global-map ( kbd \"C-(\" ) 'sp-backward-slurp-sexp ) ( define-key global-map ( kbd \"M-)\" ) 'sp-forward-barf-sexp ) ( define-key global-map ( kbd \"M-(\" ) 'sp-backward-barf-sexp )","title":"TODO::Should provide examples of using web hook"},{"location":"alternative-tooling/paredit/","text":"Paredit \u03bb\ufe0e Paredit is the classic minor mode for editing Lisp and Clojure. Paredit is part of the Clojure layer in Spacemacs. Info:: \u03bb\ufe0e Paredit is not considered as actively maintained, although there has been some occasional forks and emulations of this project. Smartparens is the actively maintained alternative to paredit and is applicable to all languages, not just lisp based languages. M-( - wrap the current expression with ()","title":"Paredit"},{"location":"alternative-tooling/paredit/#paredit","text":"Paredit is the classic minor mode for editing Lisp and Clojure. Paredit is part of the Clojure layer in Spacemacs.","title":"Paredit"},{"location":"alternative-tooling/paredit/#info","text":"Paredit is not considered as actively maintained, although there has been some occasional forks and emulations of this project. Smartparens is the actively maintained alternative to paredit and is applicable to all languages, not just lisp based languages. M-( - wrap the current expression with ()","title":"Info::"},{"location":"alternative-tooling/parinfer/","text":"Alternative Tooling - Parinfer \u03bb\ufe0e The recommended Structural editing approach with Spacemacs is to use smartparens and if using Vim style editing evil-cleverparens. These packages follow the paredit style of structural editing. Parinfer for Emacs is self described as a simpler way to write lisp (but only if you are not used to paredit style, then you may find parinfer annoying) Please read the parinfer for emacs documentation before adding the parinfer layer , to ensure you understand the approach it takes.","title":"Alternative Tooling - Parinfer"},{"location":"alternative-tooling/parinfer/#alternative-tooling-parinfer","text":"The recommended Structural editing approach with Spacemacs is to use smartparens and if using Vim style editing evil-cleverparens. These packages follow the paredit style of structural editing. Parinfer for Emacs is self described as a simpler way to write lisp (but only if you are not used to paredit style, then you may find parinfer annoying) Please read the parinfer for emacs documentation before adding the parinfer layer , to ensure you understand the approach it takes.","title":"Alternative Tooling - Parinfer"},{"location":"alternative-tooling/silversearcher-ag/","text":"Silver Searcher - ag \u03bb\ufe0e Spacemacs comes configured to use Silver Searcher as a search tool, but only if it is on the execution PATH of the operating system. Silver Searcher make searching much faster as it skips file and directory patterns defined in .gitignore . Additional patterns to be skipped can be defined in an .ignore file. For Clojure and Clojurescript developers there are many files that you always want to ignore when searching your projects Compiled, compressed or minified files Patterns from your version control ignore files (eg. .gitignore ) Spacemacs search tool configuration \u03bb\ufe0e The search tools that Spacemacs looks for is configured in ~/.spacemacs References \u03bb\ufe0e ag man pages (Ubuntu) silversearcher-ag github project page","title":"Silversearcher ag"},{"location":"alternative-tooling/silversearcher-ag/#silver-searcher-ag","text":"Spacemacs comes configured to use Silver Searcher as a search tool, but only if it is on the execution PATH of the operating system. Silver Searcher make searching much faster as it skips file and directory patterns defined in .gitignore . Additional patterns to be skipped can be defined in an .ignore file. For Clojure and Clojurescript developers there are many files that you always want to ignore when searching your projects Compiled, compressed or minified files Patterns from your version control ignore files (eg. .gitignore )","title":"Silver Searcher - ag"},{"location":"alternative-tooling/silversearcher-ag/#spacemacs-search-tool-configuration","text":"The search tools that Spacemacs looks for is configured in ~/.spacemacs","title":"Spacemacs search tool configuration"},{"location":"alternative-tooling/silversearcher-ag/#references","text":"ag man pages (Ubuntu) silversearcher-ag github project page","title":"References"},{"location":"assets/images/social/","text":"Social Cards \u03bb\ufe0e Social Cards are visual previews of the website that are included when sending links via social media platforms. Material for MkDocs is configured to generate beautiful social cards automatically , using the colors, fonts and logos defined in mkdocs.yml Generated images are stored in this directory.","title":"Social Cards"},{"location":"assets/images/social/#social-cards","text":"Social Cards are visual previews of the website that are included when sending links via social media platforms. Material for MkDocs is configured to generate beautiful social cards automatically , using the colors, fonts and logos defined in mkdocs.yml Generated images are stored in this directory.","title":"Social Cards"},{"location":"clojure-development/","text":"Clojure Development Overview \u03bb\ufe0e A REPL workflow is supported and highly encouraged for effective Clojure development. CIDER jack-in Command Line REPL , ' ( sesman-start ) and select cider-jack-in-clj to start a REPL for the current Clojure project (also works without a project). Run a rich terminal UI using the :repl/rebel alias from practicalli/clojure-deps-edn clojure -M:repl/rebel Simplest Clojure CLI project A deps.edn file containing an empty hash-map {} is the simplest Clojure CLI project recognised by Spacemacs Clojure layer (CIDER). The Clojure library is automatically included as a dependency and the src directory added to the class path, so Clojure .clj files under the src directory can be used with the REPL. REPL Driven Development In Spacemacs Using Project Templates \u03bb\ufe0e Clojure projects can be generated from templates using clj-new , deps-new or Leiningen. SPC ' opens an Emacs popup buffer containing an shell terminal to run a command to create a Clojure project from a template. Or you can open a terminal window from your operating system. Clojure CLI clj-new Clojure CLI deps-new Leiningen :project/new is an alias for this tool provided by practicalli/clojure-deps-edn , a user level configuration for Clojure CLI Create a new project with Clojure CLI, using the app template and a project called practicalli/playground clojure -M:project/new app practicalli/playground :project/deps-new is an alias for this tool provided by practicalli/clojure-deps-edn , a user level configuration for Clojure CLI Create a new project with Clojure CLI, using the app template and a project called practicalli/playground clojure -T:project/deps-new :template app :name practicalli/playground Leiningen Install Create a new project with Leiningen called playground, within the practicalli domain. Use the app template to create a very simple Clojure application. lein new app playground Leiningen can generate a wide range of projects from templates. To use these projects with Clojure CLI a deps.edn file should be added, using the same collection of library dependencies. See Leiningen for details Project files \u03bb\ufe0e Space p f lists all project files, type characters to narrow the list, Enter to select and open the file Space p q toggles between source code namespace and its related test namespace Space f f to navigate the file directory, Tab to complete file and directory names, Enter to open the selected file. Create a new file by typing its name and pressing return, the file and any intermediate directory path will be created Space f D to permanently delete a file. Hint Clojure LSP and clj-refactor automatically add an ns form to define the namespace when creating a new Clojure file. Refactor \u03bb\ufe0e , r r ( lsp-rename ) to rename ns forms, def, defn and local names, updating any references to those names throughout the project. Renaming a namespace also renames the filename along with requires that include the namespace in other namespaces Namespaces or def / defn expressions it contains should be removed from the running REPL, to prevent inconsistencies between the code and REPL. Remove define before renaming Keep the REPL state clean by removing the name of a function to be renamed , e u ( cider-undef ) removes the current var from the REPL (uses nREPL undef command) Alternatively, , q r to restart the REPL after names have been changed or deleted.","title":"Clojure Development Overview"},{"location":"clojure-development/#clojure-development-overview","text":"A REPL workflow is supported and highly encouraged for effective Clojure development. CIDER jack-in Command Line REPL , ' ( sesman-start ) and select cider-jack-in-clj to start a REPL for the current Clojure project (also works without a project). Run a rich terminal UI using the :repl/rebel alias from practicalli/clojure-deps-edn clojure -M:repl/rebel Simplest Clojure CLI project A deps.edn file containing an empty hash-map {} is the simplest Clojure CLI project recognised by Spacemacs Clojure layer (CIDER). The Clojure library is automatically included as a dependency and the src directory added to the class path, so Clojure .clj files under the src directory can be used with the REPL. REPL Driven Development In Spacemacs","title":"Clojure Development Overview"},{"location":"clojure-development/#using-project-templates","text":"Clojure projects can be generated from templates using clj-new , deps-new or Leiningen. SPC ' opens an Emacs popup buffer containing an shell terminal to run a command to create a Clojure project from a template. Or you can open a terminal window from your operating system. Clojure CLI clj-new Clojure CLI deps-new Leiningen :project/new is an alias for this tool provided by practicalli/clojure-deps-edn , a user level configuration for Clojure CLI Create a new project with Clojure CLI, using the app template and a project called practicalli/playground clojure -M:project/new app practicalli/playground :project/deps-new is an alias for this tool provided by practicalli/clojure-deps-edn , a user level configuration for Clojure CLI Create a new project with Clojure CLI, using the app template and a project called practicalli/playground clojure -T:project/deps-new :template app :name practicalli/playground Leiningen Install Create a new project with Leiningen called playground, within the practicalli domain. Use the app template to create a very simple Clojure application. lein new app playground Leiningen can generate a wide range of projects from templates. To use these projects with Clojure CLI a deps.edn file should be added, using the same collection of library dependencies. See Leiningen for details","title":"Using Project Templates"},{"location":"clojure-development/#project-files","text":"Space p f lists all project files, type characters to narrow the list, Enter to select and open the file Space p q toggles between source code namespace and its related test namespace Space f f to navigate the file directory, Tab to complete file and directory names, Enter to open the selected file. Create a new file by typing its name and pressing return, the file and any intermediate directory path will be created Space f D to permanently delete a file. Hint Clojure LSP and clj-refactor automatically add an ns form to define the namespace when creating a new Clojure file.","title":"Project files"},{"location":"clojure-development/#refactor","text":", r r ( lsp-rename ) to rename ns forms, def, defn and local names, updating any references to those names throughout the project. Renaming a namespace also renames the filename along with requires that include the namespace in other namespaces Namespaces or def / defn expressions it contains should be removed from the running REPL, to prevent inconsistencies between the code and REPL. Remove define before renaming Keep the REPL state clean by removing the name of a function to be renamed , e u ( cider-undef ) removes the current var from the REPL (uses nREPL undef command) Alternatively, , q r to restart the REPL after names have been changed or deleted.","title":"Refactor"},{"location":"clojure-development/project-configuration/","text":"Emacs Project configuration \u03bb\ufe0e .dir-locals.el files provide project level configuration where the default aliases, build tool and other CIDER actions can be defined. There are many CIDER configuration variables that can be added to .dir-locals.el SPC p e to create or edit a .dir-locals.el file in the current project. Force loading the .dir-locals.el configuration The definitions in a .dir-locals.el are only ready when opening a file from the current project, so a file must be opened or reloaded, Space b R ( revert-buffer ). Switching to another buffer that has not been reverted (or re-opened) may not pick up the changes to the .dir-locals.el file. Example configurations \u03bb\ufe0e An example of setting the Clojure CLI tool as the default Clojure tool (rather than Leiningen or Boot). Also configuring several deps.edn aliases to be used when starting the REPL via Clojure CLI. (( clojure-mode . (( cider-preferred-build-tool . clojure-cli ) ( cider-clojure-cli-aliases . \":env/dev:env/test\" )))) An example of a ClojureScript project using figwheel-main, Clojure CLI and hiding the display banner in the REPL browser (( clojure-mode . (( cider-preferred-build-tool . clojure-cli ) ( cider-clojure-cli-aliases . \":fig:dev\" ) ( cider-default-cljs-repl . figwheel-main ) ( cider-figwheel-main-default-options . \"dev\" ) ( cider-repl-display-help-banner . nil )))) Only Clojure CLI tools alias \u03bb\ufe0e The cider-jack-in command injects dependencies via the --deps command line argument and includes the --middleware option for nrepl. This auto-injected configuration can affect project or user level aliases used with jack-in. Use the following .dir-locals.el configuration to just use the configuration defined in the named alias (( clojure-mode . (( cider-preferred-build-tool . clojure-cli ) ( cider-clojure-cli-aliases . \":alias/name\" ) ( cider-jack-in-dependencies . nil ) ( cider-jack-in-nrepl-middlewares . nil ) ( cider-jack-in-lein-plugins . nil ) ( cider-clojure-cli-parameters . \"\" )))) cider-clojure-cli-aliases replaces cider-clojure-cli-global-options variable Shared and local configurations \u03bb\ufe0e Assuming a team agrees to keep a shared .dir-locals.el configuration in a project repository, each developer can add their own configuration in a .dir-locals-2.el file . The .dir-locals-2.el will be loaded in addition to .dir-locals.el . Keep tooling config in a separate repository Tooling configuration is generally not project specific, so if sharing that configuration in a team simply create a repository for tooling. Or add tooling configuration to the project documentation. Common configurations \u03bb\ufe0e CIDER documentation - basic configuration describes many of the configuration variables available. Practicalli also create a list of variables extracted from the clojure-emacs/cider project. .dir-locals.el is also useful for setting Projectile configuration, e.g. the project-type. This is especially useful for monorepo or nested projects . Set as Global options Variables can also be added using (setq ) to the dotspacemacs/user-config section of .spacemacs to set a default variable for all projects. The .dir-locals.el file will over-ride the global settings. (setq (cider-preferred-build-tool 'clojure-cli)) Understanding the syntax \u03bb\ufe0e Elisp uses a two-element tuples called cons cells, create using the cons function, or with a dotted-pair notation. This is loosely equivalent to key-value pairs in a Clojure hash-map. cons cell example ( cons \"config-variable-name\" \"custom-value\" ) dotted-pair example ' ( \"config-variable-name\" . \"custom-value\" ) Multiple key-value pairs are defined as a collection of these cons cells in a list. (( \"config-variable-name\" . \"custom-value\" ) ( \"config-variable-name2\" . \"custom-value2\" )) .dir-locals.el is a list of dotted-pairs for each major mode. The value for the major mode is another list of dotted pairs which may contain one or more dotted-pairs. (( clojure-mode . (( config-var1 . \"custom-value1\" ) ( config-var2 . \"custom-value2\" ))) ( org-mode . (( config-var3 . \"custom-value3\" )))) The configuration variables are set when a file is open in a specific Emacs major mode. Avoid using nil for major mode Use the major mode name rather than nil to ensure the variable is only applied to the specific mode. nil applies the variables in all buffers regardless of their major mode, potentially leading to conflicts. Custom code \u03bb\ufe0e eval variable will evaluate custom code specified when a variable is used. For example, if using a new type of ClojureScript REPL that CIDER does not currently know, then custom elisp code can be added to make CIDER do the required actions. (( cider-mode . (( eval . ( cider-register-cljs-repl-type 'new-cljs-repl \"(custom-elisp-function-for-new-cljs-repl)\" )) ( cider-default-cljs-repl . new-cljs-repl )))) Further examples \u03bb\ufe0e The chui ClojureScript test runner project uses a .dir-locals.el file with example custom code. One custom expression ensures nrepl middleware is injected into the environment so CIDER can connect. The other custom expression sets the indent size. (( clojure-mode . (( cider-clojure-cli-aliases . \"-M:env/dev:env/test\" ) ( cider-custom-cljs-repl-init-form . \"(user/cljs-repl)\" ) ( cider-default-cljs-repl . custom ) ( cider-preferred-build-tool . clojure-cli ) ( cider-redirect-server-output-to-repl . t ) ( cider-repl-display-help-banner . nil ) ( clojure-toplevel-inside-comment-form . t ) ( eval . ( progn ( make-variable-buffer-local 'cider-jack-in-nrepl-middlewares ) ( add-to-list 'cider-jack-in-nrepl-middlewares \"shadow.cljs.devtools.server.nrepl/middleware\" ))) ( eval . ( define-clojure-indent ( assoc 0 ) ( ex-info 0 )))))) Reference \u03bb\ufe0e CIDER list of configuration variables Hard CIDER: Project specific configuration Emacs Wiki: per-directory local variables Project level Emacs config with .dir-locals.el - lambdaisland Also review directory variables in the Emacs the info pages ( info \"(emacs) Directory Variables\" ) .","title":"Emacs Project configuration"},{"location":"clojure-development/project-configuration/#emacs-project-configuration","text":".dir-locals.el files provide project level configuration where the default aliases, build tool and other CIDER actions can be defined. There are many CIDER configuration variables that can be added to .dir-locals.el SPC p e to create or edit a .dir-locals.el file in the current project. Force loading the .dir-locals.el configuration The definitions in a .dir-locals.el are only ready when opening a file from the current project, so a file must be opened or reloaded, Space b R ( revert-buffer ). Switching to another buffer that has not been reverted (or re-opened) may not pick up the changes to the .dir-locals.el file.","title":"Emacs Project configuration"},{"location":"clojure-development/project-configuration/#example-configurations","text":"An example of setting the Clojure CLI tool as the default Clojure tool (rather than Leiningen or Boot). Also configuring several deps.edn aliases to be used when starting the REPL via Clojure CLI. (( clojure-mode . (( cider-preferred-build-tool . clojure-cli ) ( cider-clojure-cli-aliases . \":env/dev:env/test\" )))) An example of a ClojureScript project using figwheel-main, Clojure CLI and hiding the display banner in the REPL browser (( clojure-mode . (( cider-preferred-build-tool . clojure-cli ) ( cider-clojure-cli-aliases . \":fig:dev\" ) ( cider-default-cljs-repl . figwheel-main ) ( cider-figwheel-main-default-options . \"dev\" ) ( cider-repl-display-help-banner . nil ))))","title":"Example configurations"},{"location":"clojure-development/project-configuration/#only-clojure-cli-tools-alias","text":"The cider-jack-in command injects dependencies via the --deps command line argument and includes the --middleware option for nrepl. This auto-injected configuration can affect project or user level aliases used with jack-in. Use the following .dir-locals.el configuration to just use the configuration defined in the named alias (( clojure-mode . (( cider-preferred-build-tool . clojure-cli ) ( cider-clojure-cli-aliases . \":alias/name\" ) ( cider-jack-in-dependencies . nil ) ( cider-jack-in-nrepl-middlewares . nil ) ( cider-jack-in-lein-plugins . nil ) ( cider-clojure-cli-parameters . \"\" )))) cider-clojure-cli-aliases replaces cider-clojure-cli-global-options variable","title":"Only Clojure CLI tools alias"},{"location":"clojure-development/project-configuration/#shared-and-local-configurations","text":"Assuming a team agrees to keep a shared .dir-locals.el configuration in a project repository, each developer can add their own configuration in a .dir-locals-2.el file . The .dir-locals-2.el will be loaded in addition to .dir-locals.el . Keep tooling config in a separate repository Tooling configuration is generally not project specific, so if sharing that configuration in a team simply create a repository for tooling. Or add tooling configuration to the project documentation.","title":"Shared and local configurations"},{"location":"clojure-development/project-configuration/#common-configurations","text":"CIDER documentation - basic configuration describes many of the configuration variables available. Practicalli also create a list of variables extracted from the clojure-emacs/cider project. .dir-locals.el is also useful for setting Projectile configuration, e.g. the project-type. This is especially useful for monorepo or nested projects . Set as Global options Variables can also be added using (setq ) to the dotspacemacs/user-config section of .spacemacs to set a default variable for all projects. The .dir-locals.el file will over-ride the global settings. (setq (cider-preferred-build-tool 'clojure-cli))","title":"Common configurations"},{"location":"clojure-development/project-configuration/#understanding-the-syntax","text":"Elisp uses a two-element tuples called cons cells, create using the cons function, or with a dotted-pair notation. This is loosely equivalent to key-value pairs in a Clojure hash-map. cons cell example ( cons \"config-variable-name\" \"custom-value\" ) dotted-pair example ' ( \"config-variable-name\" . \"custom-value\" ) Multiple key-value pairs are defined as a collection of these cons cells in a list. (( \"config-variable-name\" . \"custom-value\" ) ( \"config-variable-name2\" . \"custom-value2\" )) .dir-locals.el is a list of dotted-pairs for each major mode. The value for the major mode is another list of dotted pairs which may contain one or more dotted-pairs. (( clojure-mode . (( config-var1 . \"custom-value1\" ) ( config-var2 . \"custom-value2\" ))) ( org-mode . (( config-var3 . \"custom-value3\" )))) The configuration variables are set when a file is open in a specific Emacs major mode. Avoid using nil for major mode Use the major mode name rather than nil to ensure the variable is only applied to the specific mode. nil applies the variables in all buffers regardless of their major mode, potentially leading to conflicts.","title":"Understanding the syntax"},{"location":"clojure-development/project-configuration/#custom-code","text":"eval variable will evaluate custom code specified when a variable is used. For example, if using a new type of ClojureScript REPL that CIDER does not currently know, then custom elisp code can be added to make CIDER do the required actions. (( cider-mode . (( eval . ( cider-register-cljs-repl-type 'new-cljs-repl \"(custom-elisp-function-for-new-cljs-repl)\" )) ( cider-default-cljs-repl . new-cljs-repl ))))","title":"Custom code"},{"location":"clojure-development/project-configuration/#further-examples","text":"The chui ClojureScript test runner project uses a .dir-locals.el file with example custom code. One custom expression ensures nrepl middleware is injected into the environment so CIDER can connect. The other custom expression sets the indent size. (( clojure-mode . (( cider-clojure-cli-aliases . \"-M:env/dev:env/test\" ) ( cider-custom-cljs-repl-init-form . \"(user/cljs-repl)\" ) ( cider-default-cljs-repl . custom ) ( cider-preferred-build-tool . clojure-cli ) ( cider-redirect-server-output-to-repl . t ) ( cider-repl-display-help-banner . nil ) ( clojure-toplevel-inside-comment-form . t ) ( eval . ( progn ( make-variable-buffer-local 'cider-jack-in-nrepl-middlewares ) ( add-to-list 'cider-jack-in-nrepl-middlewares \"shadow.cljs.devtools.server.nrepl/middleware\" ))) ( eval . ( define-clojure-indent ( assoc 0 ) ( ex-info 0 ))))))","title":"Further examples"},{"location":"clojure-development/project-configuration/#reference","text":"CIDER list of configuration variables Hard CIDER: Project specific configuration Emacs Wiki: per-directory local variables Project level Emacs config with .dir-locals.el - lambdaisland Also review directory variables in the Emacs the info pages ( info \"(emacs) Directory Variables\" ) .","title":"Reference"},{"location":"clojure-development/project-configuration/monorepo-nested-projects/","text":"Monorepo and nested projects \u03bb\ufe0e A monorepo is a collection related project directories within one source control repository. As the monorepo root is not the root of a Clojure project, SPC p a the projectile-toggle-between-implementation-and-test does not know the type of project. A .dir-locals.el configuration file can be used to define the type of projects the monorepo contains. SPC p e creates a .dir-locals.el file in the root of the project. Type projectile-project-type and select that configuration option. Type clojure-cli for the value (or lein-test for Leiningen projects) SPC f s to save the file. The .dir-locals.el file should now contain the following (( clojure-mode . (( projectile-project-type . clojure-cli )))) practicalli/exercism-clojure-guides is an example of a monorepo. Clojure project types clojure-cli works for Clojure CLI projects and lein-test for Leiningen project. If you have mixed projects, use clojure-cli and place a deps.edn file containing an empty hash-map, {} . Select Leiningen when running the cider-jack-in-* commands. Clojure project types for projectile are define in projectile.el of the projectile project .","title":"Monorepo"},{"location":"clojure-development/project-configuration/monorepo-nested-projects/#monorepo-and-nested-projects","text":"A monorepo is a collection related project directories within one source control repository. As the monorepo root is not the root of a Clojure project, SPC p a the projectile-toggle-between-implementation-and-test does not know the type of project. A .dir-locals.el configuration file can be used to define the type of projects the monorepo contains. SPC p e creates a .dir-locals.el file in the root of the project. Type projectile-project-type and select that configuration option. Type clojure-cli for the value (or lein-test for Leiningen projects) SPC f s to save the file. The .dir-locals.el file should now contain the following (( clojure-mode . (( projectile-project-type . clojure-cli )))) practicalli/exercism-clojure-guides is an example of a monorepo. Clojure project types clojure-cli works for Clojure CLI projects and lein-test for Leiningen project. If you have mixed projects, use clojure-cli and place a deps.edn file containing an empty hash-map, {} . Select Leiningen when running the cider-jack-in-* commands. Clojure project types for projectile are define in projectile.el of the projectile project .","title":"Monorepo and nested projects"},{"location":"clojure-repl/","text":"Clojure REPL \u03bb\ufe0e The Clojure REPL is a live environment in which Clojure code runs, it is the same process for both development and production. A REPL user interface (UI), a prompt or Clojure editor, provides instant feedback when code is evaluated. Any amount of code can be evaluated, from a single expression to multiple namespaces. Expressions such as function definitions can be re-evaluated, changing how the system behaves without having to restart anything. The REPL provides the Clojure developer a fast and effective tool for developing the right data models and algorithms that define the system. Editor Connected REPL \u03bb\ufe0e All Clojure editors connect to an external run REPL process, either connecting to an existing process (connect) or starting a new process from the editor (jack-in). Approaches Description connect connecting to a local or remote REPL process - robust approach supporting rich REPL startup configurations and collaboration jack-in start an external REPL from the editor, injecting editor specific configuration and then connecting Quick start \u03bb\ufe0e Open or select a Clojure buffer, an .edn , .clj , .cljc or .cljs file. Key bindings Description , ' or , m s sesman-start menu to start or connect to a REPL Select from one of the following types of REPL's * cider-connect-clj and cider-jack-in-clj for Clojure on the JVM * cider-connect-cljs and cider-jack-in-cljs for a ClojureScript REPL * cider-jack-in-clj&cljs to start a REPL of both types (full stack) Once the REPL starts, evaluate expressions using the source code buffer . Eval namespace or buffer to load Clojure into CIDER , e b to evaluate the current buffer and load Clojure core into CIDER, making the documentation and other Cider tools fully operational. Or evaluate any valid ns form in the project. CIDER workflow overview \u03bb\ufe0e Space p f open a file from the current project ( Space f f if not in a project) , ' or , m s and start a Clojure REPL using cider-jack-in-clj (may take a few seconds if there are dependencies to download) , e b evaluate the current buffer (also loads Clojure core into CIDER) , e f evaluate the current top-level expression and show the result inline , e e evaluate the previous expression and show the result inline (useful for nested expressions) , e ++semi-colon++ evaluate the current Clojure expression and print the result as a comment , e f evaluate the current top-level expression and pretty-print the result in a separate buffer Space p a toggle between matching source code and unit test buffers , t a run all test functions in the REPL using the cider test runner (evaluate changed test & source code first) , m q r to restart the REPL (i.e. after adding a library as a dependency to the project) Documentation enabled after evaluating a namespace , h h shows the documentation for a function under the cursor, but only if a namespace has been evaluated first. This applies to clojure.core functions as well as project and library specific functions.","title":"Clojure REPL"},{"location":"clojure-repl/#clojure-repl","text":"The Clojure REPL is a live environment in which Clojure code runs, it is the same process for both development and production. A REPL user interface (UI), a prompt or Clojure editor, provides instant feedback when code is evaluated. Any amount of code can be evaluated, from a single expression to multiple namespaces. Expressions such as function definitions can be re-evaluated, changing how the system behaves without having to restart anything. The REPL provides the Clojure developer a fast and effective tool for developing the right data models and algorithms that define the system.","title":"Clojure REPL"},{"location":"clojure-repl/#editor-connected-repl","text":"All Clojure editors connect to an external run REPL process, either connecting to an existing process (connect) or starting a new process from the editor (jack-in). Approaches Description connect connecting to a local or remote REPL process - robust approach supporting rich REPL startup configurations and collaboration jack-in start an external REPL from the editor, injecting editor specific configuration and then connecting","title":"Editor Connected REPL"},{"location":"clojure-repl/#quick-start","text":"Open or select a Clojure buffer, an .edn , .clj , .cljc or .cljs file. Key bindings Description , ' or , m s sesman-start menu to start or connect to a REPL Select from one of the following types of REPL's * cider-connect-clj and cider-jack-in-clj for Clojure on the JVM * cider-connect-cljs and cider-jack-in-cljs for a ClojureScript REPL * cider-jack-in-clj&cljs to start a REPL of both types (full stack) Once the REPL starts, evaluate expressions using the source code buffer . Eval namespace or buffer to load Clojure into CIDER , e b to evaluate the current buffer and load Clojure core into CIDER, making the documentation and other Cider tools fully operational. Or evaluate any valid ns form in the project.","title":"Quick start"},{"location":"clojure-repl/#cider-workflow-overview","text":"Space p f open a file from the current project ( Space f f if not in a project) , ' or , m s and start a Clojure REPL using cider-jack-in-clj (may take a few seconds if there are dependencies to download) , e b evaluate the current buffer (also loads Clojure core into CIDER) , e f evaluate the current top-level expression and show the result inline , e e evaluate the previous expression and show the result inline (useful for nested expressions) , e ++semi-colon++ evaluate the current Clojure expression and print the result as a comment , e f evaluate the current top-level expression and pretty-print the result in a separate buffer Space p a toggle between matching source code and unit test buffers , t a run all test functions in the REPL using the cider test runner (evaluate changed test & source code first) , m q r to restart the REPL (i.e. after adding a library as a dependency to the project) Documentation enabled after evaluating a namespace , h h shows the documentation for a function under the cursor, but only if a namespace has been evaluated first. This applies to clojure.core functions as well as project and library specific functions.","title":"CIDER workflow overview"},{"location":"clojure-repl/clear-repl-buffer/","text":"Clear REPL Buffer \u03bb\ufe0e When large results are returned from Clojure code they can eventually cause a slow-down of Emacs. Clearing the REPL buffer can restore Emacs to its usual speedy self. Auto-trimming of the REPL buffer automatically deletes the oldest output, based on a given size. Use cider-inspector and Source Code buffers , d v displays values in the cider-inspector allowing navigation of nested data structures and paging through large data sets. Portal data navigation tool is an external tool that also provides navigation and paging of data as well as other data visualisation. Evaluation in a Clojure source code buffer are limited to 100 results so avoids potential slow-down from large results. Use , e p menu to pretty print the results of evaluations in a temporary buffer. Clear the REPL buffer from any buffer \u03bb\ufe0e , s l to remove the output of the last evaluation from the REPL buffer, spacemacs/cider-find-and-clear-repl-buffer . , s L clear all the output from the entire REPL session, cider-find-and-clear-repl-output . In the REPL buffer \u03bb\ufe0e , s l to switch to the REPL buffer In Evil Insert mode use the , menu to call commands to clear the REPL buffer: clear to clear the whole buffer history clear-output to clear the result of the last evaluation Configure auto-trimming \u03bb\ufe0e Auto-trimming is not enabled by default in CIDER, it must be set with a specific value. Add the layer variable cider-repl-buffer-size-limit to have all Clojure projects auto-trim the REPL (clojure :variables clojure-enable-clj-refactor t clojure-enable-linters 'clj-kondo clojure-toplevel-inside-comment-form t cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100) Alternatively, add the cider-repl-buffer-size-limit to a .dir-locals.el to affect just one Clojure project (( clojure-mode . (( cider-repl-buffer-size-limit . 100 )))) revert-buffer on a Clojure project to ensure Emacs has loaded the .dir-locals.el","title":"Clear REPL Buffer"},{"location":"clojure-repl/clear-repl-buffer/#clear-repl-buffer","text":"When large results are returned from Clojure code they can eventually cause a slow-down of Emacs. Clearing the REPL buffer can restore Emacs to its usual speedy self. Auto-trimming of the REPL buffer automatically deletes the oldest output, based on a given size. Use cider-inspector and Source Code buffers , d v displays values in the cider-inspector allowing navigation of nested data structures and paging through large data sets. Portal data navigation tool is an external tool that also provides navigation and paging of data as well as other data visualisation. Evaluation in a Clojure source code buffer are limited to 100 results so avoids potential slow-down from large results. Use , e p menu to pretty print the results of evaluations in a temporary buffer.","title":"Clear REPL Buffer"},{"location":"clojure-repl/clear-repl-buffer/#clear-the-repl-buffer-from-any-buffer","text":", s l to remove the output of the last evaluation from the REPL buffer, spacemacs/cider-find-and-clear-repl-buffer . , s L clear all the output from the entire REPL session, cider-find-and-clear-repl-output .","title":"Clear the REPL buffer from any buffer"},{"location":"clojure-repl/clear-repl-buffer/#in-the-repl-buffer","text":", s l to switch to the REPL buffer In Evil Insert mode use the , menu to call commands to clear the REPL buffer: clear to clear the whole buffer history clear-output to clear the result of the last evaluation","title":"In the REPL buffer"},{"location":"clojure-repl/clear-repl-buffer/#configure-auto-trimming","text":"Auto-trimming is not enabled by default in CIDER, it must be set with a specific value. Add the layer variable cider-repl-buffer-size-limit to have all Clojure projects auto-trim the REPL (clojure :variables clojure-enable-clj-refactor t clojure-enable-linters 'clj-kondo clojure-toplevel-inside-comment-form t cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100) Alternatively, add the cider-repl-buffer-size-limit to a .dir-locals.el to affect just one Clojure project (( clojure-mode . (( cider-repl-buffer-size-limit . 100 )))) revert-buffer on a Clojure project to ensure Emacs has loaded the .dir-locals.el","title":"Configure auto-trimming"},{"location":"clojure-repl/clojurescript-repl/","text":"ClojureScript projects \u03bb\ufe0e Practicalli ClojureScript covers the development of websites and single page apps (SPA) with figwheel-main build tool and the react-style reagent library practicalli/clojure-deps-edn defines the :middleware/cider-cljs alias which provides the nREPL connection support specifically for a ClojureScript REPL. Figwheel-main projects \u03bb\ufe0e Create ClojureScript projects using figwheel-main template . Rename the :fig alias to figwheel to clarify the name. Run the project with nREPL and CIDER libraries clojure -M:figwheel:middleware/cider-cljs clojurescript-figwheel-main-external-repl-middleware-cider-cljs.png Choose cider-connect-cljs when using sesman-start Confirm Confirm localhost post for tictactoe project Confirm figwheel-main build tool Confirm dev build configuration SPC b m to open the message buffer which shows the output from nREPL server.","title":"ClojureScript projects"},{"location":"clojure-repl/clojurescript-repl/#clojurescript-projects","text":"Practicalli ClojureScript covers the development of websites and single page apps (SPA) with figwheel-main build tool and the react-style reagent library practicalli/clojure-deps-edn defines the :middleware/cider-cljs alias which provides the nREPL connection support specifically for a ClojureScript REPL.","title":"ClojureScript projects"},{"location":"clojure-repl/clojurescript-repl/#figwheel-main-projects","text":"Create ClojureScript projects using figwheel-main template . Rename the :fig alias to figwheel to clarify the name. Run the project with nREPL and CIDER libraries clojure -M:figwheel:middleware/cider-cljs clojurescript-figwheel-main-external-repl-middleware-cider-cljs.png Choose cider-connect-cljs when using sesman-start Confirm Confirm localhost post for tictactoe project Confirm figwheel-main build tool Confirm dev build configuration SPC b m to open the message buffer which shows the output from nREPL server.","title":"Figwheel-main projects"},{"location":"clojure-repl/component-lifecycle/","text":"Component Lifecycle \u03bb\ufe0e Clojure has several library to manage the lifecycle of components that make up the application, especially those components with state. Components can be started and stopped in a specific order. mount integrant component system Reloade Workflow \u03bb\ufe0e Set up a project to work with component lifecycle service , for example by adding components to the dev.clj file under a dev directory. To load the service code automatically, add require and in-ns expressions to dev/user.clj and use the -M:env/dev alias when starting the REPL from Spacemacs. Example project with component lifecycle \u03bb\ufe0e Mount Integrant Component System Using mount, its common to define a dev.clj file with go , stop and restart functions that manage the lifecycle of mount components. A start function contains the list of components with optional state. ( defn start [] ( with-logging-status ) ( mount/start # 'app.conf/environment # 'app.db/connection # 'app.www/business-app # 'app.service/nrepl )) The go function calls start and marks all components as ready. ( defn go \"Start all states defined by defstate\" [] ( start ) :ready ) The stop function stops all components, removing all non-persistent state. ( defn stop [] ( mount/stop )) The reset function that calls stop , refreshes the namespaces so that stale definitions are removed and starts all components (loading in any new code). ( defn reset \"Stop all states defined by defstate. Reload modified source files and restart all states\" [] ( stop ) ( namespace/refresh :after 'dev/go )) Example dev.clj file for mount Integrant REPL for Clojure Web Service Define a system which contains one or more component definitions. A component definition may include references to other components and signal handlers that specify behavior. Example: a :printer and :stack as service components. When the system receives the :donut.system/start signal, the :printer starts to process the data on the :stack ( ns donut.examples.printer ( :require [ donut.system :as system ])) ( def printer-system { ::system/defs { :services { :stack # ::system { :start ( fn [{{ :keys [ items ]} ::system/config }] ( atom ( vec ( range items )))) :stop ( fn [{ ::system/keys [ instance ]}] ( reset! instance [])) :config { :items 10 }}} :app { :printer # ::system { :start ( fn [{{ :keys [ stack ]} ::system/config }] ( doto ( Thread. ( fn [] ( prn \"peek:\" ( peek @ stack )) ( swap! stack pop ) ( Thread/sleep 1000 ) ( recur ))) ( .start ))) :stop ( fn [{ ::system/keys [ instance ]}] ( .interrupt instance )) :config { :stack ( system/ref [ :services :stack ])}}}}}) ;; start the system, let it run for 5 seconsystem, then stop it ( comment ( let [ system-in-flight ( system/signal printer-system ::system/start )] ( Thread/sleep 5000 ) ( system/signal system-in-flight ::system/stop ))) Lifecycle with cider-refresh \u03bb\ufe0e Create a .dir-locals.el file that calls the relevant mount functions when using cider-refresh . Space p e to open a .dirs.locals.el in the current project, creating the file if it does not exist. During development call the reset function to stop components, clean the namespace and start all components again. (( clojure-mode . (( cider-refresh-before-fn . \"practicalli.dev/reset\" )))) Space f s to save the file. Refresh a buffer from the project or open a new file to trigger the reading of the .dir-locals.el configuration by Emacs. Alternatively, if a namespace refresh is not required, configure the .dirs-local.el file to call stop then start . (( clojure-mode . (( cider-refresh-before-fn . \"practicalli.dev/stop\" ) ( cider-refresh-after-fn . \"practicalli.dev/start\" )))) This code calls the stop function from the component lifecycle library at the start of the cider-refresh function. At the end of cider-refresh , the start function is called to restart all the components in the defined order in the project. Prevent cider-ns-refresh calling component lifecycle functions Ctrl + - , e n or Space u - 1 , e n calls cider-ns-refresh but prevents the refresh functions defined in cider-ns-refresh-before-fn and cider-ns-refresh-after-fn from being invoked. Reference \u03bb\ufe0e Easily Reloading your Clojure Project in Spacemacs Reloading Woes - Lambda island","title":"Component Lifecycle"},{"location":"clojure-repl/component-lifecycle/#component-lifecycle","text":"Clojure has several library to manage the lifecycle of components that make up the application, especially those components with state. Components can be started and stopped in a specific order. mount integrant component system","title":"Component Lifecycle"},{"location":"clojure-repl/component-lifecycle/#reloade-workflow","text":"Set up a project to work with component lifecycle service , for example by adding components to the dev.clj file under a dev directory. To load the service code automatically, add require and in-ns expressions to dev/user.clj and use the -M:env/dev alias when starting the REPL from Spacemacs.","title":"Reloade Workflow"},{"location":"clojure-repl/component-lifecycle/#example-project-with-component-lifecycle","text":"Mount Integrant Component System Using mount, its common to define a dev.clj file with go , stop and restart functions that manage the lifecycle of mount components. A start function contains the list of components with optional state. ( defn start [] ( with-logging-status ) ( mount/start # 'app.conf/environment # 'app.db/connection # 'app.www/business-app # 'app.service/nrepl )) The go function calls start and marks all components as ready. ( defn go \"Start all states defined by defstate\" [] ( start ) :ready ) The stop function stops all components, removing all non-persistent state. ( defn stop [] ( mount/stop )) The reset function that calls stop , refreshes the namespaces so that stale definitions are removed and starts all components (loading in any new code). ( defn reset \"Stop all states defined by defstate. Reload modified source files and restart all states\" [] ( stop ) ( namespace/refresh :after 'dev/go )) Example dev.clj file for mount Integrant REPL for Clojure Web Service Define a system which contains one or more component definitions. A component definition may include references to other components and signal handlers that specify behavior. Example: a :printer and :stack as service components. When the system receives the :donut.system/start signal, the :printer starts to process the data on the :stack ( ns donut.examples.printer ( :require [ donut.system :as system ])) ( def printer-system { ::system/defs { :services { :stack # ::system { :start ( fn [{{ :keys [ items ]} ::system/config }] ( atom ( vec ( range items )))) :stop ( fn [{ ::system/keys [ instance ]}] ( reset! instance [])) :config { :items 10 }}} :app { :printer # ::system { :start ( fn [{{ :keys [ stack ]} ::system/config }] ( doto ( Thread. ( fn [] ( prn \"peek:\" ( peek @ stack )) ( swap! stack pop ) ( Thread/sleep 1000 ) ( recur ))) ( .start ))) :stop ( fn [{ ::system/keys [ instance ]}] ( .interrupt instance )) :config { :stack ( system/ref [ :services :stack ])}}}}}) ;; start the system, let it run for 5 seconsystem, then stop it ( comment ( let [ system-in-flight ( system/signal printer-system ::system/start )] ( Thread/sleep 5000 ) ( system/signal system-in-flight ::system/stop )))","title":"Example project with component lifecycle"},{"location":"clojure-repl/component-lifecycle/#lifecycle-with-cider-refresh","text":"Create a .dir-locals.el file that calls the relevant mount functions when using cider-refresh . Space p e to open a .dirs.locals.el in the current project, creating the file if it does not exist. During development call the reset function to stop components, clean the namespace and start all components again. (( clojure-mode . (( cider-refresh-before-fn . \"practicalli.dev/reset\" )))) Space f s to save the file. Refresh a buffer from the project or open a new file to trigger the reading of the .dir-locals.el configuration by Emacs. Alternatively, if a namespace refresh is not required, configure the .dirs-local.el file to call stop then start . (( clojure-mode . (( cider-refresh-before-fn . \"practicalli.dev/stop\" ) ( cider-refresh-after-fn . \"practicalli.dev/start\" )))) This code calls the stop function from the component lifecycle library at the start of the cider-refresh function. At the end of cider-refresh , the start function is called to restart all the components in the defined order in the project. Prevent cider-ns-refresh calling component lifecycle functions Ctrl + - , e n or Space u - 1 , e n calls cider-ns-refresh but prevents the refresh functions defined in cider-ns-refresh-before-fn and cider-ns-refresh-after-fn from being invoked.","title":"Lifecycle with cider-refresh"},{"location":"clojure-repl/component-lifecycle/#reference","text":"Easily Reloading your Clojure Project in Spacemacs Reloading Woes - Lambda island","title":"Reference"},{"location":"clojure-repl/connect-to-remote-repl/","text":"Connect to Remote REPL \u03bb\ufe0e Using a remote REPL can provide a collaborative coding environment as well as a means for working within remote environments (docker images, cloud servers, etc). Running a remote REPL can also provide longevity to the process, as many clients (editors, ssh terminals) can connect to the REPL over time, disconnecting from the running process without interrupting the process. This provides a very resilient way of running a REPL. practicalli/clojure-deps-edn provides many aliases to configure a REPL to work with other community tools. These aliases are easier to manage when running a REPL outside of an editor which automatically injects its own configuration. This configuration can be installed into the remote environment and ideally added into the server build process. Establish a remote environment \u03bb\ufe0e A small Virtual Private Server (VPS) is enough for a remote Clojure environment. Micro VPS on Google Cloud How to set up a f1-micro VPS on Google Cloud Install Clojure CLI tools and practicalli/clojure-deps-edn configuration Git Client SSH server Set up user account Generate a permissions file, .pem from the server (TODO: how to generate .pem files) Services vCore RAM SSD Transfer Monthly Google Cloud f1-micro VPS Ionos 1 512Mb 10Gb \u00a31 Amazon Lightsail 1 512Mb 20Gb $3.50 Time4VPS 1 x 2.6GHz 2Gb 20Gb 2TB E3.99 Configure local SSH connection \u03bb\ufe0e Save the .pem file to ~/.ssh/ directory (or your preferred location). Edit the ~/.ssh/config file (create the file if needed) and add a host configuration for the remote server. Add the IP address of the remote server to HostName . Use the LocalForward for the port used by the nREPL server. Host remote-clojure-server HostName 99.99.99.99 IdentityFile ~/.ssh/remote-server.pem User ubuntu PasswordAuthentication yes LocalForward 7888 localhost:7888 Port 22 Configure Emacs to listen to nREPL port \u03bb\ufe0e Connect to a Clojure REPL that was started with nREPL and Cider middleware, e.g. :middleware/cider-clj from practicalli/clojure-deps-edn Spacemacs Space f e d to open the Spacemacs configuration and add the following code to the dotspacemacs/user-config section Spacemacs Configuration - dotspacemacs/user-config ( setq nrepl-use-ssh-fallback-for-remote-hosts t ) === Emacs Edit the Emacs init.el file and add the following configuration. ( setq nrepl-use-ssh-fallback-for-remote-hosts t ) Start REPL on remote server \u03bb\ufe0e The majority of Clojure aware editors can connect to an external REPL using the nREPL protocol. Emacs CIDER, VSCode Calva and NeoVim Conjure all use nREPL and the Cider middleware. practicalli/clojure-deps-edn defines the :middleware/clj alias that includes several libraries required for the nREPL connection between CIDER and the REPL. SSH into the remote server. Clone an existing project with Git, or create a new project with :project/new alias Change to a Clojure project Start the REPL using the cider middleware on the same port as defined in LocalForward in the SSH configuration, using the -p to set the port number. Open a terminal in the root directory of a Clojure project and run a non-interactive REPL process clojure -M:middleware/cider-clj -p 7888 The REPL will start along with an nREPL server, showing the connection details. An .nrepl-port file is created in the root of the Clojure project, containing the port number the nREPL server is listening upon. Using a REPL terminal UI For a rich terminal REPL experience, start the REPL with rebel readline as well as nREPL and CIDER libraries. clojure -M:repl/rebel-nrepl Connect via Tramp \u03bb\ufe0e Tramp enables Spacemacs to be used to open remote files as if they were local files, using an SSH connection to the remote server. SPC f f to open a file and enter an ssh address to access the Clojure project files on the remote server /ssh:username@remote-server-name:~/project/deps.edn , ' to call sesman-start and choose cider-connect-clj which should find the remote host and port Confirm the host name, typically localhost when running the REPL locally Confirm the port number the nREPL server is listening too Spacemacs is now connected to the REPL and Clojure code can be evaluated in the source code buffers.","title":"Connect to Remote REPL"},{"location":"clojure-repl/connect-to-remote-repl/#connect-to-remote-repl","text":"Using a remote REPL can provide a collaborative coding environment as well as a means for working within remote environments (docker images, cloud servers, etc). Running a remote REPL can also provide longevity to the process, as many clients (editors, ssh terminals) can connect to the REPL over time, disconnecting from the running process without interrupting the process. This provides a very resilient way of running a REPL. practicalli/clojure-deps-edn provides many aliases to configure a REPL to work with other community tools. These aliases are easier to manage when running a REPL outside of an editor which automatically injects its own configuration. This configuration can be installed into the remote environment and ideally added into the server build process.","title":"Connect to Remote REPL"},{"location":"clojure-repl/connect-to-remote-repl/#establish-a-remote-environment","text":"A small Virtual Private Server (VPS) is enough for a remote Clojure environment. Micro VPS on Google Cloud How to set up a f1-micro VPS on Google Cloud Install Clojure CLI tools and practicalli/clojure-deps-edn configuration Git Client SSH server Set up user account Generate a permissions file, .pem from the server (TODO: how to generate .pem files) Services vCore RAM SSD Transfer Monthly Google Cloud f1-micro VPS Ionos 1 512Mb 10Gb \u00a31 Amazon Lightsail 1 512Mb 20Gb $3.50 Time4VPS 1 x 2.6GHz 2Gb 20Gb 2TB E3.99","title":"Establish a remote environment"},{"location":"clojure-repl/connect-to-remote-repl/#configure-local-ssh-connection","text":"Save the .pem file to ~/.ssh/ directory (or your preferred location). Edit the ~/.ssh/config file (create the file if needed) and add a host configuration for the remote server. Add the IP address of the remote server to HostName . Use the LocalForward for the port used by the nREPL server. Host remote-clojure-server HostName 99.99.99.99 IdentityFile ~/.ssh/remote-server.pem User ubuntu PasswordAuthentication yes LocalForward 7888 localhost:7888 Port 22","title":"Configure local SSH connection"},{"location":"clojure-repl/connect-to-remote-repl/#configure-emacs-to-listen-to-nrepl-port","text":"Connect to a Clojure REPL that was started with nREPL and Cider middleware, e.g. :middleware/cider-clj from practicalli/clojure-deps-edn Spacemacs Space f e d to open the Spacemacs configuration and add the following code to the dotspacemacs/user-config section Spacemacs Configuration - dotspacemacs/user-config ( setq nrepl-use-ssh-fallback-for-remote-hosts t ) === Emacs Edit the Emacs init.el file and add the following configuration. ( setq nrepl-use-ssh-fallback-for-remote-hosts t )","title":"Configure Emacs to listen to nREPL port"},{"location":"clojure-repl/connect-to-remote-repl/#start-repl-on-remote-server","text":"The majority of Clojure aware editors can connect to an external REPL using the nREPL protocol. Emacs CIDER, VSCode Calva and NeoVim Conjure all use nREPL and the Cider middleware. practicalli/clojure-deps-edn defines the :middleware/clj alias that includes several libraries required for the nREPL connection between CIDER and the REPL. SSH into the remote server. Clone an existing project with Git, or create a new project with :project/new alias Change to a Clojure project Start the REPL using the cider middleware on the same port as defined in LocalForward in the SSH configuration, using the -p to set the port number. Open a terminal in the root directory of a Clojure project and run a non-interactive REPL process clojure -M:middleware/cider-clj -p 7888 The REPL will start along with an nREPL server, showing the connection details. An .nrepl-port file is created in the root of the Clojure project, containing the port number the nREPL server is listening upon. Using a REPL terminal UI For a rich terminal REPL experience, start the REPL with rebel readline as well as nREPL and CIDER libraries. clojure -M:repl/rebel-nrepl","title":"Start REPL on remote server"},{"location":"clojure-repl/connect-to-remote-repl/#connect-via-tramp","text":"Tramp enables Spacemacs to be used to open remote files as if they were local files, using an SSH connection to the remote server. SPC f f to open a file and enter an ssh address to access the Clojure project files on the remote server /ssh:username@remote-server-name:~/project/deps.edn , ' to call sesman-start and choose cider-connect-clj which should find the remote host and port Confirm the host name, typically localhost when running the REPL locally Confirm the port number the nREPL server is listening too Spacemacs is now connected to the REPL and Clojure code can be evaluated in the source code buffers.","title":"Connect via Tramp"},{"location":"clojure-repl/connect-to-repl/","text":"Connect to a Clojure REPL \u03bb\ufe0e Starting a REPL in a terminal is the most resilient way of running a REPL, as if the editor has to be restarted or crashes, the REPL is not affected. practicalli/clojure-deps-edn provides many aliases to configure a REPL to work with other community tools (e.g. data ). These aliases are easier to manage when running a REPL outside of an editor which automatically injects its own configuration. Start a REPL in the terminal \u03bb\ufe0e The clojure command and clj wrapper both start a REPL with a basic terminal interface, clj also provides command history. :repl/headless alias from practicalli/clojure-deps-edn provides a rich terminal UI and libraries required for editors to connect via nREPL (network REPL protocol). Open a terminal in the root directory of a Clojure project and run a non-interactive REPL process clojure -M:repl/headless The REPL will start along with an nREPL server, showing the connection details. An .nrepl-port file is created in the root of the Clojure project, containing the port number the nREPL server is listening upon. Headless terminal REPL :repl/headless alias from practicalli/clojure-deps-edn includes libraries required for the nREPL connection between CIDER and the REPL. A headless session is useful for remote REPL processes on other servers or when interaction is only done via the editor. clojure -M:repl/rebel-nrepl Connect to REPL from CIDER \u03bb\ufe0e Space f f to open a file from the Clojure project on the remote server. ssh remote , ' to call sesman-start and choose cider-connect-clj which should find the right host and port Confirm the host name, typically localhost when running the REPL locally Confirm the port number the nREPL server is listening too Spacemacs is now connected to the REPL and Clojure code can be evaluated in the source code buffers. Common REPL start / restart keybindings \u03bb\ufe0e Key bindings Command , ' or , m s start a REPL, selecting the type ( sesman-start ) , m b browse active REPL's ( sesman-browse ) , m i show information about the current REPL ( sesman-info ) , m q r restart the REPL, quit and jack-in. ( sesman-restart ) , m q q quit the REPL ( sesman-quit ) , e n refresh stale code and load new code into the REPL ( cider-ns-refresh ) , e N force reload the current namespaces in the REPL ( cider-ns-reload )","title":"Connect to a Clojure REPL"},{"location":"clojure-repl/connect-to-repl/#connect-to-a-clojure-repl","text":"Starting a REPL in a terminal is the most resilient way of running a REPL, as if the editor has to be restarted or crashes, the REPL is not affected. practicalli/clojure-deps-edn provides many aliases to configure a REPL to work with other community tools (e.g. data ). These aliases are easier to manage when running a REPL outside of an editor which automatically injects its own configuration.","title":"Connect to a Clojure REPL"},{"location":"clojure-repl/connect-to-repl/#start-a-repl-in-the-terminal","text":"The clojure command and clj wrapper both start a REPL with a basic terminal interface, clj also provides command history. :repl/headless alias from practicalli/clojure-deps-edn provides a rich terminal UI and libraries required for editors to connect via nREPL (network REPL protocol). Open a terminal in the root directory of a Clojure project and run a non-interactive REPL process clojure -M:repl/headless The REPL will start along with an nREPL server, showing the connection details. An .nrepl-port file is created in the root of the Clojure project, containing the port number the nREPL server is listening upon. Headless terminal REPL :repl/headless alias from practicalli/clojure-deps-edn includes libraries required for the nREPL connection between CIDER and the REPL. A headless session is useful for remote REPL processes on other servers or when interaction is only done via the editor. clojure -M:repl/rebel-nrepl","title":"Start a REPL in the terminal"},{"location":"clojure-repl/connect-to-repl/#connect-to-repl-from-cider","text":"Space f f to open a file from the Clojure project on the remote server. ssh remote , ' to call sesman-start and choose cider-connect-clj which should find the right host and port Confirm the host name, typically localhost when running the REPL locally Confirm the port number the nREPL server is listening too Spacemacs is now connected to the REPL and Clojure code can be evaluated in the source code buffers.","title":"Connect to REPL from CIDER"},{"location":"clojure-repl/connect-to-repl/#common-repl-start-restart-keybindings","text":"Key bindings Command , ' or , m s start a REPL, selecting the type ( sesman-start ) , m b browse active REPL's ( sesman-browse ) , m i show information about the current REPL ( sesman-info ) , m q r restart the REPL, quit and jack-in. ( sesman-restart ) , m q q quit the REPL ( sesman-quit ) , e n refresh stale code and load new code into the REPL ( cider-ns-refresh ) , e N force reload the current namespaces in the REPL ( cider-ns-reload )","title":"Common REPL start / restart keybindings"},{"location":"clojure-repl/jack-in-to-repl/","text":"Cider Jack-in \u03bb\ufe0e , ' or , m s ( sesman-start ) and select a cider-jack-in command to start a REPL process Cider Jack-in will start a new REPL process and automatically connect to that process from the editor. Jack-in will call either the clojure or lein command to start the REPL process, based on what project configuration files are found ( project.clj for Leiningen and deps.edn for Clojure CLI) in the root of the current project. A prompt is displayed if there are multiple project configuration files to choose from. Jack-in ensures the REPL process is started with the libraries and middleware required by CIDER. Then the rest of the jack-in process is the same as connect, but done so automatically. Jack-in Configuration \u03bb\ufe0e Space u , m s opens the jack-in command in the minibuffer which can be edited to customise how the Clojure REPL process starts, e.g. adding Clojure CLI aliases to include libraries and tools for development. Clojure CLI aliases should be added between the -M execution flag and the :cider/nrepl alias. Deconstructing the command line \u03bb\ufe0e cider-jack-in commands include the dependencies to start a REPL process which the Emacs Cider process can connect to, using nREPL. -Sdeps adds the required library dependencies to start an nREPL server ( nrepl/nrepl ) and connect to that nREPL server from Cider ( cider/cider-nrepl ). :aliases defines the :cider/nrepl alias, defining that the clojure command should run nrepl.commandline/-main to start an nREPL server process, along with the Cider middleware to connect to that nREPL server process Adding aliases \u03bb\ufe0e Aliases can be used from the project deps.edn file or the user deps.edn file, e.g practicalli/clojure-deps-edn :extra-paths and :extra-deps configuration in aliases is used by the Cider jack-in command line. :main-opts entries in aliases are ignored when :cider/nrepl is kept as last alias in the chain. No aliases after :cider/nrepl Placing aliases after :cider/nrepl will prevent cider-jack-in working correctly (or at all), unless the last alias in the chain also includes the same libraries and configuration as the :cider/nrepl alias .dir-locals.el to configure REPL startup \u03bb\ufe0e Cider variables can be used to customize the REPL startup via a .dir-locals.el file in the root of the Clojure project. SPC p e creates or opens a .dir-locals.el file in the root of the project. A helm prompt also allows for adding entries into the file. Add the :env/test alias to cider-clojure-cli-aliases and the paths and libraries defined aliases will always be included when running a REPL from Spacemacs (( clojure-mode . (( cider-clojure-cli-aliases . \":env/test\" )))) Add Alias names only Execution flags, -M , -P , -T , -X , -A are automatically removed from the cider-clojure-cli-aliases value by the Cider jack-in code. The previously used variable cider-clojure-cli-global-options is deprecated and may cause issues with cider-jack-in that prevent the REPL from starting. Custom user namespace for more REPL customisation A user namespace allows for further customisation of the REPL startup Multiple project configuration files \u03bb\ufe0e If both a project.clj file and a deps.edn file exist in the root of a project, Cider jack-in will prompt for the command to use Use a .dir-locals.el file to set the command that Cider jack-in will use each time Clojure CLI Leiningen ((clojure-mode (cider-preferred-build-tool . lein))) ((clojure-mode (cider-preferred-build-tool . clojure-cli))) Common REPL start / restart keybindings \u03bb\ufe0e Key bindings Command , ' or , m s start a REPL, selecting the type ( sesman-start ) , m b browse active REPL's ( sesman-browse ) , m i show information about the current REPL ( sesman-info ) , m q r restart the REPL, quit and jack-in. ( sesman-restart ) , m q q quit the REPL ( sesman-quit ) , m n refresh stale code and load new code into the REPL ( cider-ns-refresh ) , m N force reload the current namespaces in the REPL ( cider-ns-reload )","title":"Cider Jack-in"},{"location":"clojure-repl/jack-in-to-repl/#cider-jack-in","text":", ' or , m s ( sesman-start ) and select a cider-jack-in command to start a REPL process Cider Jack-in will start a new REPL process and automatically connect to that process from the editor. Jack-in will call either the clojure or lein command to start the REPL process, based on what project configuration files are found ( project.clj for Leiningen and deps.edn for Clojure CLI) in the root of the current project. A prompt is displayed if there are multiple project configuration files to choose from. Jack-in ensures the REPL process is started with the libraries and middleware required by CIDER. Then the rest of the jack-in process is the same as connect, but done so automatically.","title":"Cider Jack-in"},{"location":"clojure-repl/jack-in-to-repl/#jack-in-configuration","text":"Space u , m s opens the jack-in command in the minibuffer which can be edited to customise how the Clojure REPL process starts, e.g. adding Clojure CLI aliases to include libraries and tools for development. Clojure CLI aliases should be added between the -M execution flag and the :cider/nrepl alias.","title":"Jack-in Configuration"},{"location":"clojure-repl/jack-in-to-repl/#deconstructing-the-command-line","text":"cider-jack-in commands include the dependencies to start a REPL process which the Emacs Cider process can connect to, using nREPL. -Sdeps adds the required library dependencies to start an nREPL server ( nrepl/nrepl ) and connect to that nREPL server from Cider ( cider/cider-nrepl ). :aliases defines the :cider/nrepl alias, defining that the clojure command should run nrepl.commandline/-main to start an nREPL server process, along with the Cider middleware to connect to that nREPL server process","title":"Deconstructing the command line"},{"location":"clojure-repl/jack-in-to-repl/#adding-aliases","text":"Aliases can be used from the project deps.edn file or the user deps.edn file, e.g practicalli/clojure-deps-edn :extra-paths and :extra-deps configuration in aliases is used by the Cider jack-in command line. :main-opts entries in aliases are ignored when :cider/nrepl is kept as last alias in the chain. No aliases after :cider/nrepl Placing aliases after :cider/nrepl will prevent cider-jack-in working correctly (or at all), unless the last alias in the chain also includes the same libraries and configuration as the :cider/nrepl alias","title":"Adding aliases"},{"location":"clojure-repl/jack-in-to-repl/#dir-localsel-to-configure-repl-startup","text":"Cider variables can be used to customize the REPL startup via a .dir-locals.el file in the root of the Clojure project. SPC p e creates or opens a .dir-locals.el file in the root of the project. A helm prompt also allows for adding entries into the file. Add the :env/test alias to cider-clojure-cli-aliases and the paths and libraries defined aliases will always be included when running a REPL from Spacemacs (( clojure-mode . (( cider-clojure-cli-aliases . \":env/test\" )))) Add Alias names only Execution flags, -M , -P , -T , -X , -A are automatically removed from the cider-clojure-cli-aliases value by the Cider jack-in code. The previously used variable cider-clojure-cli-global-options is deprecated and may cause issues with cider-jack-in that prevent the REPL from starting. Custom user namespace for more REPL customisation A user namespace allows for further customisation of the REPL startup","title":".dir-locals.el to configure REPL startup"},{"location":"clojure-repl/jack-in-to-repl/#multiple-project-configuration-files","text":"If both a project.clj file and a deps.edn file exist in the root of a project, Cider jack-in will prompt for the command to use Use a .dir-locals.el file to set the command that Cider jack-in will use each time Clojure CLI Leiningen ((clojure-mode (cider-preferred-build-tool . lein))) ((clojure-mode (cider-preferred-build-tool . clojure-cli)))","title":"Multiple project configuration files"},{"location":"clojure-repl/jack-in-to-repl/#common-repl-start-restart-keybindings","text":"Key bindings Command , ' or , m s start a REPL, selecting the type ( sesman-start ) , m b browse active REPL's ( sesman-browse ) , m i show information about the current REPL ( sesman-info ) , m q r restart the REPL, quit and jack-in. ( sesman-restart ) , m q q quit the REPL ( sesman-quit ) , m n refresh stale code and load new code into the REPL ( cider-ns-refresh ) , m N force reload the current namespaces in the REPL ( cider-ns-reload )","title":"Common REPL start / restart keybindings"},{"location":"clojure-repl/portal-data-visualization/","text":"Starting a REPL with Portal data inspector \u03bb\ufe0e Portal is a web browser data inspector that can be configured as the tap> source for a project. Any expression surrounded by (tap> ,,,) has its evaluated result sent to Portal. Portal navigates data in the form of edn, json and transit (with vega graphic support coming soon) Practicalli Clojure -data browsers section - portal Portal is simple to add to a REPL as it only requires the Portal library to be added as a dependency. practicalli/clojure-deps-edn includes several aliases for portal, depending on the type of Clojure project used. Command Description clojure -M:inspect/portal-cli Clojure REPL with Portal dependency clojure -M:inspect/portal-web ClojureScript web browser REPL with Portal dependency clojure -M:inspect/portal-node ClojureScript node.js REPL with Portal dependency Using Portal \u03bb\ufe0e (require '[portal.api :as portal]) once the REPL starts. For inspect/portal-web use (require '[portal.web :as portal]) instead (portal/open) to open the web based inspector window in a browser. (portal/tap) to add portal as a tap target (add-tap) (tap> {:accounts [{:name \"jen\" :email \"jen@jen.com\"} {:name \"sara\" :email \"sara@sara.com\"}]}) to send data to the portal inspector window (or any other data you wish to send) (portal/clear) to clear all values from the portal inspector window. (portal/close) to close the inspector window. Rich comment for Portal \u03bb\ufe0e Add a (comment ,,,) form in the source code file to start and control Portal Rich comment ( require ' [ portal.api :as portal ]) ; Require portal namespace ( inspect/open { :portal.colors/theme :portal.colors/solarized-dark }) ; (1) Open with theme ( inspect/clear ) ; Clear all values in the portal inspector window ( inspect/close ) ; Close the portal window 1. Solarized Light is an alternative light theme for portal ( inspect/open { :portal.colors/theme :portal.colors/solarized-light }) Automatically start Portal \u03bb\ufe0e user is the default namespace when a Clojure REPL starts. If there is a user.clj file on the classpath, the code it contains is automatically loaded once the REPL has started. Create a user namespace in the file dev/user.clj . Require the portal library in the namespace definition, using the alias inspect . Call the inspect/open function to launch Portal in a browser tab. Call inspect/tap to add portal as the tap> source for the project (there can only be one tap> source) dev/user.clj ( ns user ( :require [ portal.api :as inspect ])) ;; Start Portal ;; Open a portal inspector window using default theme ( inspect/open { :portal.colors/theme :portal.colors/solarized-light }) ;; Add portal as a tap> target ( inspect/tap ) The :env/dev alias from practicalli/clojure-deps-edn adds dev directory to the classpath, so the user namespace in dev/user.clj is loaded when starting the REPL. clojure -M:env/dev:repl/rebel","title":"Portal data visualization"},{"location":"clojure-repl/portal-data-visualization/#starting-a-repl-with-portal-data-inspector","text":"Portal is a web browser data inspector that can be configured as the tap> source for a project. Any expression surrounded by (tap> ,,,) has its evaluated result sent to Portal. Portal navigates data in the form of edn, json and transit (with vega graphic support coming soon) Practicalli Clojure -data browsers section - portal Portal is simple to add to a REPL as it only requires the Portal library to be added as a dependency. practicalli/clojure-deps-edn includes several aliases for portal, depending on the type of Clojure project used. Command Description clojure -M:inspect/portal-cli Clojure REPL with Portal dependency clojure -M:inspect/portal-web ClojureScript web browser REPL with Portal dependency clojure -M:inspect/portal-node ClojureScript node.js REPL with Portal dependency","title":"Starting a REPL with Portal data inspector"},{"location":"clojure-repl/portal-data-visualization/#using-portal","text":"(require '[portal.api :as portal]) once the REPL starts. For inspect/portal-web use (require '[portal.web :as portal]) instead (portal/open) to open the web based inspector window in a browser. (portal/tap) to add portal as a tap target (add-tap) (tap> {:accounts [{:name \"jen\" :email \"jen@jen.com\"} {:name \"sara\" :email \"sara@sara.com\"}]}) to send data to the portal inspector window (or any other data you wish to send) (portal/clear) to clear all values from the portal inspector window. (portal/close) to close the inspector window.","title":"Using Portal"},{"location":"clojure-repl/portal-data-visualization/#rich-comment-for-portal","text":"Add a (comment ,,,) form in the source code file to start and control Portal Rich comment ( require ' [ portal.api :as portal ]) ; Require portal namespace ( inspect/open { :portal.colors/theme :portal.colors/solarized-dark }) ; (1) Open with theme ( inspect/clear ) ; Clear all values in the portal inspector window ( inspect/close ) ; Close the portal window 1. Solarized Light is an alternative light theme for portal ( inspect/open { :portal.colors/theme :portal.colors/solarized-light })","title":"Rich comment for Portal"},{"location":"clojure-repl/portal-data-visualization/#automatically-start-portal","text":"user is the default namespace when a Clojure REPL starts. If there is a user.clj file on the classpath, the code it contains is automatically loaded once the REPL has started. Create a user namespace in the file dev/user.clj . Require the portal library in the namespace definition, using the alias inspect . Call the inspect/open function to launch Portal in a browser tab. Call inspect/tap to add portal as the tap> source for the project (there can only be one tap> source) dev/user.clj ( ns user ( :require [ portal.api :as inspect ])) ;; Start Portal ;; Open a portal inspector window using default theme ( inspect/open { :portal.colors/theme :portal.colors/solarized-light }) ;; Add portal as a tap> target ( inspect/tap ) The :env/dev alias from practicalli/clojure-deps-edn adds dev directory to the classpath, so the user namespace in dev/user.clj is loaded when starting the REPL. clojure -M:env/dev:repl/rebel","title":"Automatically start Portal"},{"location":"clojure-repl/refresh-restart-repl/","text":"Refresh or Restart the REPL \u03bb\ufe0e A REPL can be kept open for days or weeks for the same project, especially the vars in the REPL are kept clean by [un-defining a var, , e u , before changing its name]( undefine (e.g. def , defn , deftest , etc.). Code that changes within a var can be refreshed by [evaluating the var expression]( undefine again. Projects may use Component lifecycle libraries such as mount, integrant or component, to provide ways to start and stop the major components of an application without restarting the REPL. Occasionally you want to start from scratch and remove all of the evaluated code from the REPL. This is usually a good idea where major refactoring has taken place or before deployment to test and production environments. Restarting the REPL \u03bb\ufe0e , m q r calls the sesman-restart which kills the current REPL and starts a new REPL, establishing a connection to that REPL from Cider. It is the same as doing , s q q ( cider-quit ) followed by , ' ( cider-jack-in-* ). Hint::Restart the REPL when adding library dependencies \u03bb\ufe0e Use , m q r to restart the REPL to make newly added libraries available to the project. , s q r ( cider-restart ) only restarts the Cider connection to the running REPL process and does not affect the REPL itself. There seems little value in this command. Refreshing the contents of the REPL \u03bb\ufe0e You can remove all the stale vars (def and defn expressions that are no longer in the source code) from the REPL without having to restart , e n calls cider-ns-refresh which reloads any modified and unloaded namespaces on the classpath. cider-ns-refresh uses clojure.tools.namespace.repl which will load and reload code based on the namespace dependency graph. Existing definitions that have not changed will be kept, so any state managed in this way will be kept. SPC u , e n will unconditionally refresh all namespaces, refreshing all the code in the project. SPC u SPC u , e n clears the state of the namespace tracker before reloading, if for example circular dependencies are preventing successful reload. Hint::Hooking into component lifecycle libraries \u03bb\ufe0e cider-ns-refresh can call component lifecycle functions to stop and start services as part of the refresh process. Force reload namespace approach \u03bb\ufe0e If there are issues using cider-ns-refresh then use a unconditional reloading of the namespace. , e N calls cider-ns-reload which reloads the namespace of the current source code buffer. This is the same as evaluating (require 'namespace.name :reload) in the REPL. SPC u , e N prompts for a namespace name to reload a different namespace than that of the current buffer. Issues with Clojure reload \u03bb\ufe0e When modifying two namespaces that depend on each other, the namespaces must be reload in the correct order to avoid compilation errors. Removing definitions from a source file does not remove those stale definitions from a running REPL. Code that uses those stale definitions will continue to work, but will break the next time you restart the REPL. A reloaded namespace containing defmulti must reload all of the associated defmethod expressions. A reloaded namespace containing defprotocol must reload any records or types implementing that protocol, replacing any existing instances of those records/types with new instances. All namespaces that use a macro in a reloaded namespace must be reloaded. For functions that close over values in a reloaded namespace, those values are not updated (e.g. web applications which construct the \"handler stack\" as a composition of functions.) References \u03bb\ufe0e Hard CIDER: Hard Restart Reloading Woes - Lambda island clojure.tools.namespace.repl - cljdoc.org","title":"Refresh or Restart the REPL"},{"location":"clojure-repl/refresh-restart-repl/#refresh-or-restart-the-repl","text":"A REPL can be kept open for days or weeks for the same project, especially the vars in the REPL are kept clean by [un-defining a var, , e u , before changing its name]( undefine (e.g. def , defn , deftest , etc.). Code that changes within a var can be refreshed by [evaluating the var expression]( undefine again. Projects may use Component lifecycle libraries such as mount, integrant or component, to provide ways to start and stop the major components of an application without restarting the REPL. Occasionally you want to start from scratch and remove all of the evaluated code from the REPL. This is usually a good idea where major refactoring has taken place or before deployment to test and production environments.","title":"Refresh or Restart the REPL"},{"location":"clojure-repl/refresh-restart-repl/#restarting-the-repl","text":", m q r calls the sesman-restart which kills the current REPL and starts a new REPL, establishing a connection to that REPL from Cider. It is the same as doing , s q q ( cider-quit ) followed by , ' ( cider-jack-in-* ).","title":"Restarting the REPL"},{"location":"clojure-repl/refresh-restart-repl/#hintrestart-the-repl-when-adding-library-dependencies","text":"Use , m q r to restart the REPL to make newly added libraries available to the project. , s q r ( cider-restart ) only restarts the Cider connection to the running REPL process and does not affect the REPL itself. There seems little value in this command.","title":"Hint::Restart the REPL when adding library dependencies"},{"location":"clojure-repl/refresh-restart-repl/#refreshing-the-contents-of-the-repl","text":"You can remove all the stale vars (def and defn expressions that are no longer in the source code) from the REPL without having to restart , e n calls cider-ns-refresh which reloads any modified and unloaded namespaces on the classpath. cider-ns-refresh uses clojure.tools.namespace.repl which will load and reload code based on the namespace dependency graph. Existing definitions that have not changed will be kept, so any state managed in this way will be kept. SPC u , e n will unconditionally refresh all namespaces, refreshing all the code in the project. SPC u SPC u , e n clears the state of the namespace tracker before reloading, if for example circular dependencies are preventing successful reload.","title":"Refreshing the contents of the REPL"},{"location":"clojure-repl/refresh-restart-repl/#hinthooking-into-component-lifecycle-libraries","text":"cider-ns-refresh can call component lifecycle functions to stop and start services as part of the refresh process.","title":"Hint::Hooking into component lifecycle libraries"},{"location":"clojure-repl/refresh-restart-repl/#force-reload-namespace-approach","text":"If there are issues using cider-ns-refresh then use a unconditional reloading of the namespace. , e N calls cider-ns-reload which reloads the namespace of the current source code buffer. This is the same as evaluating (require 'namespace.name :reload) in the REPL. SPC u , e N prompts for a namespace name to reload a different namespace than that of the current buffer.","title":"Force reload namespace approach"},{"location":"clojure-repl/refresh-restart-repl/#issues-with-clojure-reload","text":"When modifying two namespaces that depend on each other, the namespaces must be reload in the correct order to avoid compilation errors. Removing definitions from a source file does not remove those stale definitions from a running REPL. Code that uses those stale definitions will continue to work, but will break the next time you restart the REPL. A reloaded namespace containing defmulti must reload all of the associated defmethod expressions. A reloaded namespace containing defprotocol must reload any records or types implementing that protocol, replacing any existing instances of those records/types with new instances. All namespaces that use a macro in a reloaded namespace must be reloaded. For functions that close over values in a reloaded namespace, those values are not updated (e.g. web applications which construct the \"handler stack\" as a composition of functions.)","title":"Issues with Clojure reload"},{"location":"clojure-repl/refresh-restart-repl/#references","text":"Hard CIDER: Hard Restart Reloading Woes - Lambda island clojure.tools.namespace.repl - cljdoc.org","title":"References"},{"location":"clojure-repl/reveal-data-visualization/","text":"Reveal data inspector and visualization tool \u03bb\ufe0e Reveal listens to each expression evaluated in the REPL and pushes the results to a visual UI. Reveal allows inspection of the REPL results, visualisation data using VegaLite graphics, sql browser and many more features . Reveal can also be used as a tap> source to proved more powerful manual debugging workflow from any Clojure REPL. Practicalli Clojure - data browsers section has more details on using reveal with other editors and Rebel readline rich terminal UI. {% tabs practicalli=\"practicalli/clojure-deps-edn\", manual=\"Manually add Alias\" %} {% content \"practicalli\" %} practicalli/clojure-deps-edn contains a range of aliases to run Reveal with different themes, nREPL support for Clojure editors and with Rebel Readline terminal UI. :inspect/reveal-cider - Reveal with headless REPL, starting nREPL server for Clojure aware editors :inspec/reveal-light-cider - as above with light theme and 32 point Ubuntu Mono font {% content \"manual\" %} Define aliases either in the project deps.edn file or the user level deps.edn file. Run Reveal with a REPL that also starts an nREPL server, supporting a connection from Clojure aware editors ;; Reveal REPL with nrepl server and Emacs CIDER specific middleware :inspect/reveal-cider { :extra-deps { vlaaad/reveal { :mvn/version \"1.3.265\" } nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" } refactor-nrepl/refactor-nrepl { :mvn/version \"3.1.0\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\" ]} ;; Light version of :inspect/reveal-cider :inspect/reveal-light-cider { :extra-deps { vlaaad/reveal { :mvn/version \"1.3.265\" } nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" } refactor-nrepl/refactor-nrepl { :mvn/version \"3.1.0\" }} :jvm-opts [ \"-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\\\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\\\",:font-size,32}\" ] :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\" ]} {% endtabs %} Run Reveal with a simple terminal REPL using the :inspect/reveal alias, or :inspect/reveal-light with a light theme and a 32 point Ubuntu Mono font. clojure -X:inspect/reveal Run Reveal and start an nREPL server that allows Clojure aware editors to connect. In Spacemacs , ' calls sesman-start and selecting cider-connnect-clj will connect the the nREPL server started by the alias. clojure -X:inspect/reveal-nrepl Run Reveal REPL with nREPL server for cider-connect \u03bb\ufe0e The Reveal REPL can be connected to with with nREPL, socket or prepl connection and use from any Clojure aware editor . :inspect/reveal-nrepl runs reveal with an nREPL server and the cider-nrepl middleware, providing a connection for Clojure editors to connect to the REPL (CIDER, Calva, Conjure, Cursive, etc.) Cider jack-in and reveal \u03bb\ufe0e See the Reveal section of Practicalli Clojure for full details, including how to set up a .dir-locals.el configuration. :inspect/reveal-cider alias contains Reveal REPL with nrepl server and Emacs CIDER specific middleware C-u cider-jack-in-clj in CIDER to start a reveal REPL ( SPC u , ' in Spacemacs) Edit the jack-in command by deleting the all the configuration after the clojure command and add the alias clojure -M:inspect/reveal-cider Configure theme & font \u03bb\ufe0e Add a custom theme and font via the -J command line option or create an alias using :inspect/reveal-light-cider as an example. clojure -M:inspect/reveal -J-Dvlaaad.reveal.prefs = '{:theme :light :font-family \"Ubuntu Mono\" :font-size 32}'","title":"Reveal data inspector and visualization tool"},{"location":"clojure-repl/reveal-data-visualization/#reveal-data-inspector-and-visualization-tool","text":"Reveal listens to each expression evaluated in the REPL and pushes the results to a visual UI. Reveal allows inspection of the REPL results, visualisation data using VegaLite graphics, sql browser and many more features . Reveal can also be used as a tap> source to proved more powerful manual debugging workflow from any Clojure REPL. Practicalli Clojure - data browsers section has more details on using reveal with other editors and Rebel readline rich terminal UI. {% tabs practicalli=\"practicalli/clojure-deps-edn\", manual=\"Manually add Alias\" %} {% content \"practicalli\" %} practicalli/clojure-deps-edn contains a range of aliases to run Reveal with different themes, nREPL support for Clojure editors and with Rebel Readline terminal UI. :inspect/reveal-cider - Reveal with headless REPL, starting nREPL server for Clojure aware editors :inspec/reveal-light-cider - as above with light theme and 32 point Ubuntu Mono font {% content \"manual\" %} Define aliases either in the project deps.edn file or the user level deps.edn file. Run Reveal with a REPL that also starts an nREPL server, supporting a connection from Clojure aware editors ;; Reveal REPL with nrepl server and Emacs CIDER specific middleware :inspect/reveal-cider { :extra-deps { vlaaad/reveal { :mvn/version \"1.3.265\" } nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" } refactor-nrepl/refactor-nrepl { :mvn/version \"3.1.0\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\" ]} ;; Light version of :inspect/reveal-cider :inspect/reveal-light-cider { :extra-deps { vlaaad/reveal { :mvn/version \"1.3.265\" } nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" } refactor-nrepl/refactor-nrepl { :mvn/version \"3.1.0\" }} :jvm-opts [ \"-Dvlaaad.reveal.prefs={:theme,:light,:font-family,\\\"https://ff.static.1001fonts.net/u/b/ubuntu.mono.ttf\\\",:font-size,32}\" ] :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[vlaaad.reveal.nrepl/middleware,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\" ]} {% endtabs %} Run Reveal with a simple terminal REPL using the :inspect/reveal alias, or :inspect/reveal-light with a light theme and a 32 point Ubuntu Mono font. clojure -X:inspect/reveal Run Reveal and start an nREPL server that allows Clojure aware editors to connect. In Spacemacs , ' calls sesman-start and selecting cider-connnect-clj will connect the the nREPL server started by the alias. clojure -X:inspect/reveal-nrepl","title":"Reveal data inspector and visualization tool"},{"location":"clojure-repl/reveal-data-visualization/#run-reveal-repl-with-nrepl-server-for-cider-connect","text":"The Reveal REPL can be connected to with with nREPL, socket or prepl connection and use from any Clojure aware editor . :inspect/reveal-nrepl runs reveal with an nREPL server and the cider-nrepl middleware, providing a connection for Clojure editors to connect to the REPL (CIDER, Calva, Conjure, Cursive, etc.)","title":"Run Reveal REPL with nREPL server for cider-connect"},{"location":"clojure-repl/reveal-data-visualization/#cider-jack-in-and-reveal","text":"See the Reveal section of Practicalli Clojure for full details, including how to set up a .dir-locals.el configuration. :inspect/reveal-cider alias contains Reveal REPL with nrepl server and Emacs CIDER specific middleware C-u cider-jack-in-clj in CIDER to start a reveal REPL ( SPC u , ' in Spacemacs) Edit the jack-in command by deleting the all the configuration after the clojure command and add the alias clojure -M:inspect/reveal-cider","title":"Cider jack-in and reveal"},{"location":"clojure-repl/reveal-data-visualization/#configure-theme-font","text":"Add a custom theme and font via the -J command line option or create an alias using :inspect/reveal-light-cider as an example. clojure -M:inspect/reveal -J-Dvlaaad.reveal.prefs = '{:theme :light :font-family \"Ubuntu Mono\" :font-size 32}'","title":"Configure theme &amp; font"},{"location":"clojurescript/","text":"Clojurescript Overview \u03bb\ufe0e","title":"Clojurescript Overview"},{"location":"clojurescript/#clojurescript-overview","text":"","title":"Clojurescript Overview"},{"location":"clojurescript/additional-features/","text":"Additional Features \u03bb\ufe0e","title":"Additional Features"},{"location":"clojurescript/additional-features/#additional-features","text":"","title":"Additional Features"},{"location":"clojurescript/build-process/","text":"Build Process \u03bb\ufe0e","title":"Build Process"},{"location":"clojurescript/build-process/#build-process","text":"","title":"Build Process"},{"location":"clojurescript/css-rainbow-colors/","text":"Rainbow Colors for CSS highlighting \u03bb\ufe0e When editing a CSS file, any values used for colours can be shown on a background colour that the colour code represents. Toggle the rainbow color mode using the following command M-x rainbow-mode This function is contained in the package rainbow-mode.el","title":"Rainbow Colors for CSS highlighting"},{"location":"clojurescript/css-rainbow-colors/#rainbow-colors-for-css-highlighting","text":"When editing a CSS file, any values used for colours can be shown on a background colour that the colour code represents. Toggle the rainbow color mode using the following command M-x rainbow-mode This function is contained in the package rainbow-mode.el","title":"Rainbow Colors for CSS highlighting"},{"location":"clojurescript/why-clojurescript/","text":"Why Clojurescript \u03bb\ufe0e","title":"Why Clojurescript"},{"location":"clojurescript/why-clojurescript/#why-clojurescript","text":"","title":"Why Clojurescript"},{"location":"database-access/","text":"Database Access from Emacs \u03bb\ufe0e Add the Spacemacs SQL layer to use Emacs as an SQL database client, defining connections to access databases and running SQL queries. sqls language server (LSP) as an SQL layer backend provides autocompletion, code actions, documentation and formatting. sqlint (linting) and sqlfmt (formatting) are also supported when installed. Syntax highlighting for SQL queries supports the dialects of ANSI, DB2, Informix, Ingres, Interbase, Linter, Microsoft, MySQL, Oracle, Postgres, Solid, SQLite, Sybase, Vertica. SQLi is integrated in Emacs and supports these databases if their client executable is available on the Emacs PATH Connection configuration can be defined for a specific database, e.g. sql-mysql-login-params . Multiple database connections are defined using the sql-connection-alist variable. Add connection configuration to the dotspacemacs/user-config to the Spacemacs configuration file ( SPC f e d ) SPC h SPC sql-help Hint::Add Database Configuration to dotspacemacs/user-config \u03bb\ufe0e All database configuration and helper functions should be added to the dotspacemacs/user-config section of the Spacemacs configuration file, opened with SPC f e d Resources \u03bb\ufe0e MySQL installation guide documents many options for installing MySQL","title":"Database Access from Emacs"},{"location":"database-access/#database-access-from-emacs","text":"Add the Spacemacs SQL layer to use Emacs as an SQL database client, defining connections to access databases and running SQL queries. sqls language server (LSP) as an SQL layer backend provides autocompletion, code actions, documentation and formatting. sqlint (linting) and sqlfmt (formatting) are also supported when installed. Syntax highlighting for SQL queries supports the dialects of ANSI, DB2, Informix, Ingres, Interbase, Linter, Microsoft, MySQL, Oracle, Postgres, Solid, SQLite, Sybase, Vertica. SQLi is integrated in Emacs and supports these databases if their client executable is available on the Emacs PATH Connection configuration can be defined for a specific database, e.g. sql-mysql-login-params . Multiple database connections are defined using the sql-connection-alist variable. Add connection configuration to the dotspacemacs/user-config to the Spacemacs configuration file ( SPC f e d ) SPC h SPC sql-help","title":"Database Access from Emacs"},{"location":"database-access/#hintadd-database-configuration-to-dotspacemacsuser-config","text":"All database configuration and helper functions should be added to the dotspacemacs/user-config section of the Spacemacs configuration file, opened with SPC f e d","title":"Hint::Add Database Configuration to dotspacemacs/user-config"},{"location":"database-access/#resources","text":"MySQL installation guide documents many options for installing MySQL","title":"Resources"},{"location":"database-access/add-sql-layer-and-lsp/","text":"Add SQL Layer and LSP support \u03bb\ufe0e SPC f e d to open the Spacemacs configuration. Add the sql layer to the dotspacemacs-configuration-layers list. When lsp layer is used then LSP is set as the backend for all layers and will connect to an SQL LSP server when opening a related SQL buffer. Or manually set LSP as the backend using a layer variable (if lsp has not been added to the Spacemacs configuration) (sql :variables sql-backend 'lsp) Install SQL LSP Server \u03bb\ufe0e sqls provides the LSP server implementation for the SQL layer. Install the latest sqls release for the Operating System in use. Linux install: download the Linux release, extract the archive and move the sqls binary file to ~/.local/bin sqls -help or sqls -version in a terminal confirms the binary is working. Adding database connections via LSP \u03bb\ufe0e sql-lsp-sqls-workspace-config-path as an SQL layer variable defines the location of database connections in JSON format (sql :variables sql-lsp-sqls-workspace-config-path 'workspace) workspace : Emacs workspace directory, XDG location ~/.config/emacs/workspace/ or ~/emacs.d/workspace/ root : top level of current project Database configuration for SQL LSP \u03bb\ufe0e Example database connection in JSON. { \"sqls\" : { \"connections\" : [ { \"driver\" : \"mysql\" , \"dataSourceName\" : \"user1:password1@tcp(localhost:3306)/sample_db\" } ] } } With sql-lsp-sqls-workspace-config-path set as workspace the configuration should be saved to the Emacs workspace directory, e.g. ~/.config/emacs/workspace/practicalli-database-connections.json WARNING::Avoid saving plain-text passwords in projects \u03bb\ufe0e Saving plain-text passwords in configuration files is a security risk. Passwords should definitely not be checked into a code sharing service (GitLab, GitHub, etc). Using the workspace option minimises the risk of adding passwords to a shared code service as it is not part of any source code projects, although it still presents some risk if security of the Operating System is breached. Hint::Add database connections securely via Elisp \u03bb\ufe0e Connections can be defined in Elisp and added to the dotspacemacs/user-config section of the Spamcemacs configuration file, optionally using a PGP encrypted password for greater security.","title":"Add SQL Layer and LSP support"},{"location":"database-access/add-sql-layer-and-lsp/#add-sql-layer-and-lsp-support","text":"SPC f e d to open the Spacemacs configuration. Add the sql layer to the dotspacemacs-configuration-layers list. When lsp layer is used then LSP is set as the backend for all layers and will connect to an SQL LSP server when opening a related SQL buffer. Or manually set LSP as the backend using a layer variable (if lsp has not been added to the Spacemacs configuration) (sql :variables sql-backend 'lsp)","title":"Add SQL Layer and LSP support"},{"location":"database-access/add-sql-layer-and-lsp/#install-sql-lsp-server","text":"sqls provides the LSP server implementation for the SQL layer. Install the latest sqls release for the Operating System in use. Linux install: download the Linux release, extract the archive and move the sqls binary file to ~/.local/bin sqls -help or sqls -version in a terminal confirms the binary is working.","title":"Install SQL LSP Server"},{"location":"database-access/add-sql-layer-and-lsp/#adding-database-connections-via-lsp","text":"sql-lsp-sqls-workspace-config-path as an SQL layer variable defines the location of database connections in JSON format (sql :variables sql-lsp-sqls-workspace-config-path 'workspace) workspace : Emacs workspace directory, XDG location ~/.config/emacs/workspace/ or ~/emacs.d/workspace/ root : top level of current project","title":"Adding database connections via LSP"},{"location":"database-access/add-sql-layer-and-lsp/#database-configuration-for-sql-lsp","text":"Example database connection in JSON. { \"sqls\" : { \"connections\" : [ { \"driver\" : \"mysql\" , \"dataSourceName\" : \"user1:password1@tcp(localhost:3306)/sample_db\" } ] } } With sql-lsp-sqls-workspace-config-path set as workspace the configuration should be saved to the Emacs workspace directory, e.g. ~/.config/emacs/workspace/practicalli-database-connections.json","title":"Database configuration for SQL LSP"},{"location":"database-access/add-sql-layer-and-lsp/#warningavoid-saving-plain-text-passwords-in-projects","text":"Saving plain-text passwords in configuration files is a security risk. Passwords should definitely not be checked into a code sharing service (GitLab, GitHub, etc). Using the workspace option minimises the risk of adding passwords to a shared code service as it is not part of any source code projects, although it still presents some risk if security of the Operating System is breached.","title":"WARNING::Avoid saving plain-text passwords in projects"},{"location":"database-access/add-sql-layer-and-lsp/#hintadd-database-connections-securely-via-elisp","text":"Connections can be defined in Elisp and added to the dotspacemacs/user-config section of the Spamcemacs configuration file, optionally using a PGP encrypted password for greater security.","title":"Hint::Add database connections securely via Elisp"},{"location":"database-access/connection-configuration/","text":"Configure connections \u03bb\ufe0e Commonly used databases are easier to work with when their connection details are defined in the Emacs configuration. Connection configuration should be added to the dotspacemacs/user-config section of the Spacemacs configuration file ( SPC f e d ) A single connection \u03bb\ufe0e Set the sql-postgres-login-params variable to define a single PostgreSQL connection. There are similar variables for each type of database. ( setq sql-postgres-login-params ' (( user :default \"username\" ) ( database :default \"database-name\" ) ( server :default \"localhost\" ) ( port :default 5432 ))) , e e to evaluate with the cursor after the closing paren of the setq expression Multiple database connections \u03bb\ufe0e ( setq sql-connection-alist ' (( game-scores ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"localhost\" ) ( sql-user \"username\" ) ( sql-password \"secret\" ) ( sql-database \"game-scores\" )) ( customer-accounts ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"123.ec2.aws.com\" ) ( sql-user \"username\" ) ( sql-password \"secret\" ) ( sql-database \"\" )))) Use an Encrypted password when connecting to databases containing sensitive data or leave out the password from the connection configuration and Emacs will prompt A password if okay if using a local database, or connecting to a database via a read-only account where the database contains only non-sensitive data Connection helper functions \u03bb\ufe0e ( defun practicalli/db-connect-sql-server ( product connection ) ;; remember to set the sql-product, otherwise, it will fail for the first time ;; you call the function ( setq sql-product product ) ( sql-connect connection )) Define interactive functions that call a specific server, so they can be called without providing arguments and therefore be bound to keys very easily. ( defun practicalli/db-connect-sql-game-scores () ( interactive ) ( practicalli/db-connect-sql-server 'postgres 'game-scores )) ( defun practicalli/db-connect-sql-cutomer-accounts () ( interactive ) ( practicalli/db-connect-sql-server 'postgres 'customer-accounts )) Define key bindings to call the db connections, e.g. SPC o d g for game server and SPC o d c for customer accounts ( spacemacs/set-leader-keys \"odg\" 'practicalli/db-connect-sql-game-scores ) ( spacemacs/set-leader-keys \"odc\" 'practicalli/db-connect-sql-cutomer-accounts ) Encrypt connection password \u03bb\ufe0e Create a db-connection-secrets.el.gpg file to hold one or more passwords, using the key name used to define the rest of the database connection in sql-connection-alist Add your password to that file like this. Make sure the key of this alist is the same with the key you defined before in sql-connection-alist (in this case server1 and server2). ( setq practicalli/database-account-passwords ' (( server1 \"password1\" ) ( server2 \"password2\" ))) ( provide 'practicalli/database-account-passwords ) Save the file and choose the encryption method that you want, or just skip it to use the default symmetric encryption method. Now, remove the password info in the sql-connection-alist and modify the my-sql-connect function that we have defined in the previous step to load the password from file ( setq sql-connection-alist ' (( server1 ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"localhost\" ) ( sql-user \"user\" ) ( sql-database \"db1\" )) ( server2 ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"localhost\" ) ( sql-user \"user\" ) ( sql-database \"db2\" )))) ( defun my-sql-connect ( product connection ) ;; load the password ( require my-password \"my-password.el.gpg\" ) ;; update the password to the sql-connection-alist ( let (( connection-info ( assoc connection sql-connection-alist )) ( sql-password ( car ( last ( assoc connection my-sql-password ))))) ( delete sql-password connection-info ) ( nconc connection-info ` (( sql-password , sql-password ))) ( setq sql-connection-alist ( assq-delete-all connection sql-connection-alist )) ( add-to-list 'sql-connection-alist connection-info )) ;; connect to database ( setq sql-product product ) ( sql-connect connection )) When activated, the my-sql-connect function will prompt for the password to decrypt the my-password.el.gpg file. However, it will ask for password just once and only when you active the my-sql-connect function so that you will have to enter the password just when you need to use it. Ensure that the db-connection-secrets.el.gpg file can be located inside the Emacs load-path .","title":"Configure connections"},{"location":"database-access/connection-configuration/#configure-connections","text":"Commonly used databases are easier to work with when their connection details are defined in the Emacs configuration. Connection configuration should be added to the dotspacemacs/user-config section of the Spacemacs configuration file ( SPC f e d )","title":"Configure connections"},{"location":"database-access/connection-configuration/#a-single-connection","text":"Set the sql-postgres-login-params variable to define a single PostgreSQL connection. There are similar variables for each type of database. ( setq sql-postgres-login-params ' (( user :default \"username\" ) ( database :default \"database-name\" ) ( server :default \"localhost\" ) ( port :default 5432 ))) , e e to evaluate with the cursor after the closing paren of the setq expression","title":"A single connection"},{"location":"database-access/connection-configuration/#multiple-database-connections","text":"( setq sql-connection-alist ' (( game-scores ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"localhost\" ) ( sql-user \"username\" ) ( sql-password \"secret\" ) ( sql-database \"game-scores\" )) ( customer-accounts ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"123.ec2.aws.com\" ) ( sql-user \"username\" ) ( sql-password \"secret\" ) ( sql-database \"\" )))) Use an Encrypted password when connecting to databases containing sensitive data or leave out the password from the connection configuration and Emacs will prompt A password if okay if using a local database, or connecting to a database via a read-only account where the database contains only non-sensitive data","title":"Multiple database connections"},{"location":"database-access/connection-configuration/#connection-helper-functions","text":"( defun practicalli/db-connect-sql-server ( product connection ) ;; remember to set the sql-product, otherwise, it will fail for the first time ;; you call the function ( setq sql-product product ) ( sql-connect connection )) Define interactive functions that call a specific server, so they can be called without providing arguments and therefore be bound to keys very easily. ( defun practicalli/db-connect-sql-game-scores () ( interactive ) ( practicalli/db-connect-sql-server 'postgres 'game-scores )) ( defun practicalli/db-connect-sql-cutomer-accounts () ( interactive ) ( practicalli/db-connect-sql-server 'postgres 'customer-accounts )) Define key bindings to call the db connections, e.g. SPC o d g for game server and SPC o d c for customer accounts ( spacemacs/set-leader-keys \"odg\" 'practicalli/db-connect-sql-game-scores ) ( spacemacs/set-leader-keys \"odc\" 'practicalli/db-connect-sql-cutomer-accounts )","title":"Connection helper functions"},{"location":"database-access/connection-configuration/#encrypt-connection-password","text":"Create a db-connection-secrets.el.gpg file to hold one or more passwords, using the key name used to define the rest of the database connection in sql-connection-alist Add your password to that file like this. Make sure the key of this alist is the same with the key you defined before in sql-connection-alist (in this case server1 and server2). ( setq practicalli/database-account-passwords ' (( server1 \"password1\" ) ( server2 \"password2\" ))) ( provide 'practicalli/database-account-passwords ) Save the file and choose the encryption method that you want, or just skip it to use the default symmetric encryption method. Now, remove the password info in the sql-connection-alist and modify the my-sql-connect function that we have defined in the previous step to load the password from file ( setq sql-connection-alist ' (( server1 ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"localhost\" ) ( sql-user \"user\" ) ( sql-database \"db1\" )) ( server2 ( sql-product 'postgres ) ( sql-port 5432 ) ( sql-server \"localhost\" ) ( sql-user \"user\" ) ( sql-database \"db2\" )))) ( defun my-sql-connect ( product connection ) ;; load the password ( require my-password \"my-password.el.gpg\" ) ;; update the password to the sql-connection-alist ( let (( connection-info ( assoc connection sql-connection-alist )) ( sql-password ( car ( last ( assoc connection my-sql-password ))))) ( delete sql-password connection-info ) ( nconc connection-info ` (( sql-password , sql-password ))) ( setq sql-connection-alist ( assq-delete-all connection sql-connection-alist )) ( add-to-list 'sql-connection-alist connection-info )) ;; connect to database ( setq sql-product product ) ( sql-connect connection )) When activated, the my-sql-connect function will prompt for the password to decrypt the my-password.el.gpg file. However, it will ask for password just once and only when you active the my-sql-connect function so that you will have to enter the password just when you need to use it. Ensure that the db-connection-secrets.el.gpg file can be located inside the Emacs load-path .","title":"Encrypt connection password"},{"location":"database-access/external-dependencies/","text":"SQL Layer External dependencies \u03bb\ufe0e Linting and formatting of SQL queries is supported via externally installed binaries. SQL layer and LSP page documents installation of an LSP Server binary for the SQL layer SQLint Linting tool \u03bb\ufe0e The sqlint tool provides SQL syntax checking in Emacs via Flycheck. Install ruby and the sqlint gem. gem install sqlint Add Git pre-commit hook \u03bb\ufe0e When committing queries it is useful to define a Git pre-commit hook to check the syntax of the query before the commit completes If using pre-commit to manage hooks, edit the Git .pre-commit-hooks.yaml - repo : https://github.com/purcell/sqlint rev : master hooks : - id : sqlint SQLfmt formatting tool \u03bb\ufe0e Formatting: Install sqlfmt and move it into your $PATH Download and extract the binary 0.4.0 for linux wget -q -O - https://github.com/mjibson/sqlfmt/releases/latest/download/sqlfmt_0.4.0_linux_amd64.tar.gz | tar -xpvzf - --directory \"${installdir}/bin\"","title":"SQL Layer External dependencies"},{"location":"database-access/external-dependencies/#sql-layer-external-dependencies","text":"Linting and formatting of SQL queries is supported via externally installed binaries. SQL layer and LSP page documents installation of an LSP Server binary for the SQL layer","title":"SQL Layer External dependencies"},{"location":"database-access/external-dependencies/#sqlint-linting-tool","text":"The sqlint tool provides SQL syntax checking in Emacs via Flycheck. Install ruby and the sqlint gem. gem install sqlint","title":"SQLint Linting tool"},{"location":"database-access/external-dependencies/#add-git-pre-commit-hook","text":"When committing queries it is useful to define a Git pre-commit hook to check the syntax of the query before the commit completes If using pre-commit to manage hooks, edit the Git .pre-commit-hooks.yaml - repo : https://github.com/purcell/sqlint rev : master hooks : - id : sqlint","title":"Add Git pre-commit hook"},{"location":"database-access/external-dependencies/#sqlfmt-formatting-tool","text":"Formatting: Install sqlfmt and move it into your $PATH Download and extract the binary 0.4.0 for linux wget -q -O - https://github.com/mjibson/sqlfmt/releases/latest/download/sqlfmt_0.4.0_linux_amd64.tar.gz | tar -xpvzf - --directory \"${installdir}/bin\"","title":"SQLfmt formatting tool"},{"location":"database-access/local-docker-database/","text":"Local Database using Docker \u03bb\ufe0e","title":"Local Database using Docker"},{"location":"database-access/local-docker-database/#local-database-using-docker","text":"","title":"Local Database using Docker"},{"location":"database-access/using-sql/","text":"Using SQL from Spacemacs \u03bb\ufe0e Once the sql layer is installed and connections are configured, connect to a database and run queries from within an Emacs buffer. Connect to PostgreSQL \u03bb\ufe0e SPC SPC sql-postgres will create a database connection using the sql-postgres-login-params and prompt for the password. If the connection is not defined, Emacs prompts for all the server connection information. An SQLi buffer is created and associated with the current SQL buffer. Write and run queries \u03bb\ufe0e Type SQL commands into the SQLi buffer to execute Compose queries in the SQL buffer. Run a query by selecting the query and run the command SPC SPC sql-send-region (bound to C-c C-r by default) to execute or sql-send-buffer (bound to C-c C-b by default) to execute all the buffer. SQL product \u03bb\ufe0e sql-product-interactive is an autoloaded interactive Lisp function in \u2018sql.el.gz\u2019. (sql-product-interactive &optional PRODUCT NEW-NAME) Run PRODUCT interpreter as an inferior process. If buffer \u2018 SQL \u2019 exists but no process is running, make a new process. If buffer exists and a process is running, just switch to buffer \u2018 SQL \u2019. To specify the SQL product, prefix the call with SPC u. To set the buffer name as well, prefix the call to M-x sql-product-interactive with SPC u SPC u. (Type C-h m in the SQL buffer for a list of commands.) Tweaks \u03bb\ufe0e ( add-hook 'sql-interactive-mode-hook ( lambda () ( toggle-truncate-lines t ))) toggle-truncate-lines is an interactive native compiled Lisp function in \u2018simple.el\u2019. It is bound to C-x x t. (toggle-truncate-lines &optional ARG) Toggle truncating of long lines for the current buffer. When truncating is off, long lines are folded. With prefix argument ARG, truncate long lines if ARG is positive, otherwise fold them. Note that in side-by-side windows, this command has no effect if \u2018truncate-partial-width-windows\u2019 is non-nil.","title":"Using SQL from Spacemacs"},{"location":"database-access/using-sql/#using-sql-from-spacemacs","text":"Once the sql layer is installed and connections are configured, connect to a database and run queries from within an Emacs buffer.","title":"Using SQL from Spacemacs"},{"location":"database-access/using-sql/#connect-to-postgresql","text":"SPC SPC sql-postgres will create a database connection using the sql-postgres-login-params and prompt for the password. If the connection is not defined, Emacs prompts for all the server connection information. An SQLi buffer is created and associated with the current SQL buffer.","title":"Connect to PostgreSQL"},{"location":"database-access/using-sql/#write-and-run-queries","text":"Type SQL commands into the SQLi buffer to execute Compose queries in the SQL buffer. Run a query by selecting the query and run the command SPC SPC sql-send-region (bound to C-c C-r by default) to execute or sql-send-buffer (bound to C-c C-b by default) to execute all the buffer.","title":"Write and run queries"},{"location":"database-access/using-sql/#sql-product","text":"sql-product-interactive is an autoloaded interactive Lisp function in \u2018sql.el.gz\u2019. (sql-product-interactive &optional PRODUCT NEW-NAME) Run PRODUCT interpreter as an inferior process. If buffer \u2018 SQL \u2019 exists but no process is running, make a new process. If buffer exists and a process is running, just switch to buffer \u2018 SQL \u2019. To specify the SQL product, prefix the call with SPC u. To set the buffer name as well, prefix the call to M-x sql-product-interactive with SPC u SPC u. (Type C-h m in the SQL buffer for a list of commands.)","title":"SQL product"},{"location":"database-access/using-sql/#tweaks","text":"( add-hook 'sql-interactive-mode-hook ( lambda () ( toggle-truncate-lines t ))) toggle-truncate-lines is an interactive native compiled Lisp function in \u2018simple.el\u2019. It is bound to C-x x t. (toggle-truncate-lines &optional ARG) Toggle truncating of long lines for the current buffer. When truncating is off, long lines are folded. With prefix argument ARG, truncate long lines if ARG is positive, otherwise fold them. Note that in side-by-side windows, this command has no effect if \u2018truncate-partial-width-windows\u2019 is non-nil.","title":"Tweaks"},{"location":"debug-clojure/","text":"Debug Clojure \u03bb\ufe0e Most functions in Clojure are easily explored using REPL driven development, so debugging is not usually the first tool to reach for. When unexpected results are returned from a function and its not clear why, then adding break points will step through the code of a function definition and show the intermediate values. The more complex custom code becomes, the greater the need for debugging tools Cider provides cider-debug tool to instrument a function and step through breakpoints to see what each part of that function is doing. Sayid is a comprehensive debug and profile tool, useful when debugging needs are extensive. Tool Description cider debug add breakpoints and step through values and expressions sayid debug debug the whole project (code must compile) and profile project cider inspector navigate through data structures, paging through large data data inspector: portal visualize and navigate through data structures data inspector: reveal visualize and navigate through data structures Inspect as a debug tool \u03bb\ufe0e When the wrong shape of result is return or values are not correct, a data inspector tool can be an effective way to debug a function. Data inspector tools show the results of functions, visualising the shape and values of the data returned. Some inspectors also capture the history of results (e.g. Portal). Data inspectors are especially useful as the size and complexity of the results data grows. Cider provides a data inspector to navigate nested data structures and page through large data sets. References \u03bb\ufe0e docs.cider.mx - debugging","title":"Debug Clojure"},{"location":"debug-clojure/#debug-clojure","text":"Most functions in Clojure are easily explored using REPL driven development, so debugging is not usually the first tool to reach for. When unexpected results are returned from a function and its not clear why, then adding break points will step through the code of a function definition and show the intermediate values. The more complex custom code becomes, the greater the need for debugging tools Cider provides cider-debug tool to instrument a function and step through breakpoints to see what each part of that function is doing. Sayid is a comprehensive debug and profile tool, useful when debugging needs are extensive. Tool Description cider debug add breakpoints and step through values and expressions sayid debug debug the whole project (code must compile) and profile project cider inspector navigate through data structures, paging through large data data inspector: portal visualize and navigate through data structures data inspector: reveal visualize and navigate through data structures","title":"Debug Clojure"},{"location":"debug-clojure/#inspect-as-a-debug-tool","text":"When the wrong shape of result is return or values are not correct, a data inspector tool can be an effective way to debug a function. Data inspector tools show the results of functions, visualising the shape and values of the data returned. Some inspectors also capture the history of results (e.g. Portal). Data inspectors are especially useful as the size and complexity of the results data grows. Cider provides a data inspector to navigate nested data structures and page through large data sets.","title":"Inspect as a debug tool"},{"location":"debug-clojure/#references","text":"docs.cider.mx - debugging","title":"References"},{"location":"debug-clojure/cider-debug/","text":"CIDER Debug \u03bb\ufe0e , d b calls the cider-debug-defn-breakpoint command that sets breakpoints on the expression under the cursor. If the expression is a function definition, then its name is marked as instrumented by the debug along with any calls to that function. A debug menu appears above the expression, press n to step through each expression and see the inline result. Hint::Switch to Emacs Edit mode for full menu \u03bb\ufe0e C-z after starting cider-debug to use c e i p s menu keys as otherwise they call the Evil normal state commands. C-z to switch back to Evil normal state. Conditional break points \u03bb\ufe0e :break/when metadata on a #dbg directive defines a condition when a breakpoint is triggered, allowing the evaluation to iterate until a desirable point is reached. Setting a condition is especially useful when there are many iterations required before reaching a point of issue, for example iterating through a large data set. A #break can be added on any Clojure form. In this example the evaluation will break on each iteration of the sequence, showing the local value of the index. ( dotimes [ index 10 ] # break index ) Add a break condition within the expression to be evaluated and the evaluation will iterate until the condition is met and then break n to continue to the next break point will complete the evaluation as the break condition is no longer met ( dotimes [ index 10 ] # dbg ^ { :break/when ( = index 7 )} index ) The evaluation will break each time a condition is met, so a break will occur multiple times when the value of index is odd ( dotimes [ index 10 ] # dbg ^ { :break/when ( odd? index )} index ) Skip over lazy functions \u03bb\ufe0e o (out) will jump out of evaluating an expression. Use out to jump over evaluating code that has functions generating lazy infinite sequences, such as range or cycle . Cider debug will then evaluate those functions in their outer expression where it should be safe to do so. References \u03bb\ufe0e Conditional Breakpoints in the Cider debugger","title":"CIDER Debug"},{"location":"debug-clojure/cider-debug/#cider-debug","text":", d b calls the cider-debug-defn-breakpoint command that sets breakpoints on the expression under the cursor. If the expression is a function definition, then its name is marked as instrumented by the debug along with any calls to that function. A debug menu appears above the expression, press n to step through each expression and see the inline result.","title":"CIDER Debug"},{"location":"debug-clojure/cider-debug/#hintswitch-to-emacs-edit-mode-for-full-menu","text":"C-z after starting cider-debug to use c e i p s menu keys as otherwise they call the Evil normal state commands. C-z to switch back to Evil normal state.","title":"Hint::Switch to Emacs Edit mode for full menu"},{"location":"debug-clojure/cider-debug/#conditional-break-points","text":":break/when metadata on a #dbg directive defines a condition when a breakpoint is triggered, allowing the evaluation to iterate until a desirable point is reached. Setting a condition is especially useful when there are many iterations required before reaching a point of issue, for example iterating through a large data set. A #break can be added on any Clojure form. In this example the evaluation will break on each iteration of the sequence, showing the local value of the index. ( dotimes [ index 10 ] # break index ) Add a break condition within the expression to be evaluated and the evaluation will iterate until the condition is met and then break n to continue to the next break point will complete the evaluation as the break condition is no longer met ( dotimes [ index 10 ] # dbg ^ { :break/when ( = index 7 )} index ) The evaluation will break each time a condition is met, so a break will occur multiple times when the value of index is odd ( dotimes [ index 10 ] # dbg ^ { :break/when ( odd? index )} index )","title":"Conditional break points"},{"location":"debug-clojure/cider-debug/#skip-over-lazy-functions","text":"o (out) will jump out of evaluating an expression. Use out to jump over evaluating code that has functions generating lazy infinite sequences, such as range or cycle . Cider debug will then evaluate those functions in their outer expression where it should be safe to do so.","title":"Skip over lazy functions"},{"location":"debug-clojure/cider-debug/#references","text":"Conditional Breakpoints in the Cider debugger","title":"References"},{"location":"debug-clojure/cider-error-report/","text":"Navigate CIDER error report \u03bb\ufe0e","title":"Navigate CIDER error report"},{"location":"debug-clojure/cider-error-report/#navigate-cider-error-report","text":"","title":"Navigate CIDER error report"},{"location":"debug-clojure/classpath-issues/","text":"Diagnose Classpath issues \u03bb\ufe0e clojure -Spath > project-classpath.txt will write the output the project classpath to the project-classpath.txt file. The command will first download project dependencies that are not currently satisfied The output is a single line of text, with each path in the class path separated by a colon character, : SPC f f to open the file in Spacemacs Separate the classpath output into individual lines with this vim command. This makes the file easier to read and run diff comparisons upon. : s /:/ \\ n / g Hint::Diff - compare differences between files \u03bb\ufe0e SPC D f f and selecting two files will open ediff and show a comparison. Navigate the changes using j and k . a to copy a change from the left buffer to the right buffer, b to copy right to left.","title":"Diagnose Classpath issues"},{"location":"debug-clojure/classpath-issues/#diagnose-classpath-issues","text":"clojure -Spath > project-classpath.txt will write the output the project classpath to the project-classpath.txt file. The command will first download project dependencies that are not currently satisfied The output is a single line of text, with each path in the class path separated by a colon character, : SPC f f to open the file in Spacemacs Separate the classpath output into individual lines with this vim command. This makes the file easier to read and run diff comparisons upon. : s /:/ \\ n / g","title":"Diagnose Classpath issues"},{"location":"debug-clojure/classpath-issues/#hintdiff-compare-differences-between-files","text":"SPC D f f and selecting two files will open ediff and show a comparison. Navigate the changes using j and k . a to copy a change from the left buffer to the right buffer, b to copy right to left.","title":"Hint::Diff - compare differences between files"},{"location":"debug-clojure/core-async/","text":"Debug core.async \u03bb\ufe0e Push extra information onto the channel that can be ignored when debugging is not required. ClojureScript: Output to Browser console log \u03bb\ufe0e You can't have the put operation in the call stack of a dispatch error. That is why it is async. You need to e. g. pr-str the dispatched value and make an educated guess where it was sent from. If the error happens while calling put it usually means you you called put on sth. that is not a channel. Use an expression to wrap a form ( doto form ( ->> ( pr-str ) ( str \"DEBUG: \" ) js/console.log )) Logging to the console tends to be more effective than breakpoint debugging in the browser developer tools. Add more detail such as function name, vars and even line number Emacs Lisp function to wrap a form with the console log expression ( defun cljs-dbg () ( interactive ) ( forward-char ) ( beginning-of-sexp ) ( insert \"(doto \" ) ( end-of-sexp ) ( insert \" (->> pr-str (str \\\"DEBUG: \\\") js/console.log))\" )) ( global-set-key ( kbd \"C-c C-d\" ) 'cljs-dbg ) Use structured editing raise to raise the original form to remove the debug code.","title":"Core async"},{"location":"debug-clojure/core-async/#debug-coreasync","text":"Push extra information onto the channel that can be ignored when debugging is not required.","title":"Debug core.async"},{"location":"debug-clojure/core-async/#clojurescript-output-to-browser-console-log","text":"You can't have the put operation in the call stack of a dispatch error. That is why it is async. You need to e. g. pr-str the dispatched value and make an educated guess where it was sent from. If the error happens while calling put it usually means you you called put on sth. that is not a channel. Use an expression to wrap a form ( doto form ( ->> ( pr-str ) ( str \"DEBUG: \" ) js/console.log )) Logging to the console tends to be more effective than breakpoint debugging in the browser developer tools. Add more detail such as function name, vars and even line number Emacs Lisp function to wrap a form with the console log expression ( defun cljs-dbg () ( interactive ) ( forward-char ) ( beginning-of-sexp ) ( insert \"(doto \" ) ( end-of-sexp ) ( insert \" (->> pr-str (str \\\"DEBUG: \\\") js/console.log))\" )) ( global-set-key ( kbd \"C-c C-d\" ) 'cljs-dbg ) Use structured editing raise to raise the original form to remove the debug code.","title":"ClojureScript: Output to Browser console log"},{"location":"debug-clojure/deconstruct-stack-traces/","text":"Understanding Clojure errors \u03bb\ufe0e When a run time error occurs in Clojure, a stack trace is generated which includes information from the Clojure code and the underlying Java platform. A stack trace can seem daunting as it provide so much information. There are common errors that are useful to learn to help quickly understand the root cause. Clojure editors such as CIDER help navigation and information hiding. Tools like AvisoNovate/pretty reformat stack traces to make them easier to understand. Structure of a stack trace \u03bb\ufe0e The Clojure compiler will catch an error exception, unwrap, and re-throw exceptions up the call chain from where they originally occur. This provides a history of all the expressions called that lead to the exception. Exception in thread... should be at the top of the stack trace, followed by the call stack in descending chronological time Understanding Exception \u03bb\ufe0e An exception should provide a general context for the error and the assumed path to the error. IllegalArgumentException ClassCastException ArityException ClassNotFound `` Example Exceptions include: Don't know how to create ISeq from: clojure.lang.Keyword - a keyword was used when a sequence (list, vector) was expected Don't know how to create IFn from: clojure.lang.Integer - an expression was evaluated that started with a value (specifically an Integer) rather than a symbol that points to a function definition. Answer is often the first line \u03bb\ufe0e A stack trace is printed in descending time order, with the most recent call at the top of the stack. Between the Exception and the top of the call stack, most errors are quickly interpreted without the need to read the whole stack trace. Using the wrong kind of value \u03bb\ufe0e IllegalArgumentException is generated when using the wrong kind of value, e.g. using a value instead of a function name (symbol) Evaluating (1 2 3) will try and call 1 as a function as it is first in the list. As 1 is a value (integer) and not a function, so 1 does not implement the function interface, IFn . Wrong number of arguments \u03bb\ufe0e De-reference Values \u03bb\ufe0e Casting a value to a Future that has not been realised java.util.concurrent.Future Errors tend to require decoding \u03bb\ufe0e he messages in the errors could be vastly improved to include things like variable names and provide better wording. A simple example is something like this: (map [1 2 3] inc) the error is Don't know how to create ISeq from: clojure.core$inc a much better error would be invalid parameters to map, expecting [fn coll], got [coll fn] or something along those lines Reading and understanding Clojure errors \u03bb\ufe0e Define a function that explicitly throws an exception using the throw function ( defn explicit-exception [ value ] ( throw ( ex-info ( str \"Invalid value: \" value ) { :value value }))) ( explicit-exception \"kaboom\" ) Execution error ( ExceptionInfo ) at user/explicit-exception ( REPL :2 ) . Invalid value : kaboom Deconstructing the error message Execution error: - in which Clojure phase the error occurred ExceptionInfo : - name of the class of the exception. ex-info internally creates an instance of clojure.lang.ExceptionInfo user/explicit-exception - name of the function where exception was thrown REPL:2 - path and line of the file where exception was thrown. REPL means there is no file, the definition was created at the REPL prompt, on line 2 Invalid value: kaboom : - error message thrown (the message passed to ex-info in this example) Generate an exception by calling the function with the incorrect number of arguments ( explicit-exception ) Execution error ( ArityException ) at user/eval137 ( REPL :1 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception Deconstructing the error message Execution error - the implicit execution error is the same as before ArityException - class of the exception, i.e. clojure.lang.ArityException user/eval137 - every form evaluated in the REPL internally creates a function, generating a name in the form eval1234 and immediately executes the expression. REPL:1 - error path is the first line of the REPL prompt Wrong number of args (0) passed to: user/explicit-exception - message generated from the exception Use an anonymous function to wrap the call to the expression, to provide an explicit name when evaluated (( fn named-for-context [] ( explicit-exception ))) Execution error ( ArityException ) at user/eval139$named-for-context ( REPL :2 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception The error message function now includes a specific name making the error message more useful as it is more obvious in the code as to where the error occurred. View the stack trace \u03bb\ufe0e *e is a dynamic var that always points to the last error in a running REPL process. Evaluate *e in the REPL to see the stack trace in detail, as an EDN hash-map user => e* # error { :cause \"Wrong number of args (0) passed to: user/explicit-exception\" :via [{ :type clojure.lang.ArityException :message \"Wrong number of args (0) passed to: user/explicit-exception\" :at [ clojure.lang.AFn throwArity \"AFn.java\" 429 ]}] :trace [[ clojure.lang.AFn throwArity \"AFn.java\" 429 ] [ clojure.lang.AFn invoke \"AFn.java\" 28 ] [ user$eval139$named-for-context__140 invoke \"NO_SOURCE_FILE\" 2 ] ... ]} Adding named-for-context to the execution, anything before this context should not be relevant. Now let's try a harder one: Stack trace for Lazy functions \u03bb\ufe0e ( map explicit-exception [ 1 ]) Error printing return value ( ExceptionInfo ) at user/explicit-exception ( NO_SOURCE_FILE :2 ) . Invalid value : 1 Error printing return value at the start of the error shows it's not a Execution error anymore. The code was executed and returned a value. clojure.core/map returns a lazy-seq and when the printer tries to print the result an exception is thrown. Use the *e dynamic var to see the full stack trace *e # error { :cause \"Invalid value: 1\" :data { :x 1 } :via [{ :type clojure.lang.ExceptionInfo :message nil :data # :clojure.error { :phase :print-eval-result } :at [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ]} { :type clojure.lang.ExceptionInfo :message \"Invalid value: 1\" :data { :value 1 } :at [ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ]}] :trace [[ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ] [ user$explicit_exception invoke \"NO_SOURCE_FILE\" 1 ] ;; 6 [ clojure.core$map$fn__5885 invoke \"core.clj\" 2757 ] ;; 5 [ clojure.lang.LazySeq sval \"LazySeq.java\" 42 ] [ clojure.lang.LazySeq seq \"LazySeq.java\" 51 ] ;; 4 [ clojure.lang.RT seq \"RT.java\" 535 ] [ clojure.core$seq__5420 invokeStatic \"core.clj\" 139 ] [ clojure.core$print_sequential invokeStatic \"core_print.clj\" 53 ] [ clojure.core$fn__7331 invokeStatic \"core_print.clj\" 174 ] [ clojure.core$fn__7331 invoke \"core_print.clj\" 174 ] [ clojure.lang.MultiFn invoke \"MultiFn.java\" 234 ] ;; 3 [ clojure.core$pr_on invokeStatic \"core.clj\" 3662 ] [ clojure.core$pr invokeStatic \"core.clj\" 3665 ] [ clojure.core$pr invoke \"core.clj\" 3665 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 154 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.core$apply invokeStatic \"core.clj\" 667 ] [ clojure.core$prn invokeStatic \"core.clj\" 3702 ] [ clojure.core$prn doInvoke \"core.clj\" 3702 ] ;; 2 [ clojure.lang.RestFn invoke \"RestFn.java\" 408 ] [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ] ;; 1 [ clojure.main$repl$fn__9121 invoke \"main.clj\" 458 ] [ clojure.main$repl invokeStatic \"main.clj\" 458 ] [ clojure.main$repl_opt invokeStatic \"main.clj\" 522 ] [ clojure.main$main invokeStatic \"main.clj\" 667 ] [ clojure.main$main doInvoke \"main.clj\" 616 ] [ clojure.lang.RestFn invoke \"RestFn.java\" 397 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 152 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.lang.Var applyTo \"Var.java\" 705 ] [ clojure.main main \"main.java\" 40 ]]} Deconstructing the stack trace Where clojure.main REPL starts the print parse clojure.main uses clojure.core/prn clojure.core/prn uses clojure.core/print-method . Note: a multimethod adds complexity to stacktraces print method invoked the method to evaluare the lazy sequence the lazy sequence was created inside a call to clojure.core/map The lazy sequence is called by explicit-exception clojure.core/munge is the function that converts namespaces with hyphens, i.e. explicit-exception into the name used on the Java class path, i.e. explicit_exception clojure.repl/pst to get a nice looking stacktrace print Reference \u03bb\ufe0e Clojure Error message catalogue contains example errors gathered by the Clojure community. Implementing interfaces Name Interface Example IFn Function anonymous function or symbol that points to a function definition ISeq Sequence list, result from sequence function e.g. map, filter, etc. IPersistentCollection Persistent Collection list, vector, hash-map or set Error Description Don't know how to create ISeq from: Expecting a sequence (list, vector) rather than the value Don't know how to create IFn from: Expecting a symbol name that points to a function definition","title":"Understanding Clojure errors"},{"location":"debug-clojure/deconstruct-stack-traces/#understanding-clojure-errors","text":"When a run time error occurs in Clojure, a stack trace is generated which includes information from the Clojure code and the underlying Java platform. A stack trace can seem daunting as it provide so much information. There are common errors that are useful to learn to help quickly understand the root cause. Clojure editors such as CIDER help navigation and information hiding. Tools like AvisoNovate/pretty reformat stack traces to make them easier to understand.","title":"Understanding Clojure errors"},{"location":"debug-clojure/deconstruct-stack-traces/#structure-of-a-stack-trace","text":"The Clojure compiler will catch an error exception, unwrap, and re-throw exceptions up the call chain from where they originally occur. This provides a history of all the expressions called that lead to the exception. Exception in thread... should be at the top of the stack trace, followed by the call stack in descending chronological time","title":"Structure of a stack trace"},{"location":"debug-clojure/deconstruct-stack-traces/#understanding-exception","text":"An exception should provide a general context for the error and the assumed path to the error. IllegalArgumentException ClassCastException ArityException ClassNotFound `` Example Exceptions include: Don't know how to create ISeq from: clojure.lang.Keyword - a keyword was used when a sequence (list, vector) was expected Don't know how to create IFn from: clojure.lang.Integer - an expression was evaluated that started with a value (specifically an Integer) rather than a symbol that points to a function definition.","title":"Understanding Exception"},{"location":"debug-clojure/deconstruct-stack-traces/#answer-is-often-the-first-line","text":"A stack trace is printed in descending time order, with the most recent call at the top of the stack. Between the Exception and the top of the call stack, most errors are quickly interpreted without the need to read the whole stack trace.","title":"Answer is often the first line"},{"location":"debug-clojure/deconstruct-stack-traces/#using-the-wrong-kind-of-value","text":"IllegalArgumentException is generated when using the wrong kind of value, e.g. using a value instead of a function name (symbol) Evaluating (1 2 3) will try and call 1 as a function as it is first in the list. As 1 is a value (integer) and not a function, so 1 does not implement the function interface, IFn .","title":"Using the wrong kind of value"},{"location":"debug-clojure/deconstruct-stack-traces/#wrong-number-of-arguments","text":"","title":"Wrong number of arguments"},{"location":"debug-clojure/deconstruct-stack-traces/#de-reference-values","text":"Casting a value to a Future that has not been realised java.util.concurrent.Future","title":"De-reference Values"},{"location":"debug-clojure/deconstruct-stack-traces/#errors-tend-to-require-decoding","text":"he messages in the errors could be vastly improved to include things like variable names and provide better wording. A simple example is something like this: (map [1 2 3] inc) the error is Don't know how to create ISeq from: clojure.core$inc a much better error would be invalid parameters to map, expecting [fn coll], got [coll fn] or something along those lines","title":"Errors tend to require decoding"},{"location":"debug-clojure/deconstruct-stack-traces/#reading-and-understanding-clojure-errors","text":"Define a function that explicitly throws an exception using the throw function ( defn explicit-exception [ value ] ( throw ( ex-info ( str \"Invalid value: \" value ) { :value value }))) ( explicit-exception \"kaboom\" ) Execution error ( ExceptionInfo ) at user/explicit-exception ( REPL :2 ) . Invalid value : kaboom Deconstructing the error message Execution error: - in which Clojure phase the error occurred ExceptionInfo : - name of the class of the exception. ex-info internally creates an instance of clojure.lang.ExceptionInfo user/explicit-exception - name of the function where exception was thrown REPL:2 - path and line of the file where exception was thrown. REPL means there is no file, the definition was created at the REPL prompt, on line 2 Invalid value: kaboom : - error message thrown (the message passed to ex-info in this example) Generate an exception by calling the function with the incorrect number of arguments ( explicit-exception ) Execution error ( ArityException ) at user/eval137 ( REPL :1 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception Deconstructing the error message Execution error - the implicit execution error is the same as before ArityException - class of the exception, i.e. clojure.lang.ArityException user/eval137 - every form evaluated in the REPL internally creates a function, generating a name in the form eval1234 and immediately executes the expression. REPL:1 - error path is the first line of the REPL prompt Wrong number of args (0) passed to: user/explicit-exception - message generated from the exception Use an anonymous function to wrap the call to the expression, to provide an explicit name when evaluated (( fn named-for-context [] ( explicit-exception ))) Execution error ( ArityException ) at user/eval139$named-for-context ( REPL :2 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception The error message function now includes a specific name making the error message more useful as it is more obvious in the code as to where the error occurred.","title":"Reading and understanding Clojure errors"},{"location":"debug-clojure/deconstruct-stack-traces/#view-the-stack-trace","text":"*e is a dynamic var that always points to the last error in a running REPL process. Evaluate *e in the REPL to see the stack trace in detail, as an EDN hash-map user => e* # error { :cause \"Wrong number of args (0) passed to: user/explicit-exception\" :via [{ :type clojure.lang.ArityException :message \"Wrong number of args (0) passed to: user/explicit-exception\" :at [ clojure.lang.AFn throwArity \"AFn.java\" 429 ]}] :trace [[ clojure.lang.AFn throwArity \"AFn.java\" 429 ] [ clojure.lang.AFn invoke \"AFn.java\" 28 ] [ user$eval139$named-for-context__140 invoke \"NO_SOURCE_FILE\" 2 ] ... ]} Adding named-for-context to the execution, anything before this context should not be relevant. Now let's try a harder one:","title":"View the stack trace"},{"location":"debug-clojure/deconstruct-stack-traces/#stack-trace-for-lazy-functions","text":"( map explicit-exception [ 1 ]) Error printing return value ( ExceptionInfo ) at user/explicit-exception ( NO_SOURCE_FILE :2 ) . Invalid value : 1 Error printing return value at the start of the error shows it's not a Execution error anymore. The code was executed and returned a value. clojure.core/map returns a lazy-seq and when the printer tries to print the result an exception is thrown. Use the *e dynamic var to see the full stack trace *e # error { :cause \"Invalid value: 1\" :data { :x 1 } :via [{ :type clojure.lang.ExceptionInfo :message nil :data # :clojure.error { :phase :print-eval-result } :at [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ]} { :type clojure.lang.ExceptionInfo :message \"Invalid value: 1\" :data { :value 1 } :at [ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ]}] :trace [[ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ] [ user$explicit_exception invoke \"NO_SOURCE_FILE\" 1 ] ;; 6 [ clojure.core$map$fn__5885 invoke \"core.clj\" 2757 ] ;; 5 [ clojure.lang.LazySeq sval \"LazySeq.java\" 42 ] [ clojure.lang.LazySeq seq \"LazySeq.java\" 51 ] ;; 4 [ clojure.lang.RT seq \"RT.java\" 535 ] [ clojure.core$seq__5420 invokeStatic \"core.clj\" 139 ] [ clojure.core$print_sequential invokeStatic \"core_print.clj\" 53 ] [ clojure.core$fn__7331 invokeStatic \"core_print.clj\" 174 ] [ clojure.core$fn__7331 invoke \"core_print.clj\" 174 ] [ clojure.lang.MultiFn invoke \"MultiFn.java\" 234 ] ;; 3 [ clojure.core$pr_on invokeStatic \"core.clj\" 3662 ] [ clojure.core$pr invokeStatic \"core.clj\" 3665 ] [ clojure.core$pr invoke \"core.clj\" 3665 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 154 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.core$apply invokeStatic \"core.clj\" 667 ] [ clojure.core$prn invokeStatic \"core.clj\" 3702 ] [ clojure.core$prn doInvoke \"core.clj\" 3702 ] ;; 2 [ clojure.lang.RestFn invoke \"RestFn.java\" 408 ] [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ] ;; 1 [ clojure.main$repl$fn__9121 invoke \"main.clj\" 458 ] [ clojure.main$repl invokeStatic \"main.clj\" 458 ] [ clojure.main$repl_opt invokeStatic \"main.clj\" 522 ] [ clojure.main$main invokeStatic \"main.clj\" 667 ] [ clojure.main$main doInvoke \"main.clj\" 616 ] [ clojure.lang.RestFn invoke \"RestFn.java\" 397 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 152 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.lang.Var applyTo \"Var.java\" 705 ] [ clojure.main main \"main.java\" 40 ]]} Deconstructing the stack trace Where clojure.main REPL starts the print parse clojure.main uses clojure.core/prn clojure.core/prn uses clojure.core/print-method . Note: a multimethod adds complexity to stacktraces print method invoked the method to evaluare the lazy sequence the lazy sequence was created inside a call to clojure.core/map The lazy sequence is called by explicit-exception clojure.core/munge is the function that converts namespaces with hyphens, i.e. explicit-exception into the name used on the Java class path, i.e. explicit_exception clojure.repl/pst to get a nice looking stacktrace print","title":"Stack trace for Lazy functions"},{"location":"debug-clojure/deconstruct-stack-traces/#reference","text":"Clojure Error message catalogue contains example errors gathered by the Clojure community. Implementing interfaces Name Interface Example IFn Function anonymous function or symbol that points to a function definition ISeq Sequence list, result from sequence function e.g. map, filter, etc. IPersistentCollection Persistent Collection list, vector, hash-map or set Error Description Don't know how to create ISeq from: Expecting a sequence (list, vector) rather than the value Don't know how to create IFn from: Expecting a symbol name that points to a function definition","title":"Reference"},{"location":"debug-clojure/format-error-messages/","text":"Formatting Errors for clarity \u03bb\ufe0e io.aviso/pretty is a library to highlight the most important error lines from a potentially long stack trace. Pretty error output features Readable output for exceptions ANSI font and background color support Hex dump of binary data Hex dump of binary deltas Formatting data into columns In the REPL \u03bb\ufe0e io.aviso.repl namespace contains functions for use in the REPL, which can copy stack traces from the system clipboard. (install-pretty-exceptions) function overrides several internal Clojure functions to enable formatted exceptions using io.aviso.exception/write-exception (pretty-print) parses the content of the clipboard as EDN and prints it in human readable form (format-exception) parse the stack trace and format it for readability Add the following in a comment block, typically in a dev/user.clj file or namespace that is generating a noticeable number of stack traces. ( comment ( require ' [ io.aviso.repl as pretty ]) ( -> ( pretty/copy ) pretty/format-exception pretty/paste ) ) On the command line \u03bb\ufe0e AvisoNovate/pretty can be used as a Leiningen plugin for command line use Add pretty as a profile to the project.clj or users .profiles.clj lein with-profiles +pretty run","title":"Formatting Errors for clarity"},{"location":"debug-clojure/format-error-messages/#formatting-errors-for-clarity","text":"io.aviso/pretty is a library to highlight the most important error lines from a potentially long stack trace. Pretty error output features Readable output for exceptions ANSI font and background color support Hex dump of binary data Hex dump of binary deltas Formatting data into columns","title":"Formatting Errors for clarity"},{"location":"debug-clojure/format-error-messages/#in-the-repl","text":"io.aviso.repl namespace contains functions for use in the REPL, which can copy stack traces from the system clipboard. (install-pretty-exceptions) function overrides several internal Clojure functions to enable formatted exceptions using io.aviso.exception/write-exception (pretty-print) parses the content of the clipboard as EDN and prints it in human readable form (format-exception) parse the stack trace and format it for readability Add the following in a comment block, typically in a dev/user.clj file or namespace that is generating a noticeable number of stack traces. ( comment ( require ' [ io.aviso.repl as pretty ]) ( -> ( pretty/copy ) pretty/format-exception pretty/paste ) )","title":"In the REPL"},{"location":"debug-clojure/format-error-messages/#on-the-command-line","text":"AvisoNovate/pretty can be used as a Leiningen plugin for command line use Add pretty as a profile to the project.clj or users .profiles.clj lein with-profiles +pretty run","title":"On the command line"},{"location":"debug-clojure/inspect-values/","text":"Inspecting values in Clojure \u03bb\ufe0e The Clojure layer includes the cider-inspector , d v opens the cider-inspector on the current symbol, allowing you to traverse its value. Hint:: Clojure Inspector in more detail \u03bb\ufe0e The cider-inspector is covered in more detail in the Evaluate Clojure > Inspect section An example of using the Inspector can be seen in the REPL driven development with Spacemacs video .","title":"Inspecting values in Clojure"},{"location":"debug-clojure/inspect-values/#inspecting-values-in-clojure","text":"The Clojure layer includes the cider-inspector , d v opens the cider-inspector on the current symbol, allowing you to traverse its value.","title":"Inspecting values in Clojure"},{"location":"debug-clojure/inspect-values/#hint-clojure-inspector-in-more-detail","text":"The cider-inspector is covered in more detail in the Evaluate Clojure > Inspect section An example of using the Inspector can be seen in the REPL driven development with Spacemacs video .","title":"Hint:: Clojure Inspector in more detail"},{"location":"debug-clojure/sayid-debug/","text":"Sayid debug and profile tool \u03bb\ufe0e Sayid , pronounced \"siy EED\", is an extensive debug and profile tool for Clojure projects. To debug or profile code it must be able to compile or sayid will fail to work. Hint::cider-debug - a simpler approach \u03bb\ufe0e cider-debug is simpler and quicker approach to debugging. Sayid works by intercepting and recording the inputs and outputs of functions. It can even record function calls that occur inside of functions. The user can select which functions to trace. Functions can be selected individually or by namespace. The recorded data can be displayed, queried and profiled. Sayid currently has three components: - core and its supporting namespaces - nREPL middleware - an emacs-cider nREPL client Key Binding Description SPC m d b instrument expression at point SPC m d e display last stacktrace SPC m d r reload namespaces SPC m d v inspect expression at point Configure Sayid \u03bb\ufe0e Sayid is an optional package in the Clojure layer for Spacemacs. To enable sayid, add the following :variable to the clojure layer in .spacemacs ( clojure :variables clojure-enable-sayid t ) Cider Jack-in \u03bb\ufe0e , m s cider-jack-in-clj to start the Clojure REPL via Cider jack-in, which should automatically include the Sayid nrepl middleware. For a Leiningen project, sayid library should be added as a dev-dependency For a Clojure CLI projects, include sayid library as an alias (e.g. :lib/sayid from practicalli/clojure-deps-edn ) { :lib/sayid { com.billpiel/sayid { :mvn/version \"0.1.0\" }}} Cider Connect \u03bb\ufe0e Leiningen projects must include the Sayid plugin in order to use Cider Connect. { :user { :plugins [[ cider/cider-nrepl \"0.25.3\" ] [ com.billpiel/sayid \"0.1.0\" ]] :dependencies [[ nrepl/nrepl \"0.7.0\" ]]}} Clojure CLI projects will need to explicitly include the middleware configuration in the same alias that configures nrepl, e.g. :repl/cider-debug { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } com.billpiel/sayid { :mvn/version \"0.1.0\" } cider/cider-nrepl { :mvn/version \"0.28.5\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[com.billpiel.sayid.nrepl-middleware/wrap-sayid,cider.nrepl/cider-middleware]\" \"--interactive\" ]} If also using clj-refactor with Cider, then that nrepl middleware as well as sayid and cider will need to be included :repl/cider-refactor-debug { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } com.billpiel/sayid { :mvn/version \"0.1.0\" } cider/cider-nrepl { :mvn/version \"0.28.5\" } refactor-nrepl/refactor-nrepl { :mvn/version \"3.5.3\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[com.billpiel.sayid.nrepl-middleware/wrap-sayid,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\" \"--interactive\" ]} Now run the REPL process in a terminal with the following command clojure -M:repl/cider-debug Cider connect will only work if the sayid nrepl middleware is added to the aliases used to configure the nREPL middleware. Learning Sayid \u03bb\ufe0e There is a noticeable learn curve to Sayid as it is quite comprehensive {% youtube %} https://www.youtube.com/watch?v=wkduA4py-qk?autoplay=1loop=1","title":"Sayid debug and profile tool"},{"location":"debug-clojure/sayid-debug/#sayid-debug-and-profile-tool","text":"Sayid , pronounced \"siy EED\", is an extensive debug and profile tool for Clojure projects. To debug or profile code it must be able to compile or sayid will fail to work.","title":"Sayid debug and profile tool"},{"location":"debug-clojure/sayid-debug/#hintcider-debug-a-simpler-approach","text":"cider-debug is simpler and quicker approach to debugging. Sayid works by intercepting and recording the inputs and outputs of functions. It can even record function calls that occur inside of functions. The user can select which functions to trace. Functions can be selected individually or by namespace. The recorded data can be displayed, queried and profiled. Sayid currently has three components: - core and its supporting namespaces - nREPL middleware - an emacs-cider nREPL client Key Binding Description SPC m d b instrument expression at point SPC m d e display last stacktrace SPC m d r reload namespaces SPC m d v inspect expression at point","title":"Hint::cider-debug - a simpler approach"},{"location":"debug-clojure/sayid-debug/#configure-sayid","text":"Sayid is an optional package in the Clojure layer for Spacemacs. To enable sayid, add the following :variable to the clojure layer in .spacemacs ( clojure :variables clojure-enable-sayid t )","title":"Configure Sayid"},{"location":"debug-clojure/sayid-debug/#cider-jack-in","text":", m s cider-jack-in-clj to start the Clojure REPL via Cider jack-in, which should automatically include the Sayid nrepl middleware. For a Leiningen project, sayid library should be added as a dev-dependency For a Clojure CLI projects, include sayid library as an alias (e.g. :lib/sayid from practicalli/clojure-deps-edn ) { :lib/sayid { com.billpiel/sayid { :mvn/version \"0.1.0\" }}}","title":"Cider Jack-in"},{"location":"debug-clojure/sayid-debug/#cider-connect","text":"Leiningen projects must include the Sayid plugin in order to use Cider Connect. { :user { :plugins [[ cider/cider-nrepl \"0.25.3\" ] [ com.billpiel/sayid \"0.1.0\" ]] :dependencies [[ nrepl/nrepl \"0.7.0\" ]]}} Clojure CLI projects will need to explicitly include the middleware configuration in the same alias that configures nrepl, e.g. :repl/cider-debug { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } com.billpiel/sayid { :mvn/version \"0.1.0\" } cider/cider-nrepl { :mvn/version \"0.28.5\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[com.billpiel.sayid.nrepl-middleware/wrap-sayid,cider.nrepl/cider-middleware]\" \"--interactive\" ]} If also using clj-refactor with Cider, then that nrepl middleware as well as sayid and cider will need to be included :repl/cider-refactor-debug { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } com.billpiel/sayid { :mvn/version \"0.1.0\" } cider/cider-nrepl { :mvn/version \"0.28.5\" } refactor-nrepl/refactor-nrepl { :mvn/version \"3.5.3\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[com.billpiel.sayid.nrepl-middleware/wrap-sayid,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\" \"--interactive\" ]} Now run the REPL process in a terminal with the following command clojure -M:repl/cider-debug Cider connect will only work if the sayid nrepl middleware is added to the aliases used to configure the nREPL middleware.","title":"Cider Connect"},{"location":"debug-clojure/sayid-debug/#learning-sayid","text":"There is a noticeable learn curve to Sayid as it is quite comprehensive {% youtube %} https://www.youtube.com/watch?v=wkduA4py-qk?autoplay=1loop=1","title":"Learning Sayid"},{"location":"debug-clojure/understanding-errors/","text":"Understanding Clojure errors \u03bb\ufe0e When a run time error occurs in Clojure, a stack trace is generated which includes information from the Clojure code and the underlying Java platform. A stack trace can seem daunting as it provide so much information. There are common errors that are useful to learn to help quickly understand the root cause. Clojure editors such as CIDER help navigation and information hiding. Tools like AvisoNovate/pretty reformat stack traces to make them easier to understand. Structure of a stack trace \u03bb\ufe0e The Clojure compiler will catch an error exception, unwrap, and re-throw exceptions up the call chain from where they originally occur. This provides a history of all the expressions called that lead to the exception. Exception in thread... should be at the top of the stack trace, followed by the call stack in descending chronological time TODO: example call stack Understanding Exception \u03bb\ufe0e An exception should provide a general context for the error and the assumed path to the error. IllegalArgumentException ClassCastException ArityException ClassNotFound Example Exceptions include: Don't know how to create ISeq from: clojure.lang.Keyword - a keyword was used when a sequence (list, vector) was expected Don't know how to create IFn from: clojure.lang.Integer - an expression was evaluated that started with a value (specifically an Integer) rather than a symbol that points to a function definition. Answer is often the first line \u03bb\ufe0e A stack trace is printed in descending time order, with the most recent call at the top of the stack. Between the Exception and the top of the call stack, most errors are quickly interpreted without the need to read the whole stack trace. Using the wrong kind of value \u03bb\ufe0e IllegalArgumentException is generated when using the wrong kind of value, e.g. using a value instead of a function name (symbol) Evaluating (1 2 3) will try and call 1 as a function as it is first in the list. As 1 is a value (integer) and not a function, so 1 does not implement the function interface, IFn . De-reference Values \u03bb\ufe0e Casting a value to a Future that has not been realised java.util.concurrent.Future Diagnosing Classpath issues \u03bb\ufe0e clojure -Spath > project-classpath.txt will write the output the project classpath to the project-classpath.txt file. The command will first download project dependencies that are not currently satisfied The output is a single line of text, with each path in the class path separated by a colon character, : SPC f f to open the file in Spacemacs Separate the classpath output into individual lines with this vim command ( : enters the command mode in the Emacs mini-buffer). This makes the file easier to read and run diff comparisons upon. : s /:/ \\ n / g Hint::Diff - compare differences between files \u03bb\ufe0e SPC D f f and selecting two files will open ediff and show a comparison. Navigate the changes using j and k . a to copy a change from the left buffer to the right buffer, b to copy right to left. Reading and understanding Clojure errors \u03bb\ufe0e Define a function that explicitly throws an exception using the throw function ( defn explicit-exception [ value ] ( throw ( ex-info ( str \"Invalid value: \" value ) { :value value }))) ( explicit-exception \"kaboom\" ) Execution error ( ExceptionInfo ) at user/explicit-exception ( REPL :2 ) . Invalid value : kaboom Deconstructing the error message Execution error: - in which Clojure phase the error occurred ExceptionInfo : - name of the class of the exception. ex-info internally creates an instance of clojure.lang.ExceptionInfo user/explicit-exception - name of the function where exception was thrown REPL:2 - path and line of the file where exception was thrown. REPL means there is no file, the definition was created at the REPL prompt, on line 2 Invalid value: kaboom : - error message thrown (the message passed to ex-info in this example) Generate an exception by calling the function with the incorrect number of arguments ( explicit-exception ) Execution error ( ArityException ) at user/eval137 ( REPL :1 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception Deconstructing the error message Execution error - the implicit execution error is the same as before ArityException - class of the exception, i.e. clojure.lang.ArityException user/eval137 - every form evaluated in the REPL internally creates a function, generating a name in the form eval1234 and immediately executes the expression. REPL:1 - error path is the first line of the REPL prompt Wrong number of args (0) passed to: user/explicit-exception - message generated from the exception Use an anonymous function to wrap the call to the expression, to provide an explicit name when evaluated (( fn named-for-context [] ( explicit-exception ))) Execution error ( ArityException ) at user/eval139$named-for-context ( REPL :2 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception The error message function now includes a specific name making the error message more useful as it is more obvious in the code as to where the error occurred. View the stack trace \u03bb\ufe0e *e is a dynamic var that always points to the last error in a running REPL process. Evaluate *e in the REPL to see the stack trace in detail, as an EDN hash-map user => e* # error { :cause \"Wrong number of args (0) passed to: user/explicit-exception\" :via [{ :type clojure.lang.ArityException :message \"Wrong number of args (0) passed to: user/explicit-exception\" :at [ clojure.lang.AFn throwArity \"AFn.java\" 429 ]}] :trace [[ clojure.lang.AFn throwArity \"AFn.java\" 429 ] [ clojure.lang.AFn invoke \"AFn.java\" 28 ] [ user$eval139$named-for-context__140 invoke \"NO_SOURCE_FILE\" 2 ] ... ]} Adding named-for-context to the execution, anything before this context should not be relevant. Now let's try a harder one: Stack trace for Lazy functions \u03bb\ufe0e ( map explicit-exception [ 1 ]) Error printing return value ( ExceptionInfo ) at user/explicit-exception ( NO_SOURCE_FILE :2 ) . Invalid value : 1 Error printing return value at the start of the error shows it's not a Execution error anymore. The code was executed and returned a value. clojure.core/map returns a lazy-seq and when the printer tries to print the result an exception is thrown. Use the *e dynamic var to see the full stack trace *e # error { :cause \"Invalid value: 1\" :data { :x 1 } :via [{ :type clojure.lang.ExceptionInfo :message nil :data # :clojure.error { :phase :print-eval-result } :at [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ]} { :type clojure.lang.ExceptionInfo :message \"Invalid value: 1\" :data { :value 1 } :at [ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ]}] :trace [[ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ] [ user$explicit_exception invoke \"NO_SOURCE_FILE\" 1 ] ;; 6 [ clojure.core$map$fn__5885 invoke \"core.clj\" 2757 ] ;; 5 [ clojure.lang.LazySeq sval \"LazySeq.java\" 42 ] [ clojure.lang.LazySeq seq \"LazySeq.java\" 51 ] ;; 4 [ clojure.lang.RT seq \"RT.java\" 535 ] [ clojure.core$seq__5420 invokeStatic \"core.clj\" 139 ] [ clojure.core$print_sequential invokeStatic \"core_print.clj\" 53 ] [ clojure.core$fn__7331 invokeStatic \"core_print.clj\" 174 ] [ clojure.core$fn__7331 invoke \"core_print.clj\" 174 ] [ clojure.lang.MultiFn invoke \"MultiFn.java\" 234 ] ;; 3 [ clojure.core$pr_on invokeStatic \"core.clj\" 3662 ] [ clojure.core$pr invokeStatic \"core.clj\" 3665 ] [ clojure.core$pr invoke \"core.clj\" 3665 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 154 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.core$apply invokeStatic \"core.clj\" 667 ] [ clojure.core$prn invokeStatic \"core.clj\" 3702 ] [ clojure.core$prn doInvoke \"core.clj\" 3702 ] ;; 2 [ clojure.lang.RestFn invoke \"RestFn.java\" 408 ] [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ] ;; 1 [ clojure.main$repl$fn__9121 invoke \"main.clj\" 458 ] [ clojure.main$repl invokeStatic \"main.clj\" 458 ] [ clojure.main$repl_opt invokeStatic \"main.clj\" 522 ] [ clojure.main$main invokeStatic \"main.clj\" 667 ] [ clojure.main$main doInvoke \"main.clj\" 616 ] [ clojure.lang.RestFn invoke \"RestFn.java\" 397 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 152 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.lang.Var applyTo \"Var.java\" 705 ] [ clojure.main main \"main.java\" 40 ]]} Deconstructing the stack trace Where clojure.main REPL starts the print parse clojure.main uses clojure.core/prn clojure.core/prn uses clojure.core/print-method . Note: a multimethod adds complexity to stacktraces print method invoked the method to evaluare the lazy sequence the lazy sequence was created inside a call to clojure.core/map The lazy sequence is called by explicit-exception clojure.core/munge is the function that converts namespaces with hyphens, i.e. explicit-exception into the name used on the Java class path, i.e. explicit_exception clojure.repl/pst to get a nice looking stacktrace print Reference \u03bb\ufe0e Clojure Error message catalogue contains example errors gathered by the Clojure community. Implementing interfaces Name Interface Example IFn Function anonymous function or symbol that points to a function definition ISeq Sequence list, result from sequence function e.g. map, filter, etc. IPersistentCollection Persistent Collection list, vector, hash-map or set Error Description Don't know how to create ISeq from: Expecting a sequence (list, vector) rather than the value Don't know how to create IFn from: Expecting a symbol name that points to a function definition","title":"Understanding Clojure errors"},{"location":"debug-clojure/understanding-errors/#understanding-clojure-errors","text":"When a run time error occurs in Clojure, a stack trace is generated which includes information from the Clojure code and the underlying Java platform. A stack trace can seem daunting as it provide so much information. There are common errors that are useful to learn to help quickly understand the root cause. Clojure editors such as CIDER help navigation and information hiding. Tools like AvisoNovate/pretty reformat stack traces to make them easier to understand.","title":"Understanding Clojure errors"},{"location":"debug-clojure/understanding-errors/#structure-of-a-stack-trace","text":"The Clojure compiler will catch an error exception, unwrap, and re-throw exceptions up the call chain from where they originally occur. This provides a history of all the expressions called that lead to the exception. Exception in thread... should be at the top of the stack trace, followed by the call stack in descending chronological time TODO: example call stack","title":"Structure of a stack trace"},{"location":"debug-clojure/understanding-errors/#understanding-exception","text":"An exception should provide a general context for the error and the assumed path to the error. IllegalArgumentException ClassCastException ArityException ClassNotFound Example Exceptions include: Don't know how to create ISeq from: clojure.lang.Keyword - a keyword was used when a sequence (list, vector) was expected Don't know how to create IFn from: clojure.lang.Integer - an expression was evaluated that started with a value (specifically an Integer) rather than a symbol that points to a function definition.","title":"Understanding Exception"},{"location":"debug-clojure/understanding-errors/#answer-is-often-the-first-line","text":"A stack trace is printed in descending time order, with the most recent call at the top of the stack. Between the Exception and the top of the call stack, most errors are quickly interpreted without the need to read the whole stack trace.","title":"Answer is often the first line"},{"location":"debug-clojure/understanding-errors/#using-the-wrong-kind-of-value","text":"IllegalArgumentException is generated when using the wrong kind of value, e.g. using a value instead of a function name (symbol) Evaluating (1 2 3) will try and call 1 as a function as it is first in the list. As 1 is a value (integer) and not a function, so 1 does not implement the function interface, IFn .","title":"Using the wrong kind of value"},{"location":"debug-clojure/understanding-errors/#de-reference-values","text":"Casting a value to a Future that has not been realised java.util.concurrent.Future","title":"De-reference Values"},{"location":"debug-clojure/understanding-errors/#diagnosing-classpath-issues","text":"clojure -Spath > project-classpath.txt will write the output the project classpath to the project-classpath.txt file. The command will first download project dependencies that are not currently satisfied The output is a single line of text, with each path in the class path separated by a colon character, : SPC f f to open the file in Spacemacs Separate the classpath output into individual lines with this vim command ( : enters the command mode in the Emacs mini-buffer). This makes the file easier to read and run diff comparisons upon. : s /:/ \\ n / g","title":"Diagnosing Classpath issues"},{"location":"debug-clojure/understanding-errors/#hintdiff-compare-differences-between-files","text":"SPC D f f and selecting two files will open ediff and show a comparison. Navigate the changes using j and k . a to copy a change from the left buffer to the right buffer, b to copy right to left.","title":"Hint::Diff - compare differences between files"},{"location":"debug-clojure/understanding-errors/#reading-and-understanding-clojure-errors","text":"Define a function that explicitly throws an exception using the throw function ( defn explicit-exception [ value ] ( throw ( ex-info ( str \"Invalid value: \" value ) { :value value }))) ( explicit-exception \"kaboom\" ) Execution error ( ExceptionInfo ) at user/explicit-exception ( REPL :2 ) . Invalid value : kaboom Deconstructing the error message Execution error: - in which Clojure phase the error occurred ExceptionInfo : - name of the class of the exception. ex-info internally creates an instance of clojure.lang.ExceptionInfo user/explicit-exception - name of the function where exception was thrown REPL:2 - path and line of the file where exception was thrown. REPL means there is no file, the definition was created at the REPL prompt, on line 2 Invalid value: kaboom : - error message thrown (the message passed to ex-info in this example) Generate an exception by calling the function with the incorrect number of arguments ( explicit-exception ) Execution error ( ArityException ) at user/eval137 ( REPL :1 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception Deconstructing the error message Execution error - the implicit execution error is the same as before ArityException - class of the exception, i.e. clojure.lang.ArityException user/eval137 - every form evaluated in the REPL internally creates a function, generating a name in the form eval1234 and immediately executes the expression. REPL:1 - error path is the first line of the REPL prompt Wrong number of args (0) passed to: user/explicit-exception - message generated from the exception Use an anonymous function to wrap the call to the expression, to provide an explicit name when evaluated (( fn named-for-context [] ( explicit-exception ))) Execution error ( ArityException ) at user/eval139$named-for-context ( REPL :2 ) . Wrong number of args ( 0 ) passed to : user/explicit-exception The error message function now includes a specific name making the error message more useful as it is more obvious in the code as to where the error occurred.","title":"Reading and understanding Clojure errors"},{"location":"debug-clojure/understanding-errors/#view-the-stack-trace","text":"*e is a dynamic var that always points to the last error in a running REPL process. Evaluate *e in the REPL to see the stack trace in detail, as an EDN hash-map user => e* # error { :cause \"Wrong number of args (0) passed to: user/explicit-exception\" :via [{ :type clojure.lang.ArityException :message \"Wrong number of args (0) passed to: user/explicit-exception\" :at [ clojure.lang.AFn throwArity \"AFn.java\" 429 ]}] :trace [[ clojure.lang.AFn throwArity \"AFn.java\" 429 ] [ clojure.lang.AFn invoke \"AFn.java\" 28 ] [ user$eval139$named-for-context__140 invoke \"NO_SOURCE_FILE\" 2 ] ... ]} Adding named-for-context to the execution, anything before this context should not be relevant. Now let's try a harder one:","title":"View the stack trace"},{"location":"debug-clojure/understanding-errors/#stack-trace-for-lazy-functions","text":"( map explicit-exception [ 1 ]) Error printing return value ( ExceptionInfo ) at user/explicit-exception ( NO_SOURCE_FILE :2 ) . Invalid value : 1 Error printing return value at the start of the error shows it's not a Execution error anymore. The code was executed and returned a value. clojure.core/map returns a lazy-seq and when the printer tries to print the result an exception is thrown. Use the *e dynamic var to see the full stack trace *e # error { :cause \"Invalid value: 1\" :data { :x 1 } :via [{ :type clojure.lang.ExceptionInfo :message nil :data # :clojure.error { :phase :print-eval-result } :at [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ]} { :type clojure.lang.ExceptionInfo :message \"Invalid value: 1\" :data { :value 1 } :at [ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ]}] :trace [[ user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2 ] [ user$explicit_exception invoke \"NO_SOURCE_FILE\" 1 ] ;; 6 [ clojure.core$map$fn__5885 invoke \"core.clj\" 2757 ] ;; 5 [ clojure.lang.LazySeq sval \"LazySeq.java\" 42 ] [ clojure.lang.LazySeq seq \"LazySeq.java\" 51 ] ;; 4 [ clojure.lang.RT seq \"RT.java\" 535 ] [ clojure.core$seq__5420 invokeStatic \"core.clj\" 139 ] [ clojure.core$print_sequential invokeStatic \"core_print.clj\" 53 ] [ clojure.core$fn__7331 invokeStatic \"core_print.clj\" 174 ] [ clojure.core$fn__7331 invoke \"core_print.clj\" 174 ] [ clojure.lang.MultiFn invoke \"MultiFn.java\" 234 ] ;; 3 [ clojure.core$pr_on invokeStatic \"core.clj\" 3662 ] [ clojure.core$pr invokeStatic \"core.clj\" 3665 ] [ clojure.core$pr invoke \"core.clj\" 3665 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 154 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.core$apply invokeStatic \"core.clj\" 667 ] [ clojure.core$prn invokeStatic \"core.clj\" 3702 ] [ clojure.core$prn doInvoke \"core.clj\" 3702 ] ;; 2 [ clojure.lang.RestFn invoke \"RestFn.java\" 408 ] [ clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442 ] ;; 1 [ clojure.main$repl$fn__9121 invoke \"main.clj\" 458 ] [ clojure.main$repl invokeStatic \"main.clj\" 458 ] [ clojure.main$repl_opt invokeStatic \"main.clj\" 522 ] [ clojure.main$main invokeStatic \"main.clj\" 667 ] [ clojure.main$main doInvoke \"main.clj\" 616 ] [ clojure.lang.RestFn invoke \"RestFn.java\" 397 ] [ clojure.lang.AFn applyToHelper \"AFn.java\" 152 ] [ clojure.lang.RestFn applyTo \"RestFn.java\" 132 ] [ clojure.lang.Var applyTo \"Var.java\" 705 ] [ clojure.main main \"main.java\" 40 ]]} Deconstructing the stack trace Where clojure.main REPL starts the print parse clojure.main uses clojure.core/prn clojure.core/prn uses clojure.core/print-method . Note: a multimethod adds complexity to stacktraces print method invoked the method to evaluare the lazy sequence the lazy sequence was created inside a call to clojure.core/map The lazy sequence is called by explicit-exception clojure.core/munge is the function that converts namespaces with hyphens, i.e. explicit-exception into the name used on the Java class path, i.e. explicit_exception clojure.repl/pst to get a nice looking stacktrace print","title":"Stack trace for Lazy functions"},{"location":"debug-clojure/understanding-errors/#reference","text":"Clojure Error message catalogue contains example errors gathered by the Clojure community. Implementing interfaces Name Interface Example IFn Function anonymous function or symbol that points to a function definition ISeq Sequence list, result from sequence function e.g. map, filter, etc. IPersistentCollection Persistent Collection list, vector, hash-map or set Error Description Don't know how to create ISeq from: Expecting a sequence (list, vector) rather than the value Don't know how to create IFn from: Expecting a symbol name that points to a function definition","title":"Reference"},{"location":"documentation/","text":"Documentation \u03bb\ufe0e View the docstring documentation for Clojure functions (and vars) and Javadoc for Java classes and methods , h a to find functions by approximate name, cider-apropos , h d view function signature, docstring and specification, cider-doc , h j open Java docs in a web browser, cider-javadoc LSP Documentation \u03bb\ufe0e , h l to describe the thing under the cursor, showing any relevant documentation. When this is a Clojure function then examples of use from clojuredocs.org are shown.","title":"Documentation"},{"location":"documentation/#documentation","text":"View the docstring documentation for Clojure functions (and vars) and Javadoc for Java classes and methods , h a to find functions by approximate name, cider-apropos , h d view function signature, docstring and specification, cider-doc , h j open Java docs in a web browser, cider-javadoc","title":"Documentation"},{"location":"documentation/#lsp-documentation","text":", h l to describe the thing under the cursor, showing any relevant documentation. When this is a Clojure function then examples of use from clojuredocs.org are shown.","title":"LSP Documentation"},{"location":"documentation/apropos/","text":"Find similar named functions with cider-apropos \u03bb\ufe0e , h a shows a helm pop-up with a search pattern, showing functions that are relevant to the search pattern. Requires REPL A REPL session must be connected to the project for cider-apropos to work Enter to select the function and its docstring is displayed.","title":"Apropos"},{"location":"documentation/apropos/#find-similar-named-functions-with-cider-apropos","text":", h a shows a helm pop-up with a search pattern, showing functions that are relevant to the search pattern. Requires REPL A REPL session must be connected to the project for cider-apropos to work Enter to select the function and its docstring is displayed.","title":"Find similar named functions with cider-apropos"},{"location":"documentation/cider-doc/","text":"Cider doc \u03bb\ufe0e View the documentation for function definitions and other vars, including links to browse the Clojure specification and source code. Evaluate a namespace to enable Help Help only works for special forms ( def , if , etc.) until any namespace from a project is first evaluated. , ' ( sesman-start ) to start or connect to a REPL process , e f with the cursor on the namespace definition in the source code buffer. This loads the clojure.core functions and vars and the required namespaces for the current namespace. Or , e b to evaluate a source code buffer if all source code in that namespace is syntactically correct. , h d shows the documentation for the current function or var under the cursor, or prompts for a function or var name. The documentation popup shows * the argument list of a function * meta data (version added, scope, etc) * doc-string describing the function or var * Clojure spec - argument, return specifications * Location and link to source code * Links to related functions Viewing the source code \u03bb\ufe0e Enter on the link to the source code will open the source in a separate buffer. Viewing the specification \u03bb\ufe0e Enter on the Browse Spec link will open the specification in a separate buffer. Clojuredocs examples \u03bb\ufe0e Clojuredocs is a website with the documentation for the Clojure Standard Library. Each entry also contains many code examples of using each function, contributed by the Clojure community.","title":"Cider-doc"},{"location":"documentation/cider-doc/#cider-doc","text":"View the documentation for function definitions and other vars, including links to browse the Clojure specification and source code. Evaluate a namespace to enable Help Help only works for special forms ( def , if , etc.) until any namespace from a project is first evaluated. , ' ( sesman-start ) to start or connect to a REPL process , e f with the cursor on the namespace definition in the source code buffer. This loads the clojure.core functions and vars and the required namespaces for the current namespace. Or , e b to evaluate a source code buffer if all source code in that namespace is syntactically correct. , h d shows the documentation for the current function or var under the cursor, or prompts for a function or var name. The documentation popup shows * the argument list of a function * meta data (version added, scope, etc) * doc-string describing the function or var * Clojure spec - argument, return specifications * Location and link to source code * Links to related functions","title":"Cider doc"},{"location":"documentation/cider-doc/#viewing-the-source-code","text":"Enter on the link to the source code will open the source in a separate buffer.","title":"Viewing the source code"},{"location":"documentation/cider-doc/#viewing-the-specification","text":"Enter on the Browse Spec link will open the specification in a separate buffer.","title":"Viewing the specification"},{"location":"documentation/cider-doc/#clojuredocs-examples","text":"Clojuredocs is a website with the documentation for the Clojure Standard Library. Each entry also contains many code examples of using each function, contributed by the Clojure community.","title":"Clojuredocs examples"},{"location":"documentation/comments/","text":"Spacemacs Comments \u03bb\ufe0e Meta , creates a line comment on a new line or adds a comment at the end of an existing line. g c c toggles a line commend for the current line, g c to toggle the selected region. Spacemacs comment key bindings \u03bb\ufe0e Spacemacs uses the same keybindings and commands to comment any programming language or mode. The character and style of comments is defined in each layer or package that layer includes. If a mode does not have a comment character, Spacemacs will prompt for one in the mode line. Key binding Description SPC ; ; Toggle comment current line SPC ; i i Toggle comment current line indented SPC ; p a Toggle comment paragraph g c c Toggle comment current line g c a p Toggle comment selected paragraphs g c SPC y Comment up to a line with avy g y Paste a commented copy of the current line above v select region g c Comment selected region M-; (any state) New comment line or add comment to end of line Evil-commentary layer Spacemacs uses the evil-commentary layer to provide a commenting tool for all other layers. Clojure LSP snippets \u03bb\ufe0e Logical sections within a namespace aid navigation and understanding, as well as identifying opportunities to refactor a namespace as it grows in size. comment-header and comment-section are Clojure LSP snippets defined in practicalli/clojure-lsp-config comment-header provides a comment block to describe the overall purpose of the namespace comment-section provides a comment block to demarcate sections of the namespace, such as helper functions, state, system, etc. Sections help identify groups of code that could be organised into their own namespace as the code grows. Clojure comments \u03bb\ufe0e Clojure uses line comments, the comment function and the #_ reader macro . Evaluating forms in Rich comments \u03bb\ufe0e Expressions contained within a (comment ,,,) form are not evaluated when a namespace is evaluated, i.e. , e b to evaluate the current buffer. So its a useful form for code only evaluated directly by the developer. Setting clojure-toplevel-inside-comment-form to true in the Clojure layer enables expressions to be evaluated within the (comment ,,,) form using the usual evaluation commands, (i.e. , e f ). ( clojure :variables clojure-toplevel-inside-comment-form t ) ( comment ;; Stop / restart application server ( app-server-start 8888 ) ( app-server-restart 8888 ) ( app-server-stop ) ;; OS environment variables / Java properties ( System/getenv \"PORT\" ) ( System/getProperties ) ) Example rich comment from Banking on Clojure project in Practicalli Clojure Web Services","title":"Comments"},{"location":"documentation/comments/#spacemacs-comments","text":"Meta , creates a line comment on a new line or adds a comment at the end of an existing line. g c c toggles a line commend for the current line, g c to toggle the selected region.","title":"Spacemacs Comments"},{"location":"documentation/comments/#spacemacs-comment-key-bindings","text":"Spacemacs uses the same keybindings and commands to comment any programming language or mode. The character and style of comments is defined in each layer or package that layer includes. If a mode does not have a comment character, Spacemacs will prompt for one in the mode line. Key binding Description SPC ; ; Toggle comment current line SPC ; i i Toggle comment current line indented SPC ; p a Toggle comment paragraph g c c Toggle comment current line g c a p Toggle comment selected paragraphs g c SPC y Comment up to a line with avy g y Paste a commented copy of the current line above v select region g c Comment selected region M-; (any state) New comment line or add comment to end of line Evil-commentary layer Spacemacs uses the evil-commentary layer to provide a commenting tool for all other layers.","title":"Spacemacs comment key bindings"},{"location":"documentation/comments/#clojure-lsp-snippets","text":"Logical sections within a namespace aid navigation and understanding, as well as identifying opportunities to refactor a namespace as it grows in size. comment-header and comment-section are Clojure LSP snippets defined in practicalli/clojure-lsp-config comment-header provides a comment block to describe the overall purpose of the namespace comment-section provides a comment block to demarcate sections of the namespace, such as helper functions, state, system, etc. Sections help identify groups of code that could be organised into their own namespace as the code grows.","title":"Clojure LSP snippets"},{"location":"documentation/comments/#clojure-comments","text":"Clojure uses line comments, the comment function and the #_ reader macro .","title":"Clojure comments"},{"location":"documentation/comments/#evaluating-forms-in-rich-comments","text":"Expressions contained within a (comment ,,,) form are not evaluated when a namespace is evaluated, i.e. , e b to evaluate the current buffer. So its a useful form for code only evaluated directly by the developer. Setting clojure-toplevel-inside-comment-form to true in the Clojure layer enables expressions to be evaluated within the (comment ,,,) form using the usual evaluation commands, (i.e. , e f ). ( clojure :variables clojure-toplevel-inside-comment-form t ) ( comment ;; Stop / restart application server ( app-server-start 8888 ) ( app-server-restart 8888 ) ( app-server-stop ) ;; OS environment variables / Java properties ( System/getenv \"PORT\" ) ( System/getProperties ) ) Example rich comment from Banking on Clojure project in Practicalli Clojure Web Services","title":"Evaluating forms in Rich comments"},{"location":"documentation/javadoc/","text":"Javadoc - Java API documentation \u03bb\ufe0e , h j shows javadoc information for a Java method or class, opening the relevant page on the Oracle website for Java. Include Java Sources \u03bb\ufe0e Include the Java JDK sources when starting the REPL, to be able to navigate to the source definitions of Java methods. Download the Java JDK sources or install via the operating system package manager, e.g. sudo apt install openjdk-17-source Use an alias that adds the sources as an :extra-deps via a :local/root :src/java17 alias includes the sources for Java 17 on the classpath, making them available for the Cider clj-find-var lookup. The alias assumes the sources are located at /usr/lib/jvm/openjdk-17/lib/src.zip clojure -M:src/java17:repl/rebel starts a rich terminal UI REPL including the Java sources on the class path. Navigate Java Source code \u03bb\ufe0e , g g to run the command clj-find-var which shows Clojure LSP hijacks the , g g key binding, so use SPC SPC clj-find-var instead. Selecting a specific Java package (namespace) will open the Java source code in a buffer Clojure LSP Java Sources \u03bb\ufe0e :source-aliases key in the Clojure LSP configuration can be used to add Java JDK sources to the Clojure LSP class path. An alias in the project deps.edn can be used to include the Java JDK sources { :source-paths [ \"src\" \"test\" \"develop\" ] :source-aliases # { \":src/java17\" }} Clojure LSP currently doesn't use the user level deps.edn file, so the alias must be in the project deps.edn file.","title":"Javadoc"},{"location":"documentation/javadoc/#javadoc-java-api-documentation","text":", h j shows javadoc information for a Java method or class, opening the relevant page on the Oracle website for Java.","title":"Javadoc - Java API documentation"},{"location":"documentation/javadoc/#include-java-sources","text":"Include the Java JDK sources when starting the REPL, to be able to navigate to the source definitions of Java methods. Download the Java JDK sources or install via the operating system package manager, e.g. sudo apt install openjdk-17-source Use an alias that adds the sources as an :extra-deps via a :local/root :src/java17 alias includes the sources for Java 17 on the classpath, making them available for the Cider clj-find-var lookup. The alias assumes the sources are located at /usr/lib/jvm/openjdk-17/lib/src.zip clojure -M:src/java17:repl/rebel starts a rich terminal UI REPL including the Java sources on the class path.","title":"Include Java Sources"},{"location":"documentation/javadoc/#navigate-java-source-code","text":", g g to run the command clj-find-var which shows Clojure LSP hijacks the , g g key binding, so use SPC SPC clj-find-var instead. Selecting a specific Java package (namespace) will open the Java source code in a buffer","title":"Navigate Java Source code"},{"location":"documentation/javadoc/#clojure-lsp-java-sources","text":":source-aliases key in the Clojure LSP configuration can be used to add Java JDK sources to the Clojure LSP class path. An alias in the project deps.edn can be used to include the Java JDK sources { :source-paths [ \"src\" \"test\" \"develop\" ] :source-aliases # { \":src/java17\" }} Clojure LSP currently doesn't use the user level deps.edn file, so the alias must be in the project deps.edn file.","title":"Clojure LSP Java Sources"},{"location":"emacs-lisp/","text":"Emacs development \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Just very rough notes at the moment there are two aspects to Emacs Lisp: The basic language itself, and the interaction with Emacs. Separate these two in your mind. Focus first on the former (should not be too hard as you learned Lisp in the past). Use sites like Exercism to practice. Once you have a grip on the basics (loops, functions, variables, conditionals, etc), move on to the aspects that involve Emacs itself (changing text, switching buffers, etc). This is vast, and you'll likely get lost in a sea of details. There are a few things you should understand really well, as you'll use them often. They are: interactive save-excursion save-restriction hooks advising functions with-current-buffer Once you understand these, instead of spending all your time reading the ELisp reference, think of simple problems you have with Emacs that you want to write and try solving them with Elisp. You'll likely need help on some of the steps, and that's where Google can help you. Examples of problems I solved to practice my Elisp: When you use org-capture, and you write text in the last line of the capture buffer, it does not put a newline at the end, and so if I had any headlines after the capture position, that headline would no longer be a headline. The fix was to make a hook that checks if there are any newlines, and if not, add one at the end of the capture. When I capture and refile in one step, it doesn't save the file the entry was refiled to. But if I capture without refiling, it does. I fixed this inconsistency. When writing minutes during a meeting (in an org file), if a TODO for someone comes up, I want to do a capture that will look for a headline called TODOs (under the top level headline I am in) and place the TODO in there. Each meeting has its own TODOs headline, and it should go to the one for the current meeting in the file. This involved writing a function that goes up the tree to the top level, and looks for a child called TODOs. Kill all buffers of a certain mode (there may be an internal function that already does this, but I did not know it). Finally, make sure you know the following keybindings: C-x C-e (evaluate expression) C-h v (look up the meaning and value of a variable) C-h f (look up the description of an inbuilt function). Some useful functions \u03bb\ufe0e (info \"(elisp) Lisp Data Types\") too many to easily count :) (info \"(elisp) Buffers\") way too many to easily count (info \"(elisp) A Sample Function Description\") yes: (defun thing (a b &rest l) \u2026) (info \"(elisp) Backquote\") ` and , are pretty simple once you get the hang of them. try them out :) (defmacro simple (a b c) `(,b ,a ,c)) i don't think reddit is the best place for that kind of documentation. you should read the elisp info manual: (info \"elisp\"). Resources \u03bb\ufe0e Learn Emacs Lisp while customizing Emacs Learning Emacs Lisp - Elisp code examples for common tasks Ergo Emacs - How to learn Emacs Lisp Ergo Emacs Visual Tutorial Exercisim: Lisp track An Introduction to Programming in Emacs Lisp - gnu.org An introduction to Programming in Emacs Lisp - comes with Emacs, may be an additional package (C-h i or SPC h T e ) Emacs Lisp Development Tips with John Wiegley - Sacha Chua Learn Emacs Lisp - Emacs Wiki Learn elisp in Y minutes LearnXInYMinutes.com Emergency Elip Emacs Tutor 2 http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/ https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/ https://web.archive.org/web/20140912224825/http://cjohansen.no/an-introduction-to-elisp http://ergoemacs.org/emacs/elisp.html Hacking CIDER \u03bb\ufe0e CIDER overview Hacking CIDER General Lisp resources \u03bb\ufe0e Land of Lisp (commercial) Practical Common Lisp","title":"Emacs development"},{"location":"emacs-lisp/#emacs-development","text":"","title":"Emacs development"},{"location":"emacs-lisp/#todowork-in-progress-sorry","text":"Just very rough notes at the moment there are two aspects to Emacs Lisp: The basic language itself, and the interaction with Emacs. Separate these two in your mind. Focus first on the former (should not be too hard as you learned Lisp in the past). Use sites like Exercism to practice. Once you have a grip on the basics (loops, functions, variables, conditionals, etc), move on to the aspects that involve Emacs itself (changing text, switching buffers, etc). This is vast, and you'll likely get lost in a sea of details. There are a few things you should understand really well, as you'll use them often. They are: interactive save-excursion save-restriction hooks advising functions with-current-buffer Once you understand these, instead of spending all your time reading the ELisp reference, think of simple problems you have with Emacs that you want to write and try solving them with Elisp. You'll likely need help on some of the steps, and that's where Google can help you. Examples of problems I solved to practice my Elisp: When you use org-capture, and you write text in the last line of the capture buffer, it does not put a newline at the end, and so if I had any headlines after the capture position, that headline would no longer be a headline. The fix was to make a hook that checks if there are any newlines, and if not, add one at the end of the capture. When I capture and refile in one step, it doesn't save the file the entry was refiled to. But if I capture without refiling, it does. I fixed this inconsistency. When writing minutes during a meeting (in an org file), if a TODO for someone comes up, I want to do a capture that will look for a headline called TODOs (under the top level headline I am in) and place the TODO in there. Each meeting has its own TODOs headline, and it should go to the one for the current meeting in the file. This involved writing a function that goes up the tree to the top level, and looks for a child called TODOs. Kill all buffers of a certain mode (there may be an internal function that already does this, but I did not know it). Finally, make sure you know the following keybindings: C-x C-e (evaluate expression) C-h v (look up the meaning and value of a variable) C-h f (look up the description of an inbuilt function).","title":"TODO::work in progress, sorry"},{"location":"emacs-lisp/#some-useful-functions","text":"(info \"(elisp) Lisp Data Types\") too many to easily count :) (info \"(elisp) Buffers\") way too many to easily count (info \"(elisp) A Sample Function Description\") yes: (defun thing (a b &rest l) \u2026) (info \"(elisp) Backquote\") ` and , are pretty simple once you get the hang of them. try them out :) (defmacro simple (a b c) `(,b ,a ,c)) i don't think reddit is the best place for that kind of documentation. you should read the elisp info manual: (info \"elisp\").","title":"Some useful functions"},{"location":"emacs-lisp/#resources","text":"Learn Emacs Lisp while customizing Emacs Learning Emacs Lisp - Elisp code examples for common tasks Ergo Emacs - How to learn Emacs Lisp Ergo Emacs Visual Tutorial Exercisim: Lisp track An Introduction to Programming in Emacs Lisp - gnu.org An introduction to Programming in Emacs Lisp - comes with Emacs, may be an additional package (C-h i or SPC h T e ) Emacs Lisp Development Tips with John Wiegley - Sacha Chua Learn Emacs Lisp - Emacs Wiki Learn elisp in Y minutes LearnXInYMinutes.com Emergency Elip Emacs Tutor 2 http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/ https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/ https://web.archive.org/web/20140912224825/http://cjohansen.no/an-introduction-to-elisp http://ergoemacs.org/emacs/elisp.html","title":"Resources"},{"location":"emacs-lisp/#hacking-cider","text":"CIDER overview Hacking CIDER","title":"Hacking CIDER"},{"location":"emacs-lisp/#general-lisp-resources","text":"Land of Lisp (commercial) Practical Common Lisp","title":"General Lisp resources"},{"location":"encryption/","text":"Encryption in Emacs - EasyPG Assistant \u03bb\ufe0e EasyPG Assistant provides the following features. Key management. Cryptographic operations on regions. Cryptographic operations on files. Dired integration. Mail-mode integration. Automatic encryption/decryption of *.gpg files. EasyPG Assistant commands are prefixed by \u2018epa-\u2019. For example, SPC SPC epa-list-keys browse your keyring SPC SPC epa-sign-region create a cleartext signature of the region SPC SPC epa-encrypt-file encrypt a file automatic encryption/decryption of *.gpg files is configured in Spacemacs Common uses \u03bb\ufe0e Encrypting org mode files Encrypting personal access tokens and passwords, e.g authinfo.gpg","title":"Encryption in Emacs - EasyPG Assistant"},{"location":"encryption/#encryption-in-emacs-easypg-assistant","text":"EasyPG Assistant provides the following features. Key management. Cryptographic operations on regions. Cryptographic operations on files. Dired integration. Mail-mode integration. Automatic encryption/decryption of *.gpg files. EasyPG Assistant commands are prefixed by \u2018epa-\u2019. For example, SPC SPC epa-list-keys browse your keyring SPC SPC epa-sign-region create a cleartext signature of the region SPC SPC epa-encrypt-file encrypt a file automatic encryption/decryption of *.gpg files is configured in Spacemacs","title":"Encryption in Emacs - EasyPG Assistant"},{"location":"encryption/#common-uses","text":"Encrypting org mode files Encrypting personal access tokens and passwords, e.g authinfo.gpg","title":"Common uses"},{"location":"encryption/create-gpg-key/","text":"Creating a gpg key \u03bb\ufe0e Create a key gpg --gen-key There\u2019s a simple wizard that lets you set the encryption type, and asks for your name, email address and other comments. Those details will be associated with your key. Next, you\u2019ll be asked to create a passphrase. This is like the password to your secret key. If you lose it, you\u2019ll have no access to any of the information encrypted with this key. So don\u2019t ever lose it\u2026 Here\u2019s how this flow looks like: ~ $ gpg --gen-key gpg (GnuPG) 1.4.19; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire <n> = key expires in n days <n>w = key expires in n weeks <n>m = key expires in n months <n>y = key expires in n years Key is valid for? (0) Key does not expire at all Is this correct? (y/N) y You need a user ID to identify your key; the software constructs the user ID from the Real Name, Comment and Email Address in this form: \"John Practicalli <noreply@practical.li>\" Real name: Jane Roe Email address: jane@example.com Comment: lorem ipsum You selected this USER-ID: \"Jane Roe (lorem ipsum) <jane@example.com>\" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O You need a Passphrase to protect your secret key. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. ..........+++++ .+++++ We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. ..........+++++ ...+++++ gpg: key 86B62C98 marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u pub 2048R/86B62C98 2016-02-17 Key fingerprint = 42FD C031 BD51 4CC8 7C02 EA14 35D4 80A2 86B6 2C98 uid Jane Roe (lorem ipsum) <jane@example.com> sub 2048R/8C0D5E5D 2016-02-17 ~ $ Now that you've created a key, you can go ahead and sign the .authinfo file. Sign and encrypt the .authinfo file1 ~ $ gpg -se .authinfo You'll be asked for your passphrase. Enter it, and the .authinfo will be signed, and renamed to .authinfo.gpg EmacsWiki suggests to limit permission to this file. I find it important: ~ $ chmod 600 .authinfo.gpg TODO::work in progress, sorry \u03bb\ufe0e Specifying encrypt-to account \u03bb\ufe0e TODO: Add a comment with who the file is encrypted to? If using symmetrical encryption, it seems no. # -*- epa-file-encrypt-to: (\"hacking@practical.li\") -*- Encrypting the file uses GnuPG , free cryptographic software from the GNU Project which helps ensure the confidentiality, integrity and assurance of data. Is gpg --gen-key necessary before using gpg-agent for .authinfo.gpg? It would seem not. Add .authinfo to keyring \u03bb\ufe0e With the .authinfo.pgp file in they keyring, it will be unlocked each time you login to the operating system with your usual login account. Magit Forge will them be able to access the token until you logout of your operating system. TODO: Is this required if the file is encrypted via Emacs? org-mode: encrypting org files Configuring Forge - Forge uses the same method to authenticate.","title":"Creating a gpg key"},{"location":"encryption/create-gpg-key/#creating-a-gpg-key","text":"Create a key gpg --gen-key There\u2019s a simple wizard that lets you set the encryption type, and asks for your name, email address and other comments. Those details will be associated with your key. Next, you\u2019ll be asked to create a passphrase. This is like the password to your secret key. If you lose it, you\u2019ll have no access to any of the information encrypted with this key. So don\u2019t ever lose it\u2026 Here\u2019s how this flow looks like: ~ $ gpg --gen-key gpg (GnuPG) 1.4.19; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire <n> = key expires in n days <n>w = key expires in n weeks <n>m = key expires in n months <n>y = key expires in n years Key is valid for? (0) Key does not expire at all Is this correct? (y/N) y You need a user ID to identify your key; the software constructs the user ID from the Real Name, Comment and Email Address in this form: \"John Practicalli <noreply@practical.li>\" Real name: Jane Roe Email address: jane@example.com Comment: lorem ipsum You selected this USER-ID: \"Jane Roe (lorem ipsum) <jane@example.com>\" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O You need a Passphrase to protect your secret key. We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. ..........+++++ .+++++ We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. ..........+++++ ...+++++ gpg: key 86B62C98 marked as ultimately trusted public and secret key created and signed. gpg: checking the trustdb gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 2 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 2u pub 2048R/86B62C98 2016-02-17 Key fingerprint = 42FD C031 BD51 4CC8 7C02 EA14 35D4 80A2 86B6 2C98 uid Jane Roe (lorem ipsum) <jane@example.com> sub 2048R/8C0D5E5D 2016-02-17 ~ $ Now that you've created a key, you can go ahead and sign the .authinfo file. Sign and encrypt the .authinfo file1 ~ $ gpg -se .authinfo You'll be asked for your passphrase. Enter it, and the .authinfo will be signed, and renamed to .authinfo.gpg EmacsWiki suggests to limit permission to this file. I find it important: ~ $ chmod 600 .authinfo.gpg","title":"Creating a gpg key"},{"location":"encryption/create-gpg-key/#todowork-in-progress-sorry","text":"","title":"TODO::work in progress, sorry"},{"location":"encryption/create-gpg-key/#specifying-encrypt-to-account","text":"TODO: Add a comment with who the file is encrypted to? If using symmetrical encryption, it seems no. # -*- epa-file-encrypt-to: (\"hacking@practical.li\") -*- Encrypting the file uses GnuPG , free cryptographic software from the GNU Project which helps ensure the confidentiality, integrity and assurance of data. Is gpg --gen-key necessary before using gpg-agent for .authinfo.gpg? It would seem not.","title":"Specifying encrypt-to account"},{"location":"encryption/create-gpg-key/#add-authinfo-to-keyring","text":"With the .authinfo.pgp file in they keyring, it will be unlocked each time you login to the operating system with your usual login account. Magit Forge will them be able to access the token until you logout of your operating system. TODO: Is this required if the file is encrypted via Emacs? org-mode: encrypting org files Configuring Forge - Forge uses the same method to authenticate.","title":"Add .authinfo to keyring"},{"location":"evaluating-clojure/","text":"Evaluating Clojure \u03bb\ufe0e Practicalli recommends evaluating Clojure expressions in the source code buffer, which displays the results next to the expression until you move the cursor. , e f evaluates the top-level expression at cursor. , e p f evaluates the top-level expression at cursor and pretty prints the result in a separate buffer. Useful for results that are collections and nested collections. Use the cider inspector for large data sets. , ++semi-colon++ evaluates the top-level expression at cursor and add the result as a comment. Useful for a design journal and when exploring a code base. Review the evaluating expressions page for more examples and a deeper explanation. Pretty Print results \u03bb\ufe0e Pretty Print is a common term for displaying code and evaluation results in an expanded structure that is easier to read. Nested data structures and other larger results from evaluation may not be so easily read by a human. , e p e displays the evaluation result from evaluating the last s-expression in a separate popup buffer window , e p f is the same, but for the top level expression , e p ++semi-colon++ and , e p ++semi-colon++ pretty print results as a comment under the evaluated form. Displaying large results , e p f or , e p e pretty prints the results into a new buffer. This is excellent for evaluating expressions that return a large result, eg. a large map. Keep the Cider Inspector buffer open to see the results of further evaluation commands, until the inspector buffer is closed. , d v the cider-inspector is a great way to navigate through a large data structure, especially if it is nested. Quick reference \u03bb\ufe0e , e menu provides many different ways of evaluating parts of an expression, or a complete expression. Meta + Enter e in holy mode. Evil Normal Description , e ++semi-colon++ Evaluate the current expression and print the result as a comment , e b Evaluate all the code in the current buffer , e e Evaluate the previous expression and print the result , e f Evaluate the current expression and print the result , e p ++semi-colon++ Pretty print result of the top-level expression as comment , e p : Pretty print result of the top-level expression as comment , e p f Pretty print result of the top-level expression in a new buffer , e p e Pretty print result of the last expression in a new buffer , e r Evaluate code within the highlighted region , e w Evaluate the previous expression and replace it with the result , T e Toggle Enlighten mode, showing intermediate values","title":"Evaluating Clojure"},{"location":"evaluating-clojure/#evaluating-clojure","text":"Practicalli recommends evaluating Clojure expressions in the source code buffer, which displays the results next to the expression until you move the cursor. , e f evaluates the top-level expression at cursor. , e p f evaluates the top-level expression at cursor and pretty prints the result in a separate buffer. Useful for results that are collections and nested collections. Use the cider inspector for large data sets. , ++semi-colon++ evaluates the top-level expression at cursor and add the result as a comment. Useful for a design journal and when exploring a code base. Review the evaluating expressions page for more examples and a deeper explanation.","title":"Evaluating Clojure"},{"location":"evaluating-clojure/#pretty-print-results","text":"Pretty Print is a common term for displaying code and evaluation results in an expanded structure that is easier to read. Nested data structures and other larger results from evaluation may not be so easily read by a human. , e p e displays the evaluation result from evaluating the last s-expression in a separate popup buffer window , e p f is the same, but for the top level expression , e p ++semi-colon++ and , e p ++semi-colon++ pretty print results as a comment under the evaluated form. Displaying large results , e p f or , e p e pretty prints the results into a new buffer. This is excellent for evaluating expressions that return a large result, eg. a large map. Keep the Cider Inspector buffer open to see the results of further evaluation commands, until the inspector buffer is closed. , d v the cider-inspector is a great way to navigate through a large data structure, especially if it is nested.","title":"Pretty Print results"},{"location":"evaluating-clojure/#quick-reference","text":", e menu provides many different ways of evaluating parts of an expression, or a complete expression. Meta + Enter e in holy mode. Evil Normal Description , e ++semi-colon++ Evaluate the current expression and print the result as a comment , e b Evaluate all the code in the current buffer , e e Evaluate the previous expression and print the result , e f Evaluate the current expression and print the result , e p ++semi-colon++ Pretty print result of the top-level expression as comment , e p : Pretty print result of the top-level expression as comment , e p f Pretty print result of the top-level expression in a new buffer , e p e Pretty print result of the last expression in a new buffer , e r Evaluate code within the highlighted region , e w Evaluate the previous expression and replace it with the result , T e Toggle Enlighten mode, showing intermediate values","title":"Quick reference"},{"location":"evaluating-clojure/enlighten/","text":"Showing Intermediary values - Enlighten mode \u03bb\ufe0e As a homage to LightTable live evaluation, you can enable enlighten minor mode to show the intermediary values during evaluation. Evil Normal Description , T e Toggle Enlighten mode, showing intermediate values This provides a basic version of the Cider inspector which is always on (until you toggle it off).","title":"Intermediate values"},{"location":"evaluating-clojure/enlighten/#showing-intermediary-values-enlighten-mode","text":"As a homage to LightTable live evaluation, you can enable enlighten minor mode to show the intermediary values during evaluation. Evil Normal Description , T e Toggle Enlighten mode, showing intermediate values This provides a basic version of the Cider inspector which is always on (until you toggle it off).","title":"Showing Intermediary values - Enlighten mode"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/","text":"Evaluate in the REPL Buffer \u03bb\ufe0e If you are used to working directly in the REPL, then you can easily open and work in a REPL buffer. You will need a Clojure project open and must have started a REPL. , s a toggles between the REPL buffer and a source code buffer. The REPL buffer will be shown in a new window if it is not currently being displayed. Evaluate in the source file buffers Evaluating code source file buffers is typically more effective as the code is saved to a file. The whole buffer can be evaluated, , e b or just a specific expression, , e f . Even nested expressions can be evaluated, , e e . Expressions results can be added as a comment, , e ; , to have a record of results and results can also be pretty printed , e P . Change REPL buffer namespace \u03bb\ufe0e user is the default namespace of the REPL. This namespace includes the doc and source functions from clojure.repl . This namespace is different to that of your project, so you will need to change the namespace of the REPL before calling any code in a project. , s n from the source code buffer will change the REPL namespace to the same as the source code namespace. The REPL prompt should now show the namespace you have changed into. Using the REPL buffer to evaluate \u03bb\ufe0e i for Evil insert state to use the REPL buffer. Type in expressions at the REPL prompt and press RET to evaluate them. C-RET to add a new line and write an expression over multiple lines. RET to evaluate the expression when ready. C-j and C-k in Evil normal state cycle through the history of expressions entered in the REPL buffer. Send expressions to the REPL buffer \u03bb\ufe0e , s f will send the current expression to the REPL to be evaluated. To call a function, it must be in the namespace the REPL is currently set to. Or you can send a function definition to the REPL before and then you are able to call that function. , s f will send the current function definition to the REPL. Then you can either call that function from the REPL buffer or use , e f to send an expression that calls the function to the REPL buffer. Changing the namespace in the REPL buffer \u03bb\ufe0e The in-ns function will change the REPL namespace to that specified in its argument. For example: (in-ns 'spacemacs-workshop.core) in the REPL buffer will change to the spacemacs-workshop.core namespace. REPL Buffer shortcut menu \u03bb\ufe0e , at the start of a line in Evil Insert state will open a list of command shortcuts for the REPL. Clojure send to REPL menu \u03bb\ufe0e Clojure send to REPL - quit sub menu \u03bb\ufe0e Clojure REPL tools , s u adds the REPL utility functions apropos , dir , dir-fn , doc , find-doc and source into the current REPL namespace. These REPL utility functions are included in the user namespace by default. See the clojure.repl api documentation for full details","title":"Evaluate in the REPL Buffer"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#evaluate-in-the-repl-buffer","text":"If you are used to working directly in the REPL, then you can easily open and work in a REPL buffer. You will need a Clojure project open and must have started a REPL. , s a toggles between the REPL buffer and a source code buffer. The REPL buffer will be shown in a new window if it is not currently being displayed. Evaluate in the source file buffers Evaluating code source file buffers is typically more effective as the code is saved to a file. The whole buffer can be evaluated, , e b or just a specific expression, , e f . Even nested expressions can be evaluated, , e e . Expressions results can be added as a comment, , e ; , to have a record of results and results can also be pretty printed , e P .","title":"Evaluate in the REPL Buffer"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#change-repl-buffer-namespace","text":"user is the default namespace of the REPL. This namespace includes the doc and source functions from clojure.repl . This namespace is different to that of your project, so you will need to change the namespace of the REPL before calling any code in a project. , s n from the source code buffer will change the REPL namespace to the same as the source code namespace. The REPL prompt should now show the namespace you have changed into.","title":"Change REPL buffer namespace"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#using-the-repl-buffer-to-evaluate","text":"i for Evil insert state to use the REPL buffer. Type in expressions at the REPL prompt and press RET to evaluate them. C-RET to add a new line and write an expression over multiple lines. RET to evaluate the expression when ready. C-j and C-k in Evil normal state cycle through the history of expressions entered in the REPL buffer.","title":"Using the REPL buffer to evaluate"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#send-expressions-to-the-repl-buffer","text":", s f will send the current expression to the REPL to be evaluated. To call a function, it must be in the namespace the REPL is currently set to. Or you can send a function definition to the REPL before and then you are able to call that function. , s f will send the current function definition to the REPL. Then you can either call that function from the REPL buffer or use , e f to send an expression that calls the function to the REPL buffer.","title":"Send expressions to the REPL buffer"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#changing-the-namespace-in-the-repl-buffer","text":"The in-ns function will change the REPL namespace to that specified in its argument. For example: (in-ns 'spacemacs-workshop.core) in the REPL buffer will change to the spacemacs-workshop.core namespace.","title":"Changing the namespace in the REPL buffer"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#repl-buffer-shortcut-menu","text":", at the start of a line in Evil Insert state will open a list of command shortcuts for the REPL.","title":"REPL Buffer shortcut menu"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#clojure-send-to-repl-menu","text":"","title":"Clojure send to REPL menu"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#clojure-send-to-repl-quit-sub-menu","text":"Clojure REPL tools , s u adds the REPL utility functions apropos , dir , dir-fn , doc , find-doc and source into the current REPL namespace. These REPL utility functions are included in the user namespace by default. See the clojure.repl api documentation for full details","title":"Clojure send to REPL - quit sub menu"},{"location":"evaluating-clojure/expressions/","text":"Evaluating individual Expressions \u03bb\ufe0e Evaluating individual expressions is a very effective way to test the actions of your code as you write it. This approach helps keep expressions as simple as possible, leading to more effective Clojure code. , e f is the most commonly used command and evaluates the current top-level expression. The cursor can be anywhere inside the expression or nested expressions. When defining functions, , e f to evaluate them. Then underneath the function definition, write a call to that function with appropriate arguments and evaluate that expression to test your function. Deconstructing / Exploring a code base \u03bb\ufe0e Understanding Clojure code can sometime require you to evaluate only parts of an expression. These are the commands that help with that. , e e evaluates the expression before the cursor and is very useful for evaluating nested expressions. You can also copy a nested expression SPC v v and paste it outside the parent expression and evaluate it with different values to see how it behaves. , e ++semi-colon++ evaluates the current top-level expression and prints result as a comment. Very useful when developing new code or working with less familiar functions and useful to keep a living document in a design journal or spike. Replace code with result \u03bb\ufe0e A powerful way to understand your code or explain to others what an expression does is to replace the code with result of its evaluation. This technique is especially useful for expressions that are nested within another expressions. , e w - replace previous expression with its return value u to undo these changes and return to the original code.","title":"Expressions"},{"location":"evaluating-clojure/expressions/#evaluating-individual-expressions","text":"Evaluating individual expressions is a very effective way to test the actions of your code as you write it. This approach helps keep expressions as simple as possible, leading to more effective Clojure code. , e f is the most commonly used command and evaluates the current top-level expression. The cursor can be anywhere inside the expression or nested expressions. When defining functions, , e f to evaluate them. Then underneath the function definition, write a call to that function with appropriate arguments and evaluate that expression to test your function.","title":"Evaluating individual Expressions"},{"location":"evaluating-clojure/expressions/#deconstructing-exploring-a-code-base","text":"Understanding Clojure code can sometime require you to evaluate only parts of an expression. These are the commands that help with that. , e e evaluates the expression before the cursor and is very useful for evaluating nested expressions. You can also copy a nested expression SPC v v and paste it outside the parent expression and evaluate it with different values to see how it behaves. , e ++semi-colon++ evaluates the current top-level expression and prints result as a comment. Very useful when developing new code or working with less familiar functions and useful to keep a living document in a design journal or spike.","title":"Deconstructing / Exploring a code base"},{"location":"evaluating-clojure/expressions/#replace-code-with-result","text":"A powerful way to understand your code or explain to others what an expression does is to replace the code with result of its evaluation. This technique is especially useful for expressions that are nested within another expressions. , e w - replace previous expression with its return value u to undo these changes and return to the original code.","title":"Replace code with result"},{"location":"evaluating-clojure/inspect/","text":"Inspect Clojure values \u03bb\ufe0e , d v is the Cider Inspector menu used to efficiently page through large data sets and easily navigate through nested data structures. The Cider Inspector opens in a new buffer that shows the underlying type of the value and all of its details. of the current symbol under the cursor. This provides a very readable way to understand the value and browse through larger data sets. The Cider Inspector is used in the REPL driven development with Spacemacs video . Following evaluation results in Cider Inspector The Cider Inspector will show the results of any evaluation, from , e or , d v menus, whilst the buffer is visible. , d v f to evaluate a top level expression and show the results in the Cider Inspector. n and p page through the data if the number of elements in the data set is greater than the page size (default 32), ( cider-inspector-next-page , cider-inspector-prev-page ) TAB and S-TAB to navigate forward and backward through the elements that can be further inspected, ( cider-inspector-next-inspectable-object , cider-inspector-previous-inspectable-object ). RET to inspect the current value under the cursor ( cider-inspector-operate-on-point ) r to refresh the inspector view ( cider-inspector-refresh ) s interactively sets the page size, updating how many elements are shown in one page of the cider inspector buffer, ( cider-inspector-set-page-size ). q quits the cider inspector buffer Inspecting simple values \u03bb\ufe0e Inspecting a number or character shows the underlying type, the value and properties of that type Inspecting Collections \u03bb\ufe0e Inspect a collection shows the underlying type, contents of that collection and index (where applicable). Only the elements are shown. The characters of the overall collection itself are not show, only the underlying type of collection (vector, map, lazy sequence, etc.). If there are collections within collections then those values can be navigated too. RET on an nested element in a collection will inspect that element in the same detail ( cider-inspector-operate-on-point ). L to back to parent of a nested element ( cider-inspector-pop ). Inspecting mutable values \u03bb\ufe0e Mutable containers, atom , ref , can also be inspected. The class of the container is shown, along with the class of the value it contains along with its elements. Inspecting an atom or ref gives the value at the current time. The inspector does not update if the value of the atom or ref is updated. Use r in the inspector buffer to refresh or restart the inspector with , d v each time you want to check if the value has changed. Inspecting Var meta data \u03bb\ufe0e cider-inspect-last-result shows the result of the the last expression evaluated. When this is a var from a def expression then meta information is shown as well as the class type and summary of the value. Meta data includes the file and position of the code, the name of the var and which namespace it is defined in. Inspecting a defn also shows the argument list as part of the meta data.","title":"Inspect Values"},{"location":"evaluating-clojure/inspect/#inspect-clojure-values","text":", d v is the Cider Inspector menu used to efficiently page through large data sets and easily navigate through nested data structures. The Cider Inspector opens in a new buffer that shows the underlying type of the value and all of its details. of the current symbol under the cursor. This provides a very readable way to understand the value and browse through larger data sets. The Cider Inspector is used in the REPL driven development with Spacemacs video . Following evaluation results in Cider Inspector The Cider Inspector will show the results of any evaluation, from , e or , d v menus, whilst the buffer is visible. , d v f to evaluate a top level expression and show the results in the Cider Inspector. n and p page through the data if the number of elements in the data set is greater than the page size (default 32), ( cider-inspector-next-page , cider-inspector-prev-page ) TAB and S-TAB to navigate forward and backward through the elements that can be further inspected, ( cider-inspector-next-inspectable-object , cider-inspector-previous-inspectable-object ). RET to inspect the current value under the cursor ( cider-inspector-operate-on-point ) r to refresh the inspector view ( cider-inspector-refresh ) s interactively sets the page size, updating how many elements are shown in one page of the cider inspector buffer, ( cider-inspector-set-page-size ). q quits the cider inspector buffer","title":"Inspect Clojure values"},{"location":"evaluating-clojure/inspect/#inspecting-simple-values","text":"Inspecting a number or character shows the underlying type, the value and properties of that type","title":"Inspecting simple values"},{"location":"evaluating-clojure/inspect/#inspecting-collections","text":"Inspect a collection shows the underlying type, contents of that collection and index (where applicable). Only the elements are shown. The characters of the overall collection itself are not show, only the underlying type of collection (vector, map, lazy sequence, etc.). If there are collections within collections then those values can be navigated too. RET on an nested element in a collection will inspect that element in the same detail ( cider-inspector-operate-on-point ). L to back to parent of a nested element ( cider-inspector-pop ).","title":"Inspecting Collections"},{"location":"evaluating-clojure/inspect/#inspecting-mutable-values","text":"Mutable containers, atom , ref , can also be inspected. The class of the container is shown, along with the class of the value it contains along with its elements. Inspecting an atom or ref gives the value at the current time. The inspector does not update if the value of the atom or ref is updated. Use r in the inspector buffer to refresh or restart the inspector with , d v each time you want to check if the value has changed.","title":"Inspecting mutable values"},{"location":"evaluating-clojure/inspect/#inspecting-var-meta-data","text":"cider-inspect-last-result shows the result of the the last expression evaluated. When this is a var from a def expression then meta information is shown as well as the class type and summary of the value. Meta data includes the file and position of the code, the name of the var and which namespace it is defined in. Inspecting a defn also shows the argument list as part of the meta data.","title":"Inspecting Var meta data"},{"location":"evaluating-clojure/interupt/","text":"Interrupting Evaluations \u03bb\ufe0e , e i ( cider-interupt ) will stop the current evaluation, useful if that evaluation is taking a long time. This may occur when processing a large data set or stuck in a non-terminating loop. REPL status in buffer mini-bar \u03bb\ufe0e The REPL buffer shows a visual indicator of evaluation , known as a spinner e.g. [=== ] , in the mode line when the current evaluation is taking more than one seconds to complete. The visual indicator spinner shows the REPL is actively processing an evaluation, although is not an indicator of how much progress has been attained or time left for completion. Configure spinner type \u03bb\ufe0e cider-eval-spinner-type defines the type of visual indicator to use in the REPL buffer mini-bar for long running evaluations. SPC h v spinner-types to see the available types. The default value 'progress-bar cider-eval-spinner-delay defines in seconds when to show the spinner. The default is 1 second. cider-show-eval-spinner set to t enables the spinner, set to nil disables the spinner (default t ). Spinner types available \u03bb\ufe0e SPC h v spinner-types show the following available spinner.el types (( 3-line-clock . [ \"\u2524\" \"\u2518\" \"\u2534\" \"\u2514\" \"\u251c\" \"\u250c\" \"\u252c\" \"\u2510\" ] ) ( 2-line-clock . [ \"\u2518\" \"\u2514\" \"\u250c\" \"\u2510\" ] ) ( flipping-line . [ \"_\" \"\\\\\" \"|\" \"/\" ] ) ( rotating-line . [ \"-\" \"\\\\\" \"|\" \"/\" ] ) ( progress-bar . [ \"[ ]\" \"[= ]\" \"[== ]\" \"[=== ]\" \"[====]\" \"[ ===]\" \"[ ==]\" \"[ =]\" ] ) ( progress-bar-filled . [ \"| |\" \"|\u2588 |\" \"|\u2588\u2588 |\" \"|\u2588\u2588\u2588 |\" \"|\u2588\u2588\u2588\u2588|\" \"| \u2588\u2588\u2588|\" \"| \u2588\u2588|\" \"| \u2588|\" ] ) ( vertical-breathing . [ \"\u2581\" \"\u2582\" \"\u2583\" \"\u2584\" \"\u2585\" \"\u2586\" \"\u2587\" \"\u2588\" \"\u2587\" \"\u2586\" \"\u2585\" \"\u2584\" \"\u2583\" \"\u2582\" \"\u2581\" \" \" ] ) ( vertical-rising . [ \"\u2581\" \"\u2584\" \"\u2588\" \"\u2580\" \"\u2594\" ] ) ( horizontal-breathing . [ \" \" \"\u258f\" \"\u258e\" \"\u258d\" \"\u258c\" \"\u258b\" \"\u258a\" \"\u2589\" \"\u2589\" \"\u258a\" \"\u258b\" \"\u258c\" \"\u258d\" \"\u258e\" \"\u258f\" ] ) ( horizontal-breathing-long . [ \" \" \"\u258e \" \"\u258c \" \"\u258a \" \"\u2588 \" \"\u2588\u258e\" \"\u2588\u258c\" \"\u2588\u258a\" \"\u2588\u2588\" \"\u2588\u258a\" \"\u2588\u258c\" \"\u2588\u258e\" \"\u2588 \" \"\u258a \" \"\u258b \" \"\u258c \" \"\u258d \" \"\u258e \" \"\u258f \" ] ) ( horizontal-moving . [ \" \" \"\u258c \" \"\u2588 \" \"\u2590\u258c\" \" \u2588\" \" \u2590\" ] ) ( minibox . [ \"\u2596\" \"\u2598\" \"\u259d\" \"\u2597\" ] ) ( triangle . [ \"\u25e2\" \"\u25e3\" \"\u25e4\" \"\u25e5\" ] ) ( box-in-box . [ \"\u25f0\" \"\u25f3\" \"\u25f2\" \"\u25f1\" ] ) ( box-in-circle . [ \"\u25f4\" \"\u25f7\" \"\u25f6\" \"\u25f5\" ] ) ( half-circle . [ \"\u25d0\" \"\u25d3\" \"\u25d1\" \"\u25d2\" ] ) ( moon . [ \"\ud83c\udf11\" \"\ud83c\udf18\" \"\ud83c\udf17\" \"\ud83c\udf16\" \"\ud83c\udf15\" \"\ud83c\udf14\" \"\ud83c\udf13\" \"\ud83c\udf12\" ] ))","title":"Interupt Eval"},{"location":"evaluating-clojure/interupt/#interrupting-evaluations","text":", e i ( cider-interupt ) will stop the current evaluation, useful if that evaluation is taking a long time. This may occur when processing a large data set or stuck in a non-terminating loop.","title":"Interrupting Evaluations"},{"location":"evaluating-clojure/interupt/#repl-status-in-buffer-mini-bar","text":"The REPL buffer shows a visual indicator of evaluation , known as a spinner e.g. [=== ] , in the mode line when the current evaluation is taking more than one seconds to complete. The visual indicator spinner shows the REPL is actively processing an evaluation, although is not an indicator of how much progress has been attained or time left for completion.","title":"REPL status in buffer mini-bar"},{"location":"evaluating-clojure/interupt/#configure-spinner-type","text":"cider-eval-spinner-type defines the type of visual indicator to use in the REPL buffer mini-bar for long running evaluations. SPC h v spinner-types to see the available types. The default value 'progress-bar cider-eval-spinner-delay defines in seconds when to show the spinner. The default is 1 second. cider-show-eval-spinner set to t enables the spinner, set to nil disables the spinner (default t ).","title":"Configure spinner type"},{"location":"evaluating-clojure/interupt/#spinner-types-available","text":"SPC h v spinner-types show the following available spinner.el types (( 3-line-clock . [ \"\u2524\" \"\u2518\" \"\u2534\" \"\u2514\" \"\u251c\" \"\u250c\" \"\u252c\" \"\u2510\" ] ) ( 2-line-clock . [ \"\u2518\" \"\u2514\" \"\u250c\" \"\u2510\" ] ) ( flipping-line . [ \"_\" \"\\\\\" \"|\" \"/\" ] ) ( rotating-line . [ \"-\" \"\\\\\" \"|\" \"/\" ] ) ( progress-bar . [ \"[ ]\" \"[= ]\" \"[== ]\" \"[=== ]\" \"[====]\" \"[ ===]\" \"[ ==]\" \"[ =]\" ] ) ( progress-bar-filled . [ \"| |\" \"|\u2588 |\" \"|\u2588\u2588 |\" \"|\u2588\u2588\u2588 |\" \"|\u2588\u2588\u2588\u2588|\" \"| \u2588\u2588\u2588|\" \"| \u2588\u2588|\" \"| \u2588|\" ] ) ( vertical-breathing . [ \"\u2581\" \"\u2582\" \"\u2583\" \"\u2584\" \"\u2585\" \"\u2586\" \"\u2587\" \"\u2588\" \"\u2587\" \"\u2586\" \"\u2585\" \"\u2584\" \"\u2583\" \"\u2582\" \"\u2581\" \" \" ] ) ( vertical-rising . [ \"\u2581\" \"\u2584\" \"\u2588\" \"\u2580\" \"\u2594\" ] ) ( horizontal-breathing . [ \" \" \"\u258f\" \"\u258e\" \"\u258d\" \"\u258c\" \"\u258b\" \"\u258a\" \"\u2589\" \"\u2589\" \"\u258a\" \"\u258b\" \"\u258c\" \"\u258d\" \"\u258e\" \"\u258f\" ] ) ( horizontal-breathing-long . [ \" \" \"\u258e \" \"\u258c \" \"\u258a \" \"\u2588 \" \"\u2588\u258e\" \"\u2588\u258c\" \"\u2588\u258a\" \"\u2588\u2588\" \"\u2588\u258a\" \"\u2588\u258c\" \"\u2588\u258e\" \"\u2588 \" \"\u258a \" \"\u258b \" \"\u258c \" \"\u258d \" \"\u258e \" \"\u258f \" ] ) ( horizontal-moving . [ \" \" \"\u258c \" \"\u2588 \" \"\u2590\u258c\" \" \u2588\" \" \u2590\" ] ) ( minibox . [ \"\u2596\" \"\u2598\" \"\u259d\" \"\u2597\" ] ) ( triangle . [ \"\u25e2\" \"\u25e3\" \"\u25e4\" \"\u25e5\" ] ) ( box-in-box . [ \"\u25f0\" \"\u25f3\" \"\u25f2\" \"\u25f1\" ] ) ( box-in-circle . [ \"\u25f4\" \"\u25f7\" \"\u25f6\" \"\u25f5\" ] ) ( half-circle . [ \"\u25d0\" \"\u25d3\" \"\u25d1\" \"\u25d2\" ] ) ( moon . [ \"\ud83c\udf11\" \"\ud83c\udf18\" \"\ud83c\udf17\" \"\ud83c\udf16\" \"\ud83c\udf15\" \"\ud83c\udf14\" \"\ud83c\udf13\" \"\ud83c\udf12\" ] ))","title":"Spinner types available"},{"location":"evaluating-clojure/macro-expand/","text":"Macro-expand - show code generated by macros \u03bb\ufe0e There are around 50 macros in clojure.core and to understand what they are doing it is useful to expand the macro into the code that it generates. Expanding a macro shows you the code generated by the macro reader. Code from the macro is displayed in a new buffer. . e m expands a macro once, the most simple and commonly used command ( cider-macroexpand-1 ). , e M expands until there are no more macros. Less often there will be layers of macros in the expression, so this will show the code from complete resolution of all macros in the expression ( cider-macroexpand-all ). In this example we expand a simple defn macro ( defn foo \"I don't do a whole lot.\" [ x ] ( println x \"Hello, World!\" ))","title":"Macro Expand"},{"location":"evaluating-clojure/macro-expand/#macro-expand-show-code-generated-by-macros","text":"There are around 50 macros in clojure.core and to understand what they are doing it is useful to expand the macro into the code that it generates. Expanding a macro shows you the code generated by the macro reader. Code from the macro is displayed in a new buffer. . e m expands a macro once, the most simple and commonly used command ( cider-macroexpand-1 ). , e M expands until there are no more macros. Less often there will be layers of macros in the expression, so this will show the code from complete resolution of all macros in the expression ( cider-macroexpand-all ). In this example we expand a simple defn macro ( defn foo \"I don't do a whole lot.\" [ x ] ( println x \"Hello, World!\" ))","title":"Macro-expand - show code generated by macros"},{"location":"evaluating-clojure/undefine/","text":"Un-define expressions \u03bb\ufe0e def , defn names change during development, especially when code is refactored. Un-define removes unwanted vars and keeps the REPL clean and avoids the need to restart the REPL. , e u ( cider-undef ) un-defines the current function name or var, e.g. defn / def / deftest , removing it from the running REPL. When cursor is not on a function name or any var, the mini-buffer prompts for the name to undefine. Hint::Cider refresh or restart for multiple changes \u03bb\ufe0e Refresh or restart the REPL when there are multiple changes made to a namespace or across multiple namespaces. Undefine tests before refactor \u03bb\ufe0e If the name of an existing test is changed, the original test will still run when calling the cider test commands. This can lead to confusing test results. , e u on the deftest expression before changing its name will ensure that the existing test is removed from the REPL and no longer run. Undefine in the REPL buffer \u03bb\ufe0e , undef in the REPL buffer (Vim Insert / Emacs state) prompts for a symbol to undefine. TAB when typing the symbol name will popup a list of matching symbols available in the REPL. Select the name you wish to undef Undefine using Clojure \u03bb\ufe0e ns-unmap will remove a symbol from the running REPL. Use *ns* dynamic variable to represent the current namespace. ( ns-unmap *ns* 'name-before-refactor ) Or specify the namespace if the symbol is not in the current namespace ( ns-unmap 'practicalli.service 'name-before-refactor ) ns-unalias will remove an alias added via a require form ;; Require a neamespace ( require ' [ practicalli.service :as service ]) ;; The service alias should now be in the current nammespace ( ns-aliases *ns* ) ;; => {service #namespace[practicalli.service]} ( ns-unalias *ns* 'service ) ;; => nil clojure.tools.namespace \u03bb\ufe0e refresh function scans all directories on the classpath for source files, read their ns forms, builds a graph of their dependencies and load them in dependency order. set-refresh-dirs defines directories that should be scanned. Add the library as a dependency to the project file org.clojure/tools.namespace { :mvn/version \"1.2.0\" } Require the namespace and refer the function (refresh is the only public function in the namespace) ( require ' [ clojure.tools.namespace.repl :refer [ refresh ]]) Refresh the current namespace ( refresh ) The refresh function will load all namespaces found and list them as the output. :reloading ( com.example.util com.example.app com.example.app-test ) :ok All Code must be loadable If there are errors in one or more namespaces that prevent them from successfully loading, then reresh will error, showing which namespaces had issues to resolve. Use refresh in a rich comment block \u03bb\ufe0e Use a rich comment block to ensure the refresh function is only called when directly evaluated. Code inside the rich comment block will not be evaluated when evaluating the current buffer or loading the namespace. ( comment ( require ' [ clojure.tools.namespace.repl :refer [ refresh ]]) ( refresh ) )","title":"Remove Eval"},{"location":"evaluating-clojure/undefine/#un-define-expressions","text":"def , defn names change during development, especially when code is refactored. Un-define removes unwanted vars and keeps the REPL clean and avoids the need to restart the REPL. , e u ( cider-undef ) un-defines the current function name or var, e.g. defn / def / deftest , removing it from the running REPL. When cursor is not on a function name or any var, the mini-buffer prompts for the name to undefine.","title":"Un-define expressions"},{"location":"evaluating-clojure/undefine/#hintcider-refresh-or-restart-for-multiple-changes","text":"Refresh or restart the REPL when there are multiple changes made to a namespace or across multiple namespaces.","title":"Hint::Cider refresh or restart for multiple changes"},{"location":"evaluating-clojure/undefine/#undefine-tests-before-refactor","text":"If the name of an existing test is changed, the original test will still run when calling the cider test commands. This can lead to confusing test results. , e u on the deftest expression before changing its name will ensure that the existing test is removed from the REPL and no longer run.","title":"Undefine tests before refactor"},{"location":"evaluating-clojure/undefine/#undefine-in-the-repl-buffer","text":", undef in the REPL buffer (Vim Insert / Emacs state) prompts for a symbol to undefine. TAB when typing the symbol name will popup a list of matching symbols available in the REPL. Select the name you wish to undef","title":"Undefine in the REPL buffer"},{"location":"evaluating-clojure/undefine/#undefine-using-clojure","text":"ns-unmap will remove a symbol from the running REPL. Use *ns* dynamic variable to represent the current namespace. ( ns-unmap *ns* 'name-before-refactor ) Or specify the namespace if the symbol is not in the current namespace ( ns-unmap 'practicalli.service 'name-before-refactor ) ns-unalias will remove an alias added via a require form ;; Require a neamespace ( require ' [ practicalli.service :as service ]) ;; The service alias should now be in the current nammespace ( ns-aliases *ns* ) ;; => {service #namespace[practicalli.service]} ( ns-unalias *ns* 'service ) ;; => nil","title":"Undefine using Clojure"},{"location":"evaluating-clojure/undefine/#clojuretoolsnamespace","text":"refresh function scans all directories on the classpath for source files, read their ns forms, builds a graph of their dependencies and load them in dependency order. set-refresh-dirs defines directories that should be scanned. Add the library as a dependency to the project file org.clojure/tools.namespace { :mvn/version \"1.2.0\" } Require the namespace and refer the function (refresh is the only public function in the namespace) ( require ' [ clojure.tools.namespace.repl :refer [ refresh ]]) Refresh the current namespace ( refresh ) The refresh function will load all namespaces found and list them as the output. :reloading ( com.example.util com.example.app com.example.app-test ) :ok All Code must be loadable If there are errors in one or more namespaces that prevent them from successfully loading, then reresh will error, showing which namespaces had issues to resolve.","title":"clojure.tools.namespace"},{"location":"evaluating-clojure/undefine/#use-refresh-in-a-rich-comment-block","text":"Use a rich comment block to ensure the refresh function is only called when directly evaluated. Code inside the rich comment block will not be evaluated when evaluating the current buffer or loading the namespace. ( comment ( require ' [ clojure.tools.namespace.repl :refer [ refresh ]]) ( refresh ) )","title":"Use refresh in a rich comment block"},{"location":"external-repl/","text":"External Clojure REPL \u03bb\ufe0e Configure and connect to an externally run REPL. Why \u03bb\ufe0e If you have a system that has a long running process, like a server. You need to connect to a environment that is already running, eg. pre-production or production (to fix a critical bug that cannot be fixed in other ways).","title":"External Clojure REPL"},{"location":"external-repl/#external-clojure-repl","text":"Configure and connect to an externally run REPL.","title":"External Clojure REPL"},{"location":"external-repl/#why","text":"If you have a system that has a long running process, like a server. You need to connect to a environment that is already running, eg. pre-production or production (to fix a critical bug that cannot be fixed in other ways).","title":"Why"},{"location":"external-repl/connect-to-running-repl/","text":"Connect to a running Repl \u03bb\ufe0e You can connect to a REPL started elsewhere, for example the command line with lein repl , then connect to it from inside Spacemacs. You will need to know: host name / ip address port the repl is listening too Spacemacs Major mode Emacs Evil Command SPC m s c M-RET s c C-c M-c , s c cider-connect Use the lein repl command to run a new REPL on the command line. Then connect to that REPL using M-x cider-connect Configuration Required \u03bb\ufe0e If you are going to connect to an external repl from Spacemacs, you will need to add the Leiningen plugin called cider-nrepl and the Clojure tools.nrepl library. Rather than add this to all projects, you add these to your Leiningen configuration ~/.lein/profiles.clj file. The versions of each library also had to be kept in sync with updates in the Spacemacs Clojure layer. { :dev { :plugins [[ cider/cider-nrepl \"0.15.0-SNAPSHOT\" ] [ refactor-nrepl \"2.3.0-SNAPSHOT\" ]] :dependencies [[ org.clojure/tools.nrepl \"0.2.12\" ]]}} Without this configuration, you will see warning messages in the repl buffer stating that the versions of ... are out of sync.","title":"Connect to a running Repl"},{"location":"external-repl/connect-to-running-repl/#connect-to-a-running-repl","text":"You can connect to a REPL started elsewhere, for example the command line with lein repl , then connect to it from inside Spacemacs. You will need to know: host name / ip address port the repl is listening too Spacemacs Major mode Emacs Evil Command SPC m s c M-RET s c C-c M-c , s c cider-connect Use the lein repl command to run a new REPL on the command line. Then connect to that REPL using M-x cider-connect","title":"Connect to a running Repl"},{"location":"external-repl/connect-to-running-repl/#configuration-required","text":"If you are going to connect to an external repl from Spacemacs, you will need to add the Leiningen plugin called cider-nrepl and the Clojure tools.nrepl library. Rather than add this to all projects, you add these to your Leiningen configuration ~/.lein/profiles.clj file. The versions of each library also had to be kept in sync with updates in the Spacemacs Clojure layer. { :dev { :plugins [[ cider/cider-nrepl \"0.15.0-SNAPSHOT\" ] [ refactor-nrepl \"2.3.0-SNAPSHOT\" ]] :dependencies [[ org.clojure/tools.nrepl \"0.2.12\" ]]}} Without this configuration, you will see warning messages in the repl buffer stating that the versions of ... are out of sync.","title":"Configuration Required"},{"location":"external-repl/repl-command-menu/","text":"REPL Command Menu \u03bb\ufe0e With the Clojure REPL buffer active, you can use the , character (in Vim Insert or Emacs state) to open a menu of REPL related commands Vim Insert Emacs Description , , Open REPL Command menu HINT::Vim Insert or Emacs state only \u03bb\ufe0e , in Vim Normal state opens the Clojure major mode menu. i to change to Vim Insert state C-z to change to Emacs state","title":"REPL Command Menu"},{"location":"external-repl/repl-command-menu/#repl-command-menu","text":"With the Clojure REPL buffer active, you can use the , character (in Vim Insert or Emacs state) to open a menu of REPL related commands Vim Insert Emacs Description , , Open REPL Command menu","title":"REPL Command Menu"},{"location":"external-repl/repl-command-menu/#hintvim-insert-or-emacs-state-only","text":", in Vim Normal state opens the Clojure major mode menu. i to change to Vim Insert state C-z to change to Emacs state","title":"HINT::Vim Insert or Emacs state only"},{"location":"external-repl/repl-history/","text":"REPL History \u03bb\ufe0e You can scroll back through the history in the REPL buffer, allowing you to evaluate previous expressions evaluated in the REPL. You can also change any of the previous expressions before evaluating. In Vim Insert state or Emacs state. Vim Insert state Description C-\ud83e\udc45 scrolls backwards through the history C-\ud83e\udc47 scrolls forwards through the history The above commands do not work in Vim normal state. View the whole history with cider-repl-history \u03bb\ufe0e You can view the history of expressions in a separate buffer via the REPL Command menu, available when the REPL buffer is active. This does not include the history of results (data inspectors like Portal can be used to navigate evaluated history). In Vim Insert state or Emacs state: , open the REPL command menu Type history at the REPL command menu prompt, press RET to select. A new buffer opens in Vim normal mode and shows all the previous history, separated by comments. Hint:: Switch to Vim insert or Emacs state \u03bb\ufe0e The REPL History buffer only accepts commands when in Vim insert or Emacs state i evil insert state C-z emacs state In Evil Insert or Emacs state: RTN or SPC will send the current expression under the cursor to the REPL buffer and close the repl-history buffer. In Evil Normal state: SPC SPC cider-history-use-and-quit sends the current expression to the REPL buffer and closes the REPL history.","title":"REPL History"},{"location":"external-repl/repl-history/#repl-history","text":"You can scroll back through the history in the REPL buffer, allowing you to evaluate previous expressions evaluated in the REPL. You can also change any of the previous expressions before evaluating. In Vim Insert state or Emacs state. Vim Insert state Description C-\ud83e\udc45 scrolls backwards through the history C-\ud83e\udc47 scrolls forwards through the history The above commands do not work in Vim normal state.","title":"REPL History"},{"location":"external-repl/repl-history/#view-the-whole-history-with-cider-repl-history","text":"You can view the history of expressions in a separate buffer via the REPL Command menu, available when the REPL buffer is active. This does not include the history of results (data inspectors like Portal can be used to navigate evaluated history). In Vim Insert state or Emacs state: , open the REPL command menu Type history at the REPL command menu prompt, press RET to select. A new buffer opens in Vim normal mode and shows all the previous history, separated by comments.","title":"View the whole history with cider-repl-history"},{"location":"external-repl/repl-history/#hint-switch-to-vim-insert-or-emacs-state","text":"The REPL History buffer only accepts commands when in Vim insert or Emacs state i evil insert state C-z emacs state In Evil Insert or Emacs state: RTN or SPC will send the current expression under the cursor to the REPL buffer and close the repl-history buffer. In Evil Normal state: SPC SPC cider-history-use-and-quit sends the current expression to the REPL buffer and closes the REPL history.","title":"Hint:: Switch to Vim insert or Emacs state"},{"location":"external-repl/show-repl-on-connect/","text":"Show REPL Buffer \u03bb\ufe0e Hint::Minimise use of REPL buffer \u03bb\ufe0e When developing code it is more effective to evaluate in the source code buffers. Spacemacs does not automatically show the Clojure REPL buffer when connecting to a REPL ( cider-jack-in-clj ). , s s opens and switches to the REPL buffer. Once the REPL buffer is open, , s s toggles focus between the REPL and source code buffers. Alternatively, SPC b b opens the buffer list. Typing repl narrows to REPL buffers. C-j and C-k navigate the buffer list and RET selects the buffer. A buffer for each Clojure REPL & ClojureScript REPL process will be shown in the buffer list. Configure REPL Buffer size limit \u03bb\ufe0e By default, standard out (printlin and logs to console) will be printed in the REPL buffer. Logging into the REPL buffer, especially logs with verbose output, can slow down Emacs performance. Add cider-repl-buffer-size-limit 100 to the cider layer to limit lines shown in REPL buffer. Only that number of lines will be retailed in the buffer, with any more lines automatically deleted. This should keep the REPL buffer more responsive. ( clojure :variables cider-repl-buffer-size-limit 100 ) Show REPL buffer automatically \u03bb\ufe0e To automatically show the REPL buffer once you have connected, add the following code to the dotspacemacs/user-config section of the .spacemacs file. ( clojure :variables cider-repl-pop-to-buffer-on-connect t ) The REPL buffer will open as an additional window in the current frame. Slow REPL buffer \u03bb\ufe0e SPC SPC fundamental-mode will switch off the text formatting and help the REPL buffer should be faster to respond. However, fundamental-mode should be a last resource as it limits the usefulness of the REPL buffer.","title":"Show REPL Buffer"},{"location":"external-repl/show-repl-on-connect/#show-repl-buffer","text":"","title":"Show REPL Buffer"},{"location":"external-repl/show-repl-on-connect/#hintminimise-use-of-repl-buffer","text":"When developing code it is more effective to evaluate in the source code buffers. Spacemacs does not automatically show the Clojure REPL buffer when connecting to a REPL ( cider-jack-in-clj ). , s s opens and switches to the REPL buffer. Once the REPL buffer is open, , s s toggles focus between the REPL and source code buffers. Alternatively, SPC b b opens the buffer list. Typing repl narrows to REPL buffers. C-j and C-k navigate the buffer list and RET selects the buffer. A buffer for each Clojure REPL & ClojureScript REPL process will be shown in the buffer list.","title":"Hint::Minimise use of REPL buffer"},{"location":"external-repl/show-repl-on-connect/#configure-repl-buffer-size-limit","text":"By default, standard out (printlin and logs to console) will be printed in the REPL buffer. Logging into the REPL buffer, especially logs with verbose output, can slow down Emacs performance. Add cider-repl-buffer-size-limit 100 to the cider layer to limit lines shown in REPL buffer. Only that number of lines will be retailed in the buffer, with any more lines automatically deleted. This should keep the REPL buffer more responsive. ( clojure :variables cider-repl-buffer-size-limit 100 )","title":"Configure REPL Buffer size limit"},{"location":"external-repl/show-repl-on-connect/#show-repl-buffer-automatically","text":"To automatically show the REPL buffer once you have connected, add the following code to the dotspacemacs/user-config section of the .spacemacs file. ( clojure :variables cider-repl-pop-to-buffer-on-connect t ) The REPL buffer will open as an additional window in the current frame.","title":"Show REPL buffer automatically"},{"location":"external-repl/show-repl-on-connect/#slow-repl-buffer","text":"SPC SPC fundamental-mode will switch off the text formatting and help the REPL buffer should be faster to respond. However, fundamental-mode should be a last resource as it limits the usefulness of the REPL buffer.","title":"Slow REPL buffer"},{"location":"external-repl/switching-to-repl/","text":"Switching to the REPL \u03bb\ufe0e Todo::re-write this section \u03bb\ufe0e Update for Clojure CLI tools , s a toggles between a Clojure code file buffer and the REPL buffer, opening the REPL buffer where required. , s n evaluates the namespace of the current Clojure file in the REPL, changing the REPL to be in that namespace. Hint::To REPL buffer or not to REPL buffer \u03bb\ufe0e Many developers simply evaluate functions and expressions within the Clojure code buffer itself. A REPL buffer is very useful for showing larger results from evaluating code and any side effect information such as logging and debugging. Select the REPL namespace \u03bb\ufe0e SPC SPC cider-repl-set-ns displays a pop-up buffer of all the available namespaces. A running REPL is required. Hint::The user namespace \u03bb\ufe0e When starting a REPL the default namespace is called user . This namespace contains the clojure.repl library allowing you to call functions useful for development, such as (doc ,,,) , (source ,,,) , etc. To use the doc and source tools, you can stay in the user namespace and use require function to include your own code in the user namespace. For example: ( require 'my-custom-code.core ) ( require ' [ my-custom-code-time :as time ]) Setting the default REPL namespace \u03bb\ufe0e Set the namespace used when starting the REPL in the project.clj file by adding :init-ns to the :repl-options :repl-options { :init-ns the-default.namespace } Keybindings \u03bb\ufe0e Keybinding Description , s a toggle between source code and REPL buffer , s o Switch between CLJ & CLJS REPLs in current project REPL Buffer \u03bb\ufe0e The REPL buffer contains a detailed welcome message describing how to use the basics of the REPL.","title":"Switching to the REPL"},{"location":"external-repl/switching-to-repl/#switching-to-the-repl","text":"","title":"Switching to the REPL"},{"location":"external-repl/switching-to-repl/#todore-write-this-section","text":"Update for Clojure CLI tools , s a toggles between a Clojure code file buffer and the REPL buffer, opening the REPL buffer where required. , s n evaluates the namespace of the current Clojure file in the REPL, changing the REPL to be in that namespace.","title":"Todo::re-write this section"},{"location":"external-repl/switching-to-repl/#hintto-repl-buffer-or-not-to-repl-buffer","text":"Many developers simply evaluate functions and expressions within the Clojure code buffer itself. A REPL buffer is very useful for showing larger results from evaluating code and any side effect information such as logging and debugging.","title":"Hint::To REPL buffer or not to REPL buffer"},{"location":"external-repl/switching-to-repl/#select-the-repl-namespace","text":"SPC SPC cider-repl-set-ns displays a pop-up buffer of all the available namespaces. A running REPL is required.","title":"Select the REPL namespace"},{"location":"external-repl/switching-to-repl/#hintthe-user-namespace","text":"When starting a REPL the default namespace is called user . This namespace contains the clojure.repl library allowing you to call functions useful for development, such as (doc ,,,) , (source ,,,) , etc. To use the doc and source tools, you can stay in the user namespace and use require function to include your own code in the user namespace. For example: ( require 'my-custom-code.core ) ( require ' [ my-custom-code-time :as time ])","title":"Hint::The user namespace"},{"location":"external-repl/switching-to-repl/#setting-the-default-repl-namespace","text":"Set the namespace used when starting the REPL in the project.clj file by adding :init-ns to the :repl-options :repl-options { :init-ns the-default.namespace }","title":"Setting the default REPL namespace"},{"location":"external-repl/switching-to-repl/#keybindings","text":"Keybinding Description , s a toggle between source code and REPL buffer , s o Switch between CLJ & CLJS REPLs in current project","title":"Keybindings"},{"location":"external-repl/switching-to-repl/#repl-buffer","text":"The REPL buffer contains a detailed welcome message describing how to use the basics of the REPL.","title":"REPL Buffer"},{"location":"figwheel/","text":"Figwheel Overview \u03bb\ufe0e Practicalli Blog article describes the ClojureScript workflow using the Clojure CLI and Figwheel-main to configure the project, providing an instant feedback loop to visualse what the code is doing as it is written.","title":"Figwheel Overview"},{"location":"figwheel/#figwheel-overview","text":"Practicalli Blog article describes the ClojureScript workflow using the Clojure CLI and Figwheel-main to configure the project, providing an instant feedback loop to visualse what the code is doing as it is written.","title":"Figwheel Overview"},{"location":"figwheel/broadcasting/","text":"Broadcasting \u03bb\ufe0e","title":"Broadcasting"},{"location":"figwheel/broadcasting/#broadcasting","text":"","title":"Broadcasting"},{"location":"figwheel/clojurescript-repl/","text":"ClojureScript REPL \u03bb\ufe0e","title":"ClojureScript REPL"},{"location":"figwheel/clojurescript-repl/#clojurescript-repl","text":"","title":"ClojureScript REPL"},{"location":"figwheel/error-reporting/","text":"Error Reporting \u03bb\ufe0e","title":"Error Reporting"},{"location":"figwheel/error-reporting/#error-reporting","text":"","title":"Error Reporting"},{"location":"figwheel/heads-up-display/","text":"Heads up display \u03bb\ufe0e","title":"Heads up display"},{"location":"figwheel/heads-up-display/#heads-up-display","text":"","title":"Heads up display"},{"location":"figwheel/live-code-reload/","text":"Live Code Reload \u03bb\ufe0e","title":"Live Code Reload"},{"location":"figwheel/live-code-reload/#live-code-reload","text":"","title":"Live Code Reload"},{"location":"figwheel/live-css-reload/","text":"Live CSS Reload \u03bb\ufe0e","title":"Live CSS Reload"},{"location":"figwheel/live-css-reload/#live-css-reload","text":"","title":"Live CSS Reload"},{"location":"figwheel/multiple-environments/","text":"Multiple Environments (repl) \u03bb\ufe0e","title":"Multiple Environments (repl)"},{"location":"figwheel/multiple-environments/#multiple-environments-repl","text":"","title":"Multiple Environments (repl)"},{"location":"figwheel/other-options/","text":"Other Options \u03bb\ufe0e","title":"Other Options"},{"location":"figwheel/other-options/#other-options","text":"","title":"Other Options"},{"location":"figwheel/static-content/","text":"static content \u03bb\ufe0e","title":"static content"},{"location":"figwheel/static-content/#static-content","text":"","title":"static content"},{"location":"improving-code/","text":"Improving Clojure code \u03bb\ufe0e Clojure code should be kept readable and consistently use idiomatic style, which can be managed by using a few additional tools Tool Description Usage Linter Reports on code errors Continuously Formatter Formats the code for readability Automatically Static analyser Suggests idiomatic use of Clojure Regularly (before pushing) Hint::Clojure style guide \u03bb\ufe0e Linting and formatting follow the practices documented in the Clojure style guide . Linting \u03bb\ufe0e Linting tools can be added as a flycheck service so code is continually checked as you are writing it. Continuously linting picks up little bugs as you type and reduces the amount of debugging required, as you are changing errors as you make them. Linting will get rid of all the little errors and typos that are easily made, yet take time to find and fix. Static analyser \u03bb\ufe0e Kibit is a commonly used static analyser for Clojure projects, suggesting changes to the code it analyses to make it more idiomatic. Formatting \u03bb\ufe0e A consistent format of your code base makes it much more readable and therefore understandable by the development team. The clojure-mode does manage basic formatting of your code, especially code indentation. Spacemacs can be configured to automatically check and adjust any formatting as you type.","title":"Improving Clojure code"},{"location":"improving-code/#improving-clojure-code","text":"Clojure code should be kept readable and consistently use idiomatic style, which can be managed by using a few additional tools Tool Description Usage Linter Reports on code errors Continuously Formatter Formats the code for readability Automatically Static analyser Suggests idiomatic use of Clojure Regularly (before pushing)","title":"Improving Clojure code"},{"location":"improving-code/#hintclojure-style-guide","text":"Linting and formatting follow the practices documented in the Clojure style guide .","title":"Hint::Clojure style guide"},{"location":"improving-code/#linting","text":"Linting tools can be added as a flycheck service so code is continually checked as you are writing it. Continuously linting picks up little bugs as you type and reduces the amount of debugging required, as you are changing errors as you make them. Linting will get rid of all the little errors and typos that are easily made, yet take time to find and fix.","title":"Linting"},{"location":"improving-code/#static-analyser","text":"Kibit is a commonly used static analyser for Clojure projects, suggesting changes to the code it analyses to make it more idiomatic.","title":"Static analyser"},{"location":"improving-code/#formatting","text":"A consistent format of your code base makes it much more readable and therefore understandable by the development team. The clojure-mode does manage basic formatting of your code, especially code indentation. Spacemacs can be configured to automatically check and adjust any formatting as you type.","title":"Formatting"},{"location":"improving-code/batch-linting/","text":"Batch Linting \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e squiggly can be used to provide live linting for Eastwood and kibit, however, squiggly continually reloads your code and can cause issues especially if your code has side effects when continually reloaded. Eastwood and kibit give a better experience when used in batch mode, either before push commits to a shared repository or with a CD/CI server. Quick usage \u03bb\ufe0e Eastwood can be run from Clojure CLI tools - deps.edn Leiningen a REPL . deps.edn \u03bb\ufe0e Define an alias for the Eastwood library and namespace. { :aliases { :eastwood { :main-opts [ \"-m\" \"eastwood.lint\" { :source-paths [ \"src\" ]}] :extra-deps { jonase/eastwood { :mvn/version \"RELEASE\" }}}}} Run Clojure with the eastwood alias to lint your project $ clojure -M:lint/eastwood An example output is as follows: == Eastwood 0 .2.4 Clojure 1 .9.0-alpha16 JVM 1 .8.0_31 Directories scanned for source files: src test == Linting app.routes.users == src/app/routes/users.clj:133:43: suspicious-expression: -> called with 1 args. ( -> x ) always returns x. Perhaps there are misplaced parentheses? src/app/routes/users.clj:115:3: constant-test: Test expression is always logical true or always logical false: true in form ( if true ( do ( users/update-user-password { :hash ( :id params ) , :pass ( :pass params )}) ( ok )) ( bad-request )) == Linting app.routes.login == == Linting app.helpers.helpers == == Linting app.routes.inbox == == Linting app.middleware == You can see from the example output that Eastwood found an issue with users.clj line 133. The issue is that there\u2019s a suspicious expression: specifically, we\u2019re threading x into nothing. Seems like a good thing for us to clean up! Below that, you\u2019ll see that our if expression is always checking against true. Specifically, because our code is (if true ... ...). It looks like this was probably added as a quick solution, and I wouldn\u2019t be surprised to find a TODO above that expression. Regardless, that\u2019s an example of how to use Eastwood to help lint your Clojure code. TODO::Using Eastwood with a CD/CI server - eg. CircleCI \u03bb\ufe0e Clojure CLI tools - run clojure with the alias reject a build if Eastwood finds issues with your code feedback recommendations from kibit","title":"Batch Linting"},{"location":"improving-code/batch-linting/#batch-linting","text":"","title":"Batch Linting"},{"location":"improving-code/batch-linting/#todowork-in-progress-sorry","text":"squiggly can be used to provide live linting for Eastwood and kibit, however, squiggly continually reloads your code and can cause issues especially if your code has side effects when continually reloaded. Eastwood and kibit give a better experience when used in batch mode, either before push commits to a shared repository or with a CD/CI server.","title":"TODO::work in progress, sorry"},{"location":"improving-code/batch-linting/#quick-usage","text":"Eastwood can be run from Clojure CLI tools - deps.edn Leiningen a REPL .","title":"Quick usage"},{"location":"improving-code/batch-linting/#depsedn","text":"Define an alias for the Eastwood library and namespace. { :aliases { :eastwood { :main-opts [ \"-m\" \"eastwood.lint\" { :source-paths [ \"src\" ]}] :extra-deps { jonase/eastwood { :mvn/version \"RELEASE\" }}}}} Run Clojure with the eastwood alias to lint your project $ clojure -M:lint/eastwood An example output is as follows: == Eastwood 0 .2.4 Clojure 1 .9.0-alpha16 JVM 1 .8.0_31 Directories scanned for source files: src test == Linting app.routes.users == src/app/routes/users.clj:133:43: suspicious-expression: -> called with 1 args. ( -> x ) always returns x. Perhaps there are misplaced parentheses? src/app/routes/users.clj:115:3: constant-test: Test expression is always logical true or always logical false: true in form ( if true ( do ( users/update-user-password { :hash ( :id params ) , :pass ( :pass params )}) ( ok )) ( bad-request )) == Linting app.routes.login == == Linting app.helpers.helpers == == Linting app.routes.inbox == == Linting app.middleware == You can see from the example output that Eastwood found an issue with users.clj line 133. The issue is that there\u2019s a suspicious expression: specifically, we\u2019re threading x into nothing. Seems like a good thing for us to clean up! Below that, you\u2019ll see that our if expression is always checking against true. Specifically, because our code is (if true ... ...). It looks like this was probably added as a quick solution, and I wouldn\u2019t be surprised to find a TODO above that expression. Regardless, that\u2019s an example of how to use Eastwood to help lint your Clojure code.","title":"deps.edn"},{"location":"improving-code/batch-linting/#todousing-eastwood-with-a-cdci-server-eg-circleci","text":"Clojure CLI tools - run clojure with the alias reject a build if Eastwood finds issues with your code feedback recommendations from kibit","title":"TODO::Using Eastwood with a CD/CI server - eg. CircleCI"},{"location":"improving-code/idiomatic-code-checking/","text":"Idiomatic code with Kibit \u03bb\ufe0e kibit is a static code analyzer for Clojure, ClojureScript, cljx and other Clojure variants. It uses core.logic to search for patterns of code that could be rewritten with a more idiomatic function or macro. For example if kibit finds the code ( defproject project-name \"0.0.1\" :description \"Eastwood Sample Project\" :license \"Eclipse Public License 1.0\" :url \"http://www.bradcypert.com\" :dependencies [[ org.clojure/Clojure \"1.10.1\" ]] :plugins [[ lein-tar \"3.2.0\" ] [ jonase/eastwood \"0.2.4\" ] [ lein-kibit \"0.1.5\" ]]) lein kibit in a terminal will run the analysis on your project and output recommendations At /Users/brad/Projects/podcasts/app/src/app/db/processors.clj:14: Consider using: ( update-in podcast [ :feed ] podcast-service/parse-feed ) instead of: ( assoc podcast :feed ( podcast-service/parse-feed ( :feed podcast ))) At /Users/brad/Projects/podcasts/app/src/app/db/processors.clj:30: Consider using: ( when ( not exists? ) ( doall ( map ( partial notifications/new-episode podcast episode ) subscribed-users ))) instead of: ( if ( not exists? ) ( doall ( map ( partial notifications/new-episode podcast episode ) subscribed-users )) nil ) At /Users/brad/Projects/podcasts/app/src/app/modules/auth.clj:17: Consider using: ( if -not ( some nil? [ item source ]) ( hashers/check item source ) false ) instead of: ( if ( not ( some nil? [ item source ])) ( hashers/check item source ) false ) Kibit will scan your code and check it against idiomatic code patterns (using core.logic ) and recommend how to simplify and reduce your code complexity. The output excerpt shows two different suggestions: Simplifying an if to a when and condensing an if and not to an if-not . lein kibit --replace will fix these issues for you. lein kibit --replace --interactive will automatically walk you through each recommendation and ask if want to use it. TODO::Using Kibit with a CD/CI server - eg. CircleCI \u03bb\ufe0e reject a build if Kibit finds issues with your code automatically apply and commit recommendations from kibit into a Pull Request","title":"Idiomatic code with Kibit"},{"location":"improving-code/idiomatic-code-checking/#idiomatic-code-with-kibit","text":"kibit is a static code analyzer for Clojure, ClojureScript, cljx and other Clojure variants. It uses core.logic to search for patterns of code that could be rewritten with a more idiomatic function or macro. For example if kibit finds the code ( defproject project-name \"0.0.1\" :description \"Eastwood Sample Project\" :license \"Eclipse Public License 1.0\" :url \"http://www.bradcypert.com\" :dependencies [[ org.clojure/Clojure \"1.10.1\" ]] :plugins [[ lein-tar \"3.2.0\" ] [ jonase/eastwood \"0.2.4\" ] [ lein-kibit \"0.1.5\" ]]) lein kibit in a terminal will run the analysis on your project and output recommendations At /Users/brad/Projects/podcasts/app/src/app/db/processors.clj:14: Consider using: ( update-in podcast [ :feed ] podcast-service/parse-feed ) instead of: ( assoc podcast :feed ( podcast-service/parse-feed ( :feed podcast ))) At /Users/brad/Projects/podcasts/app/src/app/db/processors.clj:30: Consider using: ( when ( not exists? ) ( doall ( map ( partial notifications/new-episode podcast episode ) subscribed-users ))) instead of: ( if ( not exists? ) ( doall ( map ( partial notifications/new-episode podcast episode ) subscribed-users )) nil ) At /Users/brad/Projects/podcasts/app/src/app/modules/auth.clj:17: Consider using: ( if -not ( some nil? [ item source ]) ( hashers/check item source ) false ) instead of: ( if ( not ( some nil? [ item source ])) ( hashers/check item source ) false ) Kibit will scan your code and check it against idiomatic code patterns (using core.logic ) and recommend how to simplify and reduce your code complexity. The output excerpt shows two different suggestions: Simplifying an if to a when and condensing an if and not to an if-not . lein kibit --replace will fix these issues for you. lein kibit --replace --interactive will automatically walk you through each recommendation and ask if want to use it.","title":"Idiomatic code with Kibit"},{"location":"improving-code/idiomatic-code-checking/#todousing-kibit-with-a-cdci-server-eg-circleci","text":"reject a build if Kibit finds issues with your code automatically apply and commit recommendations from kibit into a Pull Request","title":"TODO::Using Kibit with a CD/CI server - eg. CircleCI"},{"location":"improving-code/live-linting/","text":"Live linting with clj-kondo \u03bb\ufe0e clj-kondo is a linter that can be called from flycheck, providing live static code analysis on your Clojure code as you type. Simple open any Clojure file ( .clj , .cljs , .cljc , .edn ) and start typing. clj-kondo does not need a running Clojure REPL to work. When errors are detected by the lint tool, a mark appears in the margin showing the line. A wavy underscore shows where on the line the issue is. Moving the cursor to the underscore will show a pop-up describing the error. The total number of errors and warnings are show in in the Space bar. Navigating linting errors \u03bb\ufe0e SPC e L opens a window with a buffer containing the list of linting errors for the current file. Navigate between linting errors using j and k . RET to select an error, focusing the cursor in the other buffer on that error SPC b x to close the buffer and window when you have finished. Keeping the flycheck buffer open will update as you move to linting errors in the source code buffer. Hint::Not all error menu commands work \u03bb\ufe0e Some commands in the error menu do not currently work with linting in Clojure . Configure Spacemacs Clojure layer with clj-kondo \u03bb\ufe0e Requirements for using clj-kondo as a live linter: syntax-checking layer is present in dotspacemacs-configuration-layers , which provides flycheck. clj-kondo is available on PATH (see clj-kondo install instructions ). Spacemacs develop branch as of September 2019 or later Add a variable called clojure-enable-linters to the clojure with the value 'clj-kondo. ( clojure :variables clojure-enable-linters 'clj-kondo ) SPC q r to restart Spacemacs (or simply SPC f e R to reload the configuration) Hint::Conflicts \u03bb\ufe0e Using the unofficial clojure-lint layer will cause conflicts and may interfere with clj-kondo live linting.","title":"Live linting with clj-kondo"},{"location":"improving-code/live-linting/#live-linting-with-clj-kondo","text":"clj-kondo is a linter that can be called from flycheck, providing live static code analysis on your Clojure code as you type. Simple open any Clojure file ( .clj , .cljs , .cljc , .edn ) and start typing. clj-kondo does not need a running Clojure REPL to work. When errors are detected by the lint tool, a mark appears in the margin showing the line. A wavy underscore shows where on the line the issue is. Moving the cursor to the underscore will show a pop-up describing the error. The total number of errors and warnings are show in in the Space bar.","title":"Live linting with clj-kondo"},{"location":"improving-code/live-linting/#navigating-linting-errors","text":"SPC e L opens a window with a buffer containing the list of linting errors for the current file. Navigate between linting errors using j and k . RET to select an error, focusing the cursor in the other buffer on that error SPC b x to close the buffer and window when you have finished. Keeping the flycheck buffer open will update as you move to linting errors in the source code buffer.","title":"Navigating linting errors"},{"location":"improving-code/live-linting/#hintnot-all-error-menu-commands-work","text":"Some commands in the error menu do not currently work with linting in Clojure .","title":"Hint::Not all error menu commands work"},{"location":"improving-code/live-linting/#configure-spacemacs-clojure-layer-with-clj-kondo","text":"Requirements for using clj-kondo as a live linter: syntax-checking layer is present in dotspacemacs-configuration-layers , which provides flycheck. clj-kondo is available on PATH (see clj-kondo install instructions ). Spacemacs develop branch as of September 2019 or later Add a variable called clojure-enable-linters to the clojure with the value 'clj-kondo. ( clojure :variables clojure-enable-linters 'clj-kondo ) SPC q r to restart Spacemacs (or simply SPC f e R to reload the configuration)","title":"Configure Spacemacs Clojure layer with clj-kondo"},{"location":"improving-code/live-linting/#hintconflicts","text":"Using the unofficial clojure-lint layer will cause conflicts and may interfere with clj-kondo live linting.","title":"Hint::Conflicts"},{"location":"improving-code/formatting/","text":"Formatting Code \u03bb\ufe0e Spacemacs automatically formats code as its written. , = or M-RET = is the format menu in Spacemacs across all languages TAB indents the current line of code (or selected region). Not that TAB may also trigger auto-completion too. Clojure code is typically formatted following the Clojure Style Guide , although this is only a guide. Cider format tools \u03bb\ufe0e , = b ( cider-format-buffer ) - format the Clojure code in the current buffer. , = l ( clojure-align ) - vertically align the current line within the context of the top level form or selected area For example, vertically align the values in a map ( def my-map { :a-key 1 :other-key 2 }) ( def my-map { :a-key 1 :other-key 2 }) This can also be done automatically (as part of indentation) by turning on clojure-align-forms-automatically. This way it will happen whenever you select some code and hit TAB. Clojure LSP \u03bb\ufe0e Clojure LSP uses cljfmt which has a large number of very strict rules, although all rules can be tailored or disabled as required.","title":"Formatting Code"},{"location":"improving-code/formatting/#formatting-code","text":"Spacemacs automatically formats code as its written. , = or M-RET = is the format menu in Spacemacs across all languages TAB indents the current line of code (or selected region). Not that TAB may also trigger auto-completion too. Clojure code is typically formatted following the Clojure Style Guide , although this is only a guide.","title":"Formatting Code"},{"location":"improving-code/formatting/#cider-format-tools","text":", = b ( cider-format-buffer ) - format the Clojure code in the current buffer. , = l ( clojure-align ) - vertically align the current line within the context of the top level form or selected area For example, vertically align the values in a map ( def my-map { :a-key 1 :other-key 2 }) ( def my-map { :a-key 1 :other-key 2 }) This can also be done automatically (as part of indentation) by turning on clojure-align-forms-automatically. This way it will happen whenever you select some code and hit TAB.","title":"Cider format tools"},{"location":"improving-code/formatting/#clojure-lsp","text":"Clojure LSP uses cljfmt which has a large number of very strict rules, although all rules can be tailored or disabled as required.","title":"Clojure LSP"},{"location":"improving-code/formatting/aligning-forms-expressions/","text":"Aligning forms and expressions \u03bb\ufe0e Indentation of function forms ( setq clojure-indent-style 'align-arguments ) Vertically align s-expressions ( setq clojure-align-forms-automatically t )","title":"Aligning forms and expressions"},{"location":"improving-code/formatting/aligning-forms-expressions/#aligning-forms-and-expressions","text":"Indentation of function forms ( setq clojure-indent-style 'align-arguments ) Vertically align s-expressions ( setq clojure-align-forms-automatically t )","title":"Aligning forms and expressions"},{"location":"improving-code/formatting/automatic-indenting/","text":"Automatic indenting \u03bb\ufe0e aggressive-indent-mode will automatically adjust indentation as you type. Edit .spacemacs and add this line one of these settings into the dotspacemacs/user-config section For Clojure / ClojureScript language, add ( add-hook 'clojure-mode-hook #' aggressive-indent-mode ) Aggressive Indentation \u03bb\ufe0e DANGER::LSP clashes with aggressive indent \u03bb\ufe0e Avoid running LSP format as type and aggressive indent as they will interact with each others changes and cause very strange side effects Set aggressive indentation for all languages using the following code instead ( global-aggressive-indent-mode 1 ) Auto-indent code automatically","title":"Automatic indenting"},{"location":"improving-code/formatting/automatic-indenting/#automatic-indenting","text":"aggressive-indent-mode will automatically adjust indentation as you type. Edit .spacemacs and add this line one of these settings into the dotspacemacs/user-config section For Clojure / ClojureScript language, add ( add-hook 'clojure-mode-hook #' aggressive-indent-mode )","title":"Automatic indenting"},{"location":"improving-code/formatting/automatic-indenting/#aggressive-indentation","text":"","title":"Aggressive Indentation"},{"location":"improving-code/formatting/automatic-indenting/#dangerlsp-clashes-with-aggressive-indent","text":"Avoid running LSP format as type and aggressive indent as they will interact with each others changes and cause very strange side effects Set aggressive indentation for all languages using the following code instead ( global-aggressive-indent-mode 1 ) Auto-indent code automatically","title":"DANGER::LSP clashes with aggressive indent"},{"location":"improving-code/formatting/clojure/","text":"Formatting Clojure code \u03bb\ufe0e The Clojure Style Guide is a very complete guide to the best practices in writing Clojure code, ensuring it is as easy as possible to read and maintain by Clojure developers. Spacemacs Clojure layer will carry out basic formatting as you type using . RET the cursor correctly indents on new lines. TAB key will left align the current line of code or selected region. Recommended Formatting configuration \u03bb\ufe0e These are the recommended settings to add to the dotspacemacs/user-config section of .spacemacs ( add-hook 'clojure-mode-hook #' aggressive-indent-mode ) ( setq clojure-indent-style 'align-arguments ) ( setq clojure-align-forms-automatically t ) Read the rest of this section for a deeper explanation of the above configuration. Alternatively, jump to the section on Linting","title":"Formatting Clojure code"},{"location":"improving-code/formatting/clojure/#formatting-clojure-code","text":"The Clojure Style Guide is a very complete guide to the best practices in writing Clojure code, ensuring it is as easy as possible to read and maintain by Clojure developers. Spacemacs Clojure layer will carry out basic formatting as you type using . RET the cursor correctly indents on new lines. TAB key will left align the current line of code or selected region.","title":"Formatting Clojure code"},{"location":"improving-code/formatting/clojure/#recommended-formatting-configuration","text":"These are the recommended settings to add to the dotspacemacs/user-config section of .spacemacs ( add-hook 'clojure-mode-hook #' aggressive-indent-mode ) ( setq clojure-indent-style 'align-arguments ) ( setq clojure-align-forms-automatically t ) Read the rest of this section for a deeper explanation of the above configuration. Alternatively, jump to the section on Linting","title":"Recommended Formatting configuration"},{"location":"install-spacemacs/","text":"Install Spacemacs \u03bb\ufe0e Install prerequisites: Emacs, Java 17, Clojure CLI and Command Line tools Clone or download Spacemacs , removing ~/.emacs.d if it already exists Clone the practicalli/spacemacs.d configuration to add common layers for Clojure development. Or start Emacs and use the Spacemacs install wizard for basic config, follow the manual configuration section for additional features. [optional] Install Fira Code font (change dotspacemacs-default-font to a name of a font on your operating system in .spacemacs.d/init.el in step 4) Install All The Icons fonts for doom modeline theme Clone Spacemacs \u03bb\ufe0e Use your favourite git client or the following command in a terminal window to clone Spacemacs: Free Desktop XDG config Classic config git clone https://github.com/syl20bnr/spacemacs ~/.config/emacs git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d Clone Practicalli Spacemacs configuration \u03bb\ufe0e Clone practicalli/spacemacs.d configuration or first create a fork and clone that fork Free Desktop XDG config Classic config Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.config/spacemacs Using HTTPS git clone https://github.com/practicalli/spacemacs.d ~/.config/spacemacs ~/.config/spacemacs/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.spacemacs.d Using HTTP git clone https://github.com/practicalli/spacemacs.d ~/.spacemacs.d ~/.spacemacs.d/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Emacs custom settings .spacemacs.d/init.el configuration separates Emacs custom settings into a emacs-custom-setting file. emacs-custom-setting should be added to version control if the Emacs customize menu has been used to define settings. emacs-custom-file is defined in the dotspacemacs/user-init of the Spacemacs configuration ( setq custom-file ( file-truename ( concat dotspacemacs-directory \"emacs-custom-settings.el\" ))) ( load custom-file ) A specific path could also be used to define the location of the custom file: (setq custom-file \"~/.emacs.d/.cache/custom-settings\") Install Fira Code font \u03bb\ufe0e Install Fira Code practicalli/spacemacs.d uses Fira Code, a mono-spaced font designed for source code and includes ligatures and many other features . !!!! TIP \"Use a different font with practicalli/spacemacs.d\" To use a different font when using the practicalli/spacemacs.d , edit .spacemacs.d/init.el and update the value for dotspacemacs-default-font to a name of a font on your system. All The Icon Fonts \u03bb\ufe0e practicalli/spacemacs.d configuration uses the modern looking doom modeline theme, which requires a few fonts and icons. SPC SPC all-the-icons-install-fonts once Spacemacs is running will install the fonts. Space q r to restart Spacemacs and see the finished results Spacemacs is ready for action \u03bb\ufe0e Spacemacs is now up and running and ready to take on the world. If you already know how to use Spacemacs, jump to the Clojure Projects section , otherwise look through the Spacemacs Basics section to learn how to use Vim style editing and work with files, buffers and windows in Spacemacs.","title":"Install Spacemacs"},{"location":"install-spacemacs/#install-spacemacs","text":"Install prerequisites: Emacs, Java 17, Clojure CLI and Command Line tools Clone or download Spacemacs , removing ~/.emacs.d if it already exists Clone the practicalli/spacemacs.d configuration to add common layers for Clojure development. Or start Emacs and use the Spacemacs install wizard for basic config, follow the manual configuration section for additional features. [optional] Install Fira Code font (change dotspacemacs-default-font to a name of a font on your operating system in .spacemacs.d/init.el in step 4) Install All The Icons fonts for doom modeline theme","title":"Install Spacemacs"},{"location":"install-spacemacs/#clone-spacemacs","text":"Use your favourite git client or the following command in a terminal window to clone Spacemacs: Free Desktop XDG config Classic config git clone https://github.com/syl20bnr/spacemacs ~/.config/emacs git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d","title":"Clone Spacemacs"},{"location":"install-spacemacs/#clone-practicalli-spacemacs-configuration","text":"Clone practicalli/spacemacs.d configuration or first create a fork and clone that fork Free Desktop XDG config Classic config Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.config/spacemacs Using HTTPS git clone https://github.com/practicalli/spacemacs.d ~/.config/spacemacs ~/.config/spacemacs/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.spacemacs.d Using HTTP git clone https://github.com/practicalli/spacemacs.d ~/.spacemacs.d ~/.spacemacs.d/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Emacs custom settings .spacemacs.d/init.el configuration separates Emacs custom settings into a emacs-custom-setting file. emacs-custom-setting should be added to version control if the Emacs customize menu has been used to define settings. emacs-custom-file is defined in the dotspacemacs/user-init of the Spacemacs configuration ( setq custom-file ( file-truename ( concat dotspacemacs-directory \"emacs-custom-settings.el\" ))) ( load custom-file ) A specific path could also be used to define the location of the custom file: (setq custom-file \"~/.emacs.d/.cache/custom-settings\")","title":"Clone Practicalli Spacemacs configuration"},{"location":"install-spacemacs/#install-fira-code-font","text":"Install Fira Code practicalli/spacemacs.d uses Fira Code, a mono-spaced font designed for source code and includes ligatures and many other features . !!!! TIP \"Use a different font with practicalli/spacemacs.d\" To use a different font when using the practicalli/spacemacs.d , edit .spacemacs.d/init.el and update the value for dotspacemacs-default-font to a name of a font on your system.","title":"Install Fira Code font"},{"location":"install-spacemacs/#all-the-icon-fonts","text":"practicalli/spacemacs.d configuration uses the modern looking doom modeline theme, which requires a few fonts and icons. SPC SPC all-the-icons-install-fonts once Spacemacs is running will install the fonts. Space q r to restart Spacemacs and see the finished results","title":"All The Icon Fonts"},{"location":"install-spacemacs/#spacemacs-is-ready-for-action","text":"Spacemacs is now up and running and ready to take on the world. If you already know how to use Spacemacs, jump to the Clojure Projects section , otherwise look through the Spacemacs Basics section to learn how to use Vim style editing and work with files, buffers and windows in Spacemacs.","title":"Spacemacs is ready for action"},{"location":"install-spacemacs/change-font/","text":"Fonts and Zooming \u03bb\ufe0e Any font currently installed in the operating system can be used for Spacemacs. practicalli/spacemacs.d sets Fira Code font, which is designed for working with source code and also supports ligatures. Spacemacs will use Source Code Pro by default. Fira Code \u03bb\ufe0e Fira Code is a free mono-spaced font with programming ligatures, with specific ligatures for Clojure. Space f e f to open the Spacemacs configuration file and edit the dotspacemacs-default-font values dotspacemacs-default-font ' ( \"Fira Code\" :size 12.0 :weight normal :width normal ) Ubuntu Mono \u03bb\ufe0e Ubuntu Mono is also a great font to use for code. This font is available from the Ubuntu Font Family and on all Ubuntu operating systems (and derivatives). Space f e f to open the Spacemacs configuration file and edit the dotspacemacs-default-font values dotspacemacs-default-font ' ( \"Ubuntu Mono\" :size 16 :weight normal :width normal ) Zoom Emacs Frame and Font Size \u03bb\ufe0e If you attach an external monitor, share your screen, give demos or presentations in Emacs, then you may need to scale the font size of your buffer or if using multiple buffers, zoom the size of your Emacs frame. Use the Spacemacs Zoom menu to enter a transient state that will let you zoom text or frame size. Key binding Description Space z f Zoom all Emacs frames, including the which-key and helm pop-up buffers Space z x Scale the font of the current buffer Update font size If font or frame size is often changed, edit your .spacemacs configuration, SPC f e d and change the :size setting in dotspacemacs-default-font .","title":"Font"},{"location":"install-spacemacs/change-font/#fonts-and-zooming","text":"Any font currently installed in the operating system can be used for Spacemacs. practicalli/spacemacs.d sets Fira Code font, which is designed for working with source code and also supports ligatures. Spacemacs will use Source Code Pro by default.","title":"Fonts and Zooming"},{"location":"install-spacemacs/change-font/#fira-code","text":"Fira Code is a free mono-spaced font with programming ligatures, with specific ligatures for Clojure. Space f e f to open the Spacemacs configuration file and edit the dotspacemacs-default-font values dotspacemacs-default-font ' ( \"Fira Code\" :size 12.0 :weight normal :width normal )","title":"Fira Code"},{"location":"install-spacemacs/change-font/#ubuntu-mono","text":"Ubuntu Mono is also a great font to use for code. This font is available from the Ubuntu Font Family and on all Ubuntu operating systems (and derivatives). Space f e f to open the Spacemacs configuration file and edit the dotspacemacs-default-font values dotspacemacs-default-font ' ( \"Ubuntu Mono\" :size 16 :weight normal :width normal )","title":"Ubuntu Mono"},{"location":"install-spacemacs/change-font/#zoom-emacs-frame-and-font-size","text":"If you attach an external monitor, share your screen, give demos or presentations in Emacs, then you may need to scale the font size of your buffer or if using multiple buffers, zoom the size of your Emacs frame. Use the Spacemacs Zoom menu to enter a transient state that will let you zoom text or frame size. Key binding Description Space z f Zoom all Emacs frames, including the which-key and helm pop-up buffers Space z x Scale the font of the current buffer Update font size If font or frame size is often changed, edit your .spacemacs configuration, SPC f e d and change the :size setting in dotspacemacs-default-font .","title":"Zoom Emacs Frame and Font Size"},{"location":"install-spacemacs/clj-kondo-via-lsp/","text":"clj-kondo Server \u03bb\ufe0e For environments where the clj-kondo binary does not run , configure clj-kondo-lsp-server as an language server protocol (LSP) server. This provides the same features as using clj-kondo as a linter . Example configuration is provided in practicalli/spacemacs.d Not designed as a full LSP implementation clj-kondo server only provides static analysis data and is not a full implementation of the Language Server Protocol. Clojure LSP is implementing the Language Server Protocol in full for Clojure and is built on top of the analytic data generated by clj-kondo A process for each project \u03bb\ufe0e When opening a Clojure project, a prompt asks if the project should be imported. Every imported project will spawn an LSP process. LSP will remember which projects are imported and spawns an LSP process if Emacs is restarted, adding a few seconds to the startup time. SPC a p calls the list-process command which includes all the clojure-lsp processes if you are concerned about resource usage, although this is very low. j / k navigates the list of processes, d deletes a process and q quits the process list browser. UI differences \u03bb\ufe0e Using clj-kondo via LSP shows the text of its messages on the right hand side of the buffer when you move the cursor over an error. When using clj-kondo as a linter, the messages are shown in a popup. Install and Configure clj-kondo via LSP \u03bb\ufe0e Download the clj-kondo-lsp-server-standalone.jar Save the clj-kondo jar file to the path to ~/.local/apps/clj-kondo-lsp-server-standalone.jar or preferred location. Create a script called clojure-lsp-server-clj-kondo and add the java command to run the LSP server, updating the path to the .jar file if required. #!/bin/sh java -jar ~/.local/apps/clj-kondo-lsp-server-standalone.jar Space f e d to open the Spacemacs configuration file Add lsp to the dotspacemacs-layers-configuration Add the following code to dotspacemacs/user-config Spacemacs Configuration - dotspacemacs/user-config (use-package lsp-mode :ensure t :hook ((clojure-mode . lsp)) :commands lsp :custom ((lsp-clojure-server-command '(\"clojure-lsp-server-clj-kondo\"))) :config (dolist (m '(clojure-mode clojurescript-mode)) (add-to-list 'lsp-language-id-configuration `(,m . \"clojure\")))) Space f s to save the file and Space q r to restart Emacs. This will download the required packages and load in the LSP configuration in order.","title":"clj-kondo Server"},{"location":"install-spacemacs/clj-kondo-via-lsp/#clj-kondo-server","text":"For environments where the clj-kondo binary does not run , configure clj-kondo-lsp-server as an language server protocol (LSP) server. This provides the same features as using clj-kondo as a linter . Example configuration is provided in practicalli/spacemacs.d Not designed as a full LSP implementation clj-kondo server only provides static analysis data and is not a full implementation of the Language Server Protocol. Clojure LSP is implementing the Language Server Protocol in full for Clojure and is built on top of the analytic data generated by clj-kondo","title":"clj-kondo Server"},{"location":"install-spacemacs/clj-kondo-via-lsp/#a-process-for-each-project","text":"When opening a Clojure project, a prompt asks if the project should be imported. Every imported project will spawn an LSP process. LSP will remember which projects are imported and spawns an LSP process if Emacs is restarted, adding a few seconds to the startup time. SPC a p calls the list-process command which includes all the clojure-lsp processes if you are concerned about resource usage, although this is very low. j / k navigates the list of processes, d deletes a process and q quits the process list browser.","title":"A process for each project"},{"location":"install-spacemacs/clj-kondo-via-lsp/#ui-differences","text":"Using clj-kondo via LSP shows the text of its messages on the right hand side of the buffer when you move the cursor over an error. When using clj-kondo as a linter, the messages are shown in a popup.","title":"UI differences"},{"location":"install-spacemacs/clj-kondo-via-lsp/#install-and-configure-clj-kondo-via-lsp","text":"Download the clj-kondo-lsp-server-standalone.jar Save the clj-kondo jar file to the path to ~/.local/apps/clj-kondo-lsp-server-standalone.jar or preferred location. Create a script called clojure-lsp-server-clj-kondo and add the java command to run the LSP server, updating the path to the .jar file if required. #!/bin/sh java -jar ~/.local/apps/clj-kondo-lsp-server-standalone.jar Space f e d to open the Spacemacs configuration file Add lsp to the dotspacemacs-layers-configuration Add the following code to dotspacemacs/user-config Spacemacs Configuration - dotspacemacs/user-config (use-package lsp-mode :ensure t :hook ((clojure-mode . lsp)) :commands lsp :custom ((lsp-clojure-server-command '(\"clojure-lsp-server-clj-kondo\"))) :config (dolist (m '(clojure-mode clojurescript-mode)) (add-to-list 'lsp-language-id-configuration `(,m . \"clojure\")))) Space f s to save the file and Space q r to restart Emacs. This will download the required packages and load in the LSP configuration in order.","title":"Install and Configure clj-kondo via LSP"},{"location":"install-spacemacs/clojure-layer/","text":"Adding Clojure support to Spacemacs \u03bb\ufe0e Adding Clojure support to Spacemacs is as easy as adding the Clojure layer to the Spacemacs configuration. Spacemacs can add the Clojure layer automatically, when you open a Clojure or ClojureScript file ( .clj .cljc .cljs ) for the very first time. Spacemacs will prompt you, asking if you wish to install the Clojure layer. Saying yes will add clojure to the ~/.spacemacs configuration and download all the relevant Emacs packages. Once the Clojure packages have downloaded, you are ready to use all the Clojure features. Restart Spacemacs after larger changes Space q r to restart Spacemacs when significant changes are made or something is not working correctly","title":"Clojure Layer"},{"location":"install-spacemacs/clojure-layer/#adding-clojure-support-to-spacemacs","text":"Adding Clojure support to Spacemacs is as easy as adding the Clojure layer to the Spacemacs configuration. Spacemacs can add the Clojure layer automatically, when you open a Clojure or ClojureScript file ( .clj .cljc .cljs ) for the very first time. Spacemacs will prompt you, asking if you wish to install the Clojure layer. Saying yes will add clojure to the ~/.spacemacs configuration and download all the relevant Emacs packages. Once the Clojure packages have downloaded, you are ready to use all the Clojure features. Restart Spacemacs after larger changes Space q r to restart Spacemacs when significant changes are made or something is not working correctly","title":"Adding Clojure support to Spacemacs"},{"location":"install-spacemacs/emacsclient-git-commit-messages/","text":"Emacsclient for Git commit messages \u03bb\ufe0e Configure the core.editor property with emacsclient to open Emacs for editing Git commit messages (assuming you do not specify the -m \"commit message\" option to the git command). You can run emacsclient in one of several ways (try these approaches until you find which one worked best for your operating system). 1) in the same terminal as your git command, preferably with Emacs persistent server running. git config --global core.editor \"emacsclient --tty\" 2) create a new Emacs frame, if you have Emacs persistent server running. git config --global core.editor \"emacsclient --no-wait --create-frame\" 3) open in an existing Emacs application, if you are always running Emacs. git config --global core.editor \"emacsclient --no-wait\" 4) Running Emacs as a daemon git config --global core.editor \"emacsclient --alternate-editor\" Or configure an operating system environment variable called ALTERNATE_EDITOR as an empty string, \"\" , which will call emacs --daemon if emacs is not running. Beware of old Emacs installs shipped with MacOSX If emacsclient is not working correctly, check to see which Emacs version it run, SPC SPC emacs-version . Some MacOSX versions shipped with a very old version of Emacs (version 22).","title":"Git Commit Message"},{"location":"install-spacemacs/emacsclient-git-commit-messages/#emacsclient-for-git-commit-messages","text":"Configure the core.editor property with emacsclient to open Emacs for editing Git commit messages (assuming you do not specify the -m \"commit message\" option to the git command). You can run emacsclient in one of several ways (try these approaches until you find which one worked best for your operating system). 1) in the same terminal as your git command, preferably with Emacs persistent server running. git config --global core.editor \"emacsclient --tty\" 2) create a new Emacs frame, if you have Emacs persistent server running. git config --global core.editor \"emacsclient --no-wait --create-frame\" 3) open in an existing Emacs application, if you are always running Emacs. git config --global core.editor \"emacsclient --no-wait\" 4) Running Emacs as a daemon git config --global core.editor \"emacsclient --alternate-editor\" Or configure an operating system environment variable called ALTERNATE_EDITOR as an empty string, \"\" , which will call emacs --daemon if emacs is not running. Beware of old Emacs installs shipped with MacOSX If emacsclient is not working correctly, check to see which Emacs version it run, SPC SPC emacs-version . Some MacOSX versions shipped with a very old version of Emacs (version 22).","title":"Emacsclient for Git commit messages"},{"location":"install-spacemacs/emacsclient-server/","text":"emacsclient and persistent server \u03bb\ufe0e emacsclient will instantly open files in Emacs once an Emacs server process is running. Emacs persistent server will run in the background, even when Emacs is not running, listening for requests to open files. Run Spacemacs once per OS login Emacs is typically run once and kept open, as its feature rich enough to do all your tasks from Emacs. Therefore the few seconds startup time is not seen as an issue. If you stop and start Emacs constantly, as you may do with Vim, then you will of course notice this short delay. Configure Emacs persistent server \u03bb\ufe0e Space f e d to edit your .spacemacs configuration Set dotspacemacs-enable-server and dotspacemacs-persistent-server to t (true). ;; If non-nil, start an Emacs server if one is not already running. ;; (default nil) dotspacemacs-enable-server t ;; Set the emacs server socket location. ;; If nil, uses whatever the Emacs default is, otherwise a directory path ;; like \\\"~/.emacs.d/server\\\". It has no effect if ;; `dotspacemacs-enable-server' is nil. ;; (default nil) dotspacemacs-server-socket-dir nil ;; If non-nil, advise quit functions to keep server open when quitting. ;; (default nil) dotspacemacs-persistent-server t Old Emacs installs shipped with MacOSX If emacsclient is not working correctly, check to see which Emacs version it run, SPC SPC emacs-version . Some MacOSX versions shipped with a very old version of Emacs (version 22).","title":"emacsclient and persistent server"},{"location":"install-spacemacs/emacsclient-server/#emacsclient-and-persistent-server","text":"emacsclient will instantly open files in Emacs once an Emacs server process is running. Emacs persistent server will run in the background, even when Emacs is not running, listening for requests to open files. Run Spacemacs once per OS login Emacs is typically run once and kept open, as its feature rich enough to do all your tasks from Emacs. Therefore the few seconds startup time is not seen as an issue. If you stop and start Emacs constantly, as you may do with Vim, then you will of course notice this short delay.","title":"emacsclient and persistent server"},{"location":"install-spacemacs/emacsclient-server/#configure-emacs-persistent-server","text":"Space f e d to edit your .spacemacs configuration Set dotspacemacs-enable-server and dotspacemacs-persistent-server to t (true). ;; If non-nil, start an Emacs server if one is not already running. ;; (default nil) dotspacemacs-enable-server t ;; Set the emacs server socket location. ;; If nil, uses whatever the Emacs default is, otherwise a directory path ;; like \\\"~/.emacs.d/server\\\". It has no effect if ;; `dotspacemacs-enable-server' is nil. ;; (default nil) dotspacemacs-server-socket-dir nil ;; If non-nil, advise quit functions to keep server open when quitting. ;; (default nil) dotspacemacs-persistent-server t Old Emacs installs shipped with MacOSX If emacsclient is not working correctly, check to see which Emacs version it run, SPC SPC emacs-version . Some MacOSX versions shipped with a very old version of Emacs (version 22).","title":"Configure Emacs persistent server"},{"location":"install-spacemacs/enhance-clojure-experience/","text":"Enhanced Clojure experience \u03bb\ufe0e Enhance the clojure layer by adding automatic linting (clj-kondo), refactoring (clj-refactor) and recommended CIDER options. Complement the Clojure layer with general development tools including a git client (Magit), markdown and org-mode support. practicalli/spacemacs.d provides a documented configuration of the layers for Clojure development and many useful customization's for Spacemacs. Layer name Description auto-completion complete names of functions and symbol names, also list snippets. clojure CIDER , optionally with clj-refactor and clj-kondo linter git git version control with Magit in full screen, with fringe highlighting of changes in buffers github GitHub API for remote repositories and gists lsp language server protocol - static analysis driven editing features markdown writing project descriptions in README.md and other markdown files multiple-cursors multiple concurrent edits with more than one cursor g r org write documentation, organize tasks with org-mode spell-checking spell check as you type using your Operating System spell checker SPC S s syntax-checking syntax checking / linting as you type (flycheck with clj-kondo for Clojure) treemacs visual file system browser (file explorer) SPC p t version-control general version control features, eg. ediff, fringe highlights Install clj-kondo binary Automatic linting requires the clj-kondo binary installed on the operating system path, or the Clojure LSP server which contains clj-kondo. Practicalli Clojure contains install instructions for these tools. Add layers \u03bb\ufe0e SPC f e d opens the .spacemacs configuration file ( M-m f e d holy mode) Use SPC s s and start typing configuration-layers to search for the dotspacemacs-configuration-layers section. RTN to jump to the highlighted line, C-j to move down the matching lines, C-k to move up. Either copy the dotspacemacs-configuration-layers from practicalli/spacemacs.d or copy the individual configurations in the rest of this page. SPC f s to save the file. SPC q r to restart Spacemacs which will load and configure all the new layers and their Emacs packages. Reload Configuration or Restart Emacs Space q r to restart Emacs with a new configuration is recommended when making a big change or adding layers. Space f e ++R++ to reload the ~/.spacemacs configuration for smaller changes. Practicalli Spacemacs Example Configuration Auto-completion \u03bb\ufe0e Enable auto-completion for programming languages. In Clojure this includes functions, namespaces and other symbols. Yasnippet are included in the auto-completion popup and are sorted with the most frequently used snippets first. ( auto-completion :variables auto-completion-enable-help-tooltip t auto-completion-enable-snippets-in-popup t auto-completion-enable-sort-by-usage t ) To have auto-completion as soon as typing starts, add auto-completion-idle-delay nil to the auto-completion variables Clojure \u03bb\ufe0e Enable Clojure support but differ the backend to Clojure LSP rather than CIDER. The clojure-lsp binary should be downloaded automatically. Enable the kaocha-runner to use Kaocha test runner from within the REPL. ( clojure :variables cider-repl-display-help-banner nil ;; disable help banner cider-pprint-fn 'fipp ;; fast pretty printing cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100 ;; limit lines shown in REPL buffer to prevent performance issues clojure-indent-style 'align-arguments clojure-align-forms-automatically t clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level clojure-enable-kaocha-runner t ) Add the variable cider-result-overlay-position 'at-point to show results shown right after expression (useful for evaluated a nested expression). Otherwise results from evaluating expressions show at the end of the top-level expression. Git and GitHub \u03bb\ufe0e Enable Magit Git client in Emacs and open Magit Status, SPC g s full screen (q restores previous layout). Show word-granularity differences in current diff hunk. Enable GitHub features to clone repositories, push commits and create pull requests (Magit Forge) all from within Emacs. Enable fringe highlight of version control (Git) changes in buffers ( git :variables git-magit-status-fullscreen t magit-diff-refine-hunk t git-enable-magit-todos-plugin t ) github ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t ) Language Server Protocol (LSP) \u03bb\ufe0e Clojure LSP provides common editor features across all Clojure aware editors. A configuration with minimal visual impact. ( lsp :variables ;; Formatting and indentation lsp-enable-on-type-formatting t lsp-enable-indentation t lsp-enable-snippet t lsp-enable-symbol-highlighting t ;; popup documentation lsp-ui-doc-enable t ;; documentation popups lsp-ui-doc-show-with-cursor nil ;; doc popup triggered by cursor lsp-ui-doc-show-with-mouse nil ;; doc popup triggered by mouse lsp-ui-doc-delay 1 ;; delay in seconds for popup to display lsp-ui-doc-include-signature t ;; include function signature ;; lsp-ui-doc-position 'top ;; top bottom at-point ;; lsp-ui-doc-alignment 'window ;; frame window ;; code actions and diagnostics text as right-hand side of buffer lsp-ui-sideline-enable nil lsp-ui-sideline-show-code-actions nil ;; lsp-ui-sideline-delay 500 ;; lsp-ui-sideline-show-diagnostics nil ;; function reference count and test coverage lsp-lens-enable t ;; Efficient use of space in treemacs-lsp display treemacs-space-between-root-nodes nil ;; Optimization for large files lsp-file-watch-threshold 10000 lsp-log-io nil ) Multiple cursors \u03bb\ufe0e Edit multiple lines of text concurrently by creating multiple cursors, especially useful for editing the form of lines which have different values. multiple-cursors Org-mode \u03bb\ufe0e Enable Spacemacs Org-mode with support for a range of additional features useful for development, including a custom TODO list workflow. ( org :variables org-enable-github-support t org-enable-bootstrap-support t org-enable-reveal-js-support t org-want-todo-bindings t org-enable-org-journal-support t org-journal-dir \"~/projects/journal/\" org-journal-file-format \"%Y-%m-%d\" org-journal-date-prefix \"#+TITLE: \" org-journal-date-format \"%A, %B %d %Y\" org-journal-time-prefix \"* \" org-journal-time-format \"\" org-journal-carryover-items \"TODO=\\\"TODO\\\"|TODO=\\\"DOING\\\"|TODO=\\\"BLOCKED\\\"|TODO=\\\"REVIEW\\\"\" ;; org-enable-jira-support t ;; jiralib-url \"https://org-domain.atlassian.net:443\" ) Layouts \u03bb\ufe0e spacemacs-layouts layer added to set variables, SPC TAB restricted to current layout buffers Kill buffers when killing layer - SPC l x ( spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t persp-autokill-buffer-on-remove 'kill-weak ) Configure Doom modeline \u03bb\ufe0e Configuration used by Practicalli for the Doom modeline, based on the configuration: seagle0128/doom-modeline ( spacemacs-modeline :variables doom-modeline-height 12 doom-modeline-major-mode-color-icon t doom-modeline-buffer-file-name-style 'relative-to-project doom-modeline-display-default-persp-name t doom-modeline-minor-modes nil doom-modeline-modal-icon nil ) Spell checking \u03bb\ufe0e Spell as you type with Flyspell package, which requires external command such as ispell, hunspell, aspell SPC S s to check the spelling of the current word spell-checking Programming Ligatures \u03bb\ufe0e Support font ligatures (fancy symbols) in all programming language modes, when using Fira Codes and other fonts that support ligatures. Including ligatures for text-mode may cause issues with org-mode and magit. ( unicode-fonts :variables unicode-fonts-enable-ligatures t unicode-fonts-ligature-modes ' ( prog-mode ))","title":"Enhanced Clojure experience"},{"location":"install-spacemacs/enhance-clojure-experience/#enhanced-clojure-experience","text":"Enhance the clojure layer by adding automatic linting (clj-kondo), refactoring (clj-refactor) and recommended CIDER options. Complement the Clojure layer with general development tools including a git client (Magit), markdown and org-mode support. practicalli/spacemacs.d provides a documented configuration of the layers for Clojure development and many useful customization's for Spacemacs. Layer name Description auto-completion complete names of functions and symbol names, also list snippets. clojure CIDER , optionally with clj-refactor and clj-kondo linter git git version control with Magit in full screen, with fringe highlighting of changes in buffers github GitHub API for remote repositories and gists lsp language server protocol - static analysis driven editing features markdown writing project descriptions in README.md and other markdown files multiple-cursors multiple concurrent edits with more than one cursor g r org write documentation, organize tasks with org-mode spell-checking spell check as you type using your Operating System spell checker SPC S s syntax-checking syntax checking / linting as you type (flycheck with clj-kondo for Clojure) treemacs visual file system browser (file explorer) SPC p t version-control general version control features, eg. ediff, fringe highlights Install clj-kondo binary Automatic linting requires the clj-kondo binary installed on the operating system path, or the Clojure LSP server which contains clj-kondo. Practicalli Clojure contains install instructions for these tools.","title":"Enhanced Clojure experience"},{"location":"install-spacemacs/enhance-clojure-experience/#add-layers","text":"SPC f e d opens the .spacemacs configuration file ( M-m f e d holy mode) Use SPC s s and start typing configuration-layers to search for the dotspacemacs-configuration-layers section. RTN to jump to the highlighted line, C-j to move down the matching lines, C-k to move up. Either copy the dotspacemacs-configuration-layers from practicalli/spacemacs.d or copy the individual configurations in the rest of this page. SPC f s to save the file. SPC q r to restart Spacemacs which will load and configure all the new layers and their Emacs packages. Reload Configuration or Restart Emacs Space q r to restart Emacs with a new configuration is recommended when making a big change or adding layers. Space f e ++R++ to reload the ~/.spacemacs configuration for smaller changes. Practicalli Spacemacs Example Configuration","title":"Add layers"},{"location":"install-spacemacs/enhance-clojure-experience/#auto-completion","text":"Enable auto-completion for programming languages. In Clojure this includes functions, namespaces and other symbols. Yasnippet are included in the auto-completion popup and are sorted with the most frequently used snippets first. ( auto-completion :variables auto-completion-enable-help-tooltip t auto-completion-enable-snippets-in-popup t auto-completion-enable-sort-by-usage t ) To have auto-completion as soon as typing starts, add auto-completion-idle-delay nil to the auto-completion variables","title":"Auto-completion"},{"location":"install-spacemacs/enhance-clojure-experience/#clojure","text":"Enable Clojure support but differ the backend to Clojure LSP rather than CIDER. The clojure-lsp binary should be downloaded automatically. Enable the kaocha-runner to use Kaocha test runner from within the REPL. ( clojure :variables cider-repl-display-help-banner nil ;; disable help banner cider-pprint-fn 'fipp ;; fast pretty printing cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100 ;; limit lines shown in REPL buffer to prevent performance issues clojure-indent-style 'align-arguments clojure-align-forms-automatically t clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level clojure-enable-kaocha-runner t ) Add the variable cider-result-overlay-position 'at-point to show results shown right after expression (useful for evaluated a nested expression). Otherwise results from evaluating expressions show at the end of the top-level expression.","title":"Clojure"},{"location":"install-spacemacs/enhance-clojure-experience/#git-and-github","text":"Enable Magit Git client in Emacs and open Magit Status, SPC g s full screen (q restores previous layout). Show word-granularity differences in current diff hunk. Enable GitHub features to clone repositories, push commits and create pull requests (Magit Forge) all from within Emacs. Enable fringe highlight of version control (Git) changes in buffers ( git :variables git-magit-status-fullscreen t magit-diff-refine-hunk t git-enable-magit-todos-plugin t ) github ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t )","title":"Git and GitHub"},{"location":"install-spacemacs/enhance-clojure-experience/#language-server-protocol-lsp","text":"Clojure LSP provides common editor features across all Clojure aware editors. A configuration with minimal visual impact. ( lsp :variables ;; Formatting and indentation lsp-enable-on-type-formatting t lsp-enable-indentation t lsp-enable-snippet t lsp-enable-symbol-highlighting t ;; popup documentation lsp-ui-doc-enable t ;; documentation popups lsp-ui-doc-show-with-cursor nil ;; doc popup triggered by cursor lsp-ui-doc-show-with-mouse nil ;; doc popup triggered by mouse lsp-ui-doc-delay 1 ;; delay in seconds for popup to display lsp-ui-doc-include-signature t ;; include function signature ;; lsp-ui-doc-position 'top ;; top bottom at-point ;; lsp-ui-doc-alignment 'window ;; frame window ;; code actions and diagnostics text as right-hand side of buffer lsp-ui-sideline-enable nil lsp-ui-sideline-show-code-actions nil ;; lsp-ui-sideline-delay 500 ;; lsp-ui-sideline-show-diagnostics nil ;; function reference count and test coverage lsp-lens-enable t ;; Efficient use of space in treemacs-lsp display treemacs-space-between-root-nodes nil ;; Optimization for large files lsp-file-watch-threshold 10000 lsp-log-io nil )","title":"Language Server Protocol (LSP)"},{"location":"install-spacemacs/enhance-clojure-experience/#multiple-cursors","text":"Edit multiple lines of text concurrently by creating multiple cursors, especially useful for editing the form of lines which have different values. multiple-cursors","title":"Multiple cursors"},{"location":"install-spacemacs/enhance-clojure-experience/#org-mode","text":"Enable Spacemacs Org-mode with support for a range of additional features useful for development, including a custom TODO list workflow. ( org :variables org-enable-github-support t org-enable-bootstrap-support t org-enable-reveal-js-support t org-want-todo-bindings t org-enable-org-journal-support t org-journal-dir \"~/projects/journal/\" org-journal-file-format \"%Y-%m-%d\" org-journal-date-prefix \"#+TITLE: \" org-journal-date-format \"%A, %B %d %Y\" org-journal-time-prefix \"* \" org-journal-time-format \"\" org-journal-carryover-items \"TODO=\\\"TODO\\\"|TODO=\\\"DOING\\\"|TODO=\\\"BLOCKED\\\"|TODO=\\\"REVIEW\\\"\" ;; org-enable-jira-support t ;; jiralib-url \"https://org-domain.atlassian.net:443\" )","title":"Org-mode"},{"location":"install-spacemacs/enhance-clojure-experience/#layouts","text":"spacemacs-layouts layer added to set variables, SPC TAB restricted to current layout buffers Kill buffers when killing layer - SPC l x ( spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t persp-autokill-buffer-on-remove 'kill-weak )","title":"Layouts"},{"location":"install-spacemacs/enhance-clojure-experience/#configure-doom-modeline","text":"Configuration used by Practicalli for the Doom modeline, based on the configuration: seagle0128/doom-modeline ( spacemacs-modeline :variables doom-modeline-height 12 doom-modeline-major-mode-color-icon t doom-modeline-buffer-file-name-style 'relative-to-project doom-modeline-display-default-persp-name t doom-modeline-minor-modes nil doom-modeline-modal-icon nil )","title":"Configure Doom modeline"},{"location":"install-spacemacs/enhance-clojure-experience/#spell-checking","text":"Spell as you type with Flyspell package, which requires external command such as ispell, hunspell, aspell SPC S s to check the spelling of the current word spell-checking","title":"Spell checking"},{"location":"install-spacemacs/enhance-clojure-experience/#programming-ligatures","text":"Support font ligatures (fancy symbols) in all programming language modes, when using Fira Codes and other fonts that support ligatures. Including ligatures for text-mode may cause issues with org-mode and magit. ( unicode-fonts :variables unicode-fonts-enable-ligatures t unicode-fonts-ligature-modes ' ( prog-mode ))","title":"Programming Ligatures"},{"location":"install-spacemacs/eshell/","text":"Command Line Shell with Spacemacs \u03bb\ufe0e A simple shell can be run with the shell function. This shell function opens a new buffer with a shell prompt and displays that buffer, replacing the currently highlighted buffer. Space ' opens a popup shell buffer in the root of the user account. Consecutive presses toggle the shell popup buffer for quick access. Space p ' opens a popup buffer in the root of the current project directory. exit command at the shell prompt to close the shell. Adding the shell layer \u03bb\ufe0e Add the shell layer to dotspacemacs-configuration-layers section of ~/.spacemacs . Or SPC SPC eshell will prompt to install the shell package if its not currently added. The shell popup is configured in the dotspacemacs-configure-layers section of the ~/.spacemacs file. (shell :variables shell-default-height 30 shell-default-position 'bottom) shell-default-position can be top, bottom, left or right. shell-default-height defines the percentage of the Spacemacs frame to use. Customising eshell prompt \u03bb\ufe0e Practicalli created a custom Eshell prompt. The code can be found in the practicalli/spacemacs.d configuration, in the dotspacemacs/user-config section. Configure shell to use multi-term \u03bb\ufe0e multi-term uses the default shell from the operating system. Set the shell-default-shell variable to 'multi-term in the shell layer in the ~/.spacemacs file. Here is an example with the multi-term shell set, along with popup size and location (shell :variables shell-default-shell 'multi-term shell-default-height 30 shell-default-position 'bottom) Space ' now opens a shell buffer as a popup with the default shell of your operating system terminal. Configure multi-term to use zsh \u03bb\ufe0e I have zsh configured for my terminal window which uses prezto to provide extra shell features. Add the following to dotspacemacs/user-config in your ~/.spacemacs file (setq multi-term-program \"/usr/bin/zsh\") Space f e to save the ~/.spacemacs file. Space f e R to reload the configuration, or SPC q r to restart Spacemacs.","title":"Emacs Shell"},{"location":"install-spacemacs/eshell/#command-line-shell-with-spacemacs","text":"A simple shell can be run with the shell function. This shell function opens a new buffer with a shell prompt and displays that buffer, replacing the currently highlighted buffer. Space ' opens a popup shell buffer in the root of the user account. Consecutive presses toggle the shell popup buffer for quick access. Space p ' opens a popup buffer in the root of the current project directory. exit command at the shell prompt to close the shell.","title":"Command Line Shell with Spacemacs"},{"location":"install-spacemacs/eshell/#adding-the-shell-layer","text":"Add the shell layer to dotspacemacs-configuration-layers section of ~/.spacemacs . Or SPC SPC eshell will prompt to install the shell package if its not currently added. The shell popup is configured in the dotspacemacs-configure-layers section of the ~/.spacemacs file. (shell :variables shell-default-height 30 shell-default-position 'bottom) shell-default-position can be top, bottom, left or right. shell-default-height defines the percentage of the Spacemacs frame to use.","title":"Adding the shell layer"},{"location":"install-spacemacs/eshell/#customising-eshell-prompt","text":"Practicalli created a custom Eshell prompt. The code can be found in the practicalli/spacemacs.d configuration, in the dotspacemacs/user-config section.","title":"Customising eshell prompt"},{"location":"install-spacemacs/eshell/#configure-shell-to-use-multi-term","text":"multi-term uses the default shell from the operating system. Set the shell-default-shell variable to 'multi-term in the shell layer in the ~/.spacemacs file. Here is an example with the multi-term shell set, along with popup size and location (shell :variables shell-default-shell 'multi-term shell-default-height 30 shell-default-position 'bottom) Space ' now opens a shell buffer as a popup with the default shell of your operating system terminal.","title":"Configure shell to use multi-term"},{"location":"install-spacemacs/eshell/#configure-multi-term-to-use-zsh","text":"I have zsh configured for my terminal window which uses prezto to provide extra shell features. Add the following to dotspacemacs/user-config in your ~/.spacemacs file (setq multi-term-program \"/usr/bin/zsh\") Space f e to save the ~/.spacemacs file. Space f e R to reload the configuration, or SPC q r to restart Spacemacs.","title":"Configure multi-term to use zsh"},{"location":"install-spacemacs/evil-structural-editing/","text":"Evil Safe Structural Editing \u03bb\ufe0e The Clojure layer also includes evil-cleverparens which ensures Clojure code structure is respected. Safe structural editing in Evil normal state respects structural editing too, meaning the standard evil commands can be used for cutting and deleting text without breaking Clojure or Lisp code structures. Safe structural editing is provided by the package evil-cleverparens which is included in the Clojure layer. By default this mode is not activated. Spacemacs Evil Description SPC m T s , T s Enable evil safe structural editing for the current buffer When enabled the symbol \ud83c\udd82 is displayed in the mode-line. Enable for all Clojure buffers by adding the following function in dotspacemacs/user-config (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode) Or to enable evil safe structural editing for all supported major modes, use this function instead: (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks) Manually managing structure \u03bb\ufe0e Although it is not structural editing, in Evil you can delete to a particular character. Clojure code inside of () can be deleted without deleting the closing ) Enter normal mode Move to the starting point of the text you wish to delete d t ) - delete everything up to, but not including the closing parenthesis","title":"Evil Structural Editing"},{"location":"install-spacemacs/evil-structural-editing/#evil-safe-structural-editing","text":"The Clojure layer also includes evil-cleverparens which ensures Clojure code structure is respected. Safe structural editing in Evil normal state respects structural editing too, meaning the standard evil commands can be used for cutting and deleting text without breaking Clojure or Lisp code structures. Safe structural editing is provided by the package evil-cleverparens which is included in the Clojure layer. By default this mode is not activated. Spacemacs Evil Description SPC m T s , T s Enable evil safe structural editing for the current buffer When enabled the symbol \ud83c\udd82 is displayed in the mode-line. Enable for all Clojure buffers by adding the following function in dotspacemacs/user-config (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode) Or to enable evil safe structural editing for all supported major modes, use this function instead: (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks)","title":"Evil Safe Structural Editing"},{"location":"install-spacemacs/evil-structural-editing/#manually-managing-structure","text":"Although it is not structural editing, in Evil you can delete to a particular character. Clojure code inside of () can be deleted without deleting the closing ) Enter normal mode Move to the starting point of the text you wish to delete d t ) - delete everything up to, but not including the closing parenthesis","title":"Manually managing structure"},{"location":"install-spacemacs/fancify-symbols/","text":"Clojure Fancy Symbols \u03bb\ufe0e Set the clojure layer variable clojure-enable-fancify-symbols to t and anonymous functions, partial functions and sets are represented with Greek-style symbols emacs tile=\"Spacemacs Configuration\" dotspacemacs-configuration-layers '( (clojure :variables clojure-enable-fancify-symbols nil)) Fancy symbols can cause confusion Fancy symbols can be an engaging way to write clojure, although they may be an inconvenience especially when demonstrating or pairing on code to other people","title":"Fancy Symbols"},{"location":"install-spacemacs/fancify-symbols/#clojure-fancy-symbols","text":"Set the clojure layer variable clojure-enable-fancify-symbols to t and anonymous functions, partial functions and sets are represented with Greek-style symbols emacs tile=\"Spacemacs Configuration\" dotspacemacs-configuration-layers '( (clojure :variables clojure-enable-fancify-symbols nil)) Fancy symbols can cause confusion Fancy symbols can be an engaging way to write clojure, although they may be an inconvenience especially when demonstrating or pairing on code to other people","title":"Clojure Fancy Symbols"},{"location":"install-spacemacs/line-numbers/","text":"Line Numbers \u03bb\ufe0e Space t s menu toggles line numbers, showing consecutive (absolute) A , relative R or visual V layout. Configure dotspacemacs-line-numbers in Spacemacs configuration file to show line numbers by default . Relative line numbers for Evil \u03bb\ufe0e A relative numbering style ( visual , relative ) is highly recommended for vim-style editing as it provides an effective way to apply actions to multiple lines 10 j in Evil normal mode will jump 10 lines forward g c 9 j will comment 9 lines from current, downwards 24 g r j will select multiple cursors for the next 24 lines With relative numbering, the current line number is shown and all other numbers are relative to the number of lines away they are from the current line. Relative numbering is useful for jumping to different parts of your file or running commands on a number of lines, eg. delete, indent, multiple cursors ( g r ) Visual style line number configuration \u03bb\ufe0e Practicalli recommends using visual line numbers for Vim style editing, which provides relative numbering that does not count hidden or folded code . SPC f e d to open the .spacemacs file and SPC s s dotspacemacs-line-numbers` to jump to the configuration option. Add this configuration and SPC f s to save the file. SPC f e R to reload the configuration (or SPC q r to restart Spacemacs). dotspacemacs-line-numbers ' ( :visual t :disabled-for-modes dired-mode doc-view-mode pdf-view-mode :size-limit-kb 1000 ) The configuration provides visual line numbers for buffers all buffers except dired, doc-view and pdf-view buffers. Line numbers are also disabled for large files, as it can slow Emacs down considerably (although this may be less of a problem with Emacs 26.3 onward and native line numbers). Turn line numbers off for all buffers by setting the dotspacemacs-line-numbers value to the default nil value. dotspacemacs-line-numbers nil Jumping to a line without line numbers Space j l labels each line with a unique letter combination providing a quick way to a line even if there are no line numbers.","title":"Line Numbers"},{"location":"install-spacemacs/line-numbers/#line-numbers","text":"Space t s menu toggles line numbers, showing consecutive (absolute) A , relative R or visual V layout. Configure dotspacemacs-line-numbers in Spacemacs configuration file to show line numbers by default .","title":"Line Numbers"},{"location":"install-spacemacs/line-numbers/#relative-line-numbers-for-evil","text":"A relative numbering style ( visual , relative ) is highly recommended for vim-style editing as it provides an effective way to apply actions to multiple lines 10 j in Evil normal mode will jump 10 lines forward g c 9 j will comment 9 lines from current, downwards 24 g r j will select multiple cursors for the next 24 lines With relative numbering, the current line number is shown and all other numbers are relative to the number of lines away they are from the current line. Relative numbering is useful for jumping to different parts of your file or running commands on a number of lines, eg. delete, indent, multiple cursors ( g r )","title":"Relative line numbers for Evil"},{"location":"install-spacemacs/line-numbers/#visual-style-line-number-configuration","text":"Practicalli recommends using visual line numbers for Vim style editing, which provides relative numbering that does not count hidden or folded code . SPC f e d to open the .spacemacs file and SPC s s dotspacemacs-line-numbers` to jump to the configuration option. Add this configuration and SPC f s to save the file. SPC f e R to reload the configuration (or SPC q r to restart Spacemacs). dotspacemacs-line-numbers ' ( :visual t :disabled-for-modes dired-mode doc-view-mode pdf-view-mode :size-limit-kb 1000 ) The configuration provides visual line numbers for buffers all buffers except dired, doc-view and pdf-view buffers. Line numbers are also disabled for large files, as it can slow Emacs down considerably (although this may be less of a problem with Emacs 26.3 onward and native line numbers). Turn line numbers off for all buffers by setting the dotspacemacs-line-numbers value to the default nil value. dotspacemacs-line-numbers nil Jumping to a line without line numbers Space j l labels each line with a unique letter combination providing a quick way to a line even if there are no line numbers.","title":"Visual style line number configuration"},{"location":"install-spacemacs/manual-configuration/","text":"Manual Configuration \u03bb\ufe0e When not using practicalli/spacemacs.d configuration, use the simple Spacemacs configuration wizzard to set the preferred editing style and Spacemacs distribution. ~/.spacemacs configuration file is created by the Spacemacs Wizard. Space f e d to open the ~/.spacemacs configuration file for manual editing Spacemacs install Wizard \u03bb\ufe0e Run Emacs as normal. Spacemacs prompts how it should configure the fundamentals of Spacemacs operation. For the preferred style, select Among the stars aboard the Evil flagship (vim) For the distribution, select The Standard Distribution (spacemacs) Spacemacs will now download all its Emacs packages and this will take several minutes, depending on the speed of your connection to the Internet. Space q r to restart Spacemacs once all the packages have downloaded. This is not strictly necessary, but helps ensure the packages are working correctly. Spacemacs is ready for action \u03bb\ufe0e Spacemacs is now up and running and ready to take on the world. Next task is to configure Spacemacs for Clojure. Space f e d to open the ~/.spacemacs configuration file for manual editing and customising layers any any other options.","title":"Manual Configuration"},{"location":"install-spacemacs/manual-configuration/#manual-configuration","text":"When not using practicalli/spacemacs.d configuration, use the simple Spacemacs configuration wizzard to set the preferred editing style and Spacemacs distribution. ~/.spacemacs configuration file is created by the Spacemacs Wizard. Space f e d to open the ~/.spacemacs configuration file for manual editing","title":"Manual Configuration"},{"location":"install-spacemacs/manual-configuration/#spacemacs-install-wizard","text":"Run Emacs as normal. Spacemacs prompts how it should configure the fundamentals of Spacemacs operation. For the preferred style, select Among the stars aboard the Evil flagship (vim) For the distribution, select The Standard Distribution (spacemacs) Spacemacs will now download all its Emacs packages and this will take several minutes, depending on the speed of your connection to the Internet. Space q r to restart Spacemacs once all the packages have downloaded. This is not strictly necessary, but helps ensure the packages are working correctly.","title":"Spacemacs install Wizard"},{"location":"install-spacemacs/manual-configuration/#spacemacs-is-ready-for-action","text":"Spacemacs is now up and running and ready to take on the world. Next task is to configure Spacemacs for Clojure. Space f e d to open the ~/.spacemacs configuration file for manual editing and customising layers any any other options.","title":"Spacemacs is ready for action"},{"location":"install-spacemacs/maximised-full-screen/","text":"Maximised or Fullscreen at startup \u03bb\ufe0e You can configure Emacs to start in maximised mode (just like maximising an applications window) or in fullscreen mode for minimum distraction. Change one of the following option in the dotspacemacs/init function of the Spacemacs configuration. The fullscreen option overrides the maximised option. dotspacemacs-fullscreen-at-startup t dotspacemacs-maximized-at-startup t To find these lines quickly, use SPC s s to search and start typing the name of the option. C-j to move down the matches, C-k to move up. RET` to jump to the current line. Practicalli uses the following settings for these options: ;; If non nil the frame is fullscreen when Emacs starts up. (default nil) ;; (Emacs 24.4+ only) dotspacemacs-fullscreen-at-startup nil ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen. ;; Use to disable fullscreen animations in OSX. (default nil) dotspacemacs-fullscreen-use-non-native nil ;; If non nil the frame is maximized when Emacs starts up. ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil. ;; (default nil) (Emacs 24.4+ only) dotspacemacs-maximized-at-startup t Option values For all options, t represents true, nil represents false. Where a name is used for a value it should be preceded with a single quote character, eg, 'all","title":"Full Screen"},{"location":"install-spacemacs/maximised-full-screen/#maximised-or-fullscreen-at-startup","text":"You can configure Emacs to start in maximised mode (just like maximising an applications window) or in fullscreen mode for minimum distraction. Change one of the following option in the dotspacemacs/init function of the Spacemacs configuration. The fullscreen option overrides the maximised option. dotspacemacs-fullscreen-at-startup t dotspacemacs-maximized-at-startup t To find these lines quickly, use SPC s s to search and start typing the name of the option. C-j to move down the matches, C-k to move up. RET` to jump to the current line. Practicalli uses the following settings for these options: ;; If non nil the frame is fullscreen when Emacs starts up. (default nil) ;; (Emacs 24.4+ only) dotspacemacs-fullscreen-at-startup nil ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen. ;; Use to disable fullscreen animations in OSX. (default nil) dotspacemacs-fullscreen-use-non-native nil ;; If non nil the frame is maximized when Emacs starts up. ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil. ;; (default nil) (Emacs 24.4+ only) dotspacemacs-maximized-at-startup t Option values For all options, t represents true, nil represents false. Where a name is used for a value it should be preceded with a single quote character, eg, 'all","title":"Maximised or Fullscreen at startup"},{"location":"install-spacemacs/pre-install/","text":"Pre-install \u03bb\ufe0e Spacemacs is a configuration for Emacs, so naturally Emacs should be installed before Spacemacs can be used. Clojure CLI should be installed to support Clojure development, along with several supporting development tools. Command Line Tools support searching for files and spell checking. Install Emacs \u03bb\ufe0e Emacs 28 is recommended as it includes native compilation support and optomised JSON support which is valuable for Language Server Protocol servers. Emacs is available for Linux, MacOSX and Windows. The Spacemacs Readme suggested ways to install Emacs Emacs Version 28 recommended Emacs 28 is recommended with native compilation of Elisp, which can have a significant improvement on Emacs package performance. Emacs 27.1 is the minimum version supported by Practicalli Spacemacs Ubuntu / Debian Homebrew / MacOSX Windows Msys2 apt-cache show emacs to check available versions of Emacs in the Ubuntu package manager. If version 28 is available, install Emacs using the Ubuntu package manager. sudo apt install emacs Additional versions of Emacs are available via the Ubuntu Emacs Team Personal Package Archive . sudo apt install emacs-snapshot package to use the latest nightly build of Emacs, although be aware that some things may break. Build Emacs 28 from source Building Emacs 28 from source code on Ubuntu is relatively straight forward task, although it will take a little time to compile. Building Emacs allows customisation of some features, such as native compilatin of elisp to enhance the performance of Emacs. Emacs Plus from Homebrew provides many options, including native compilation and Spacemacs Icon for application launchers. brew tap d12frosted/emacs-plus` brew install emacs-plus@28 --with-native-comp --with-spacemacs-icon Emacs.app is installed to: /usr/local/opt/emacs-plus@28 Optionally run Emacs plus as a service brew services start d12frosted/emacs-plus/emacs-plus@28 Run emacs Get a hot cup of something as Emacs native compilation compiles all the things. The Spacemacs README lists other options for MacOSX . Download Emacs-28.2 from the GNU repository and extract the zip file to %AppData%/local/Programs/emacs . Alternatively, if you are using the Chocolatey package manager then install Emacs version 28 Add the Emacs directory to the PATH variable in your user account environment variables. To start Emacs run the command runemacs.exe . You can also pin this to the start menu or task bar. Access to common Unix tools Command line tools, such as diff , are used by Emacs. To have these command line tools available in Windows, install Emacs as above but then run emacs from a Unix shell such as GitBash . Install Emacs (64bits build) with the following: pacman -S mingw-w64-x86_64-emacs Install Clojure CLI \u03bb\ufe0e Practicalli Clojure Install Guide Clojure CLI provide a simple and configurable way to: Run Clojure programs and tools Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor Managing dependencies (via tools.deps) from Maven and Git repositories Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools. Command Line Tools \u03bb\ufe0e Emacs uses several external command line tools. There are some very efficient search tools that are recommended (ripgrep, silver searcher). Consider installing these tools to enhance your Spacemacs experience. spell check \u03bb\ufe0e spell-checking layer in Spacemacs supports ispell, hunspell, and aspell command line tools. Aspell is the recommended spell checking tool. Ubuntu / Debian Homebrew Manual Aspell binary is usually installed on Unix systems by default. Use sudo apt instal aspell if not already present. brew install aspell Aspell Install Text search \u03bb\ufe0e Search text buffers uses an external search tool. Although grep is available in most operating systems, ripgrep (rg) or silver-searcher (ag) offer far greater performance and have more search options. dotspacemacs-search-tools '(\"rg\" \"ag\" \"pt\" \"ack\" \"grep\") in the Spacemacs configuration defines the order of preference for the search tool to use. ripgrep (rg) Silver Searcher (ag) Find files \u03bb\ufe0e Space p opens the projectile menu for finding files relative to the current project. Projectile uses the external command line tool find to index files that are not part of a version controlled project (using git for projects versioned with Git). fd is an external command line binary that is faster than the find command. If installed, projectile will automatically use fd instead of find fd install instructions by operating system helm-locate \u03bb\ufe0e The locate binary is used by Space f L ( helm-locate ) to find files and directories on the operating system file space. helm-locate is the fastest way to search for files across the whole file space on your computer as it uses the updatedb database. If a file was very recently added to the file system, run sudo updatedb to ensure all files are in the database. Ubuntu / Debian Homebrew / MacOSX sudo apt install locate findutils Homebrew findutils brew install findutils","title":"Pre-install"},{"location":"install-spacemacs/pre-install/#pre-install","text":"Spacemacs is a configuration for Emacs, so naturally Emacs should be installed before Spacemacs can be used. Clojure CLI should be installed to support Clojure development, along with several supporting development tools. Command Line Tools support searching for files and spell checking.","title":"Pre-install"},{"location":"install-spacemacs/pre-install/#install-emacs","text":"Emacs 28 is recommended as it includes native compilation support and optomised JSON support which is valuable for Language Server Protocol servers. Emacs is available for Linux, MacOSX and Windows. The Spacemacs Readme suggested ways to install Emacs Emacs Version 28 recommended Emacs 28 is recommended with native compilation of Elisp, which can have a significant improvement on Emacs package performance. Emacs 27.1 is the minimum version supported by Practicalli Spacemacs Ubuntu / Debian Homebrew / MacOSX Windows Msys2 apt-cache show emacs to check available versions of Emacs in the Ubuntu package manager. If version 28 is available, install Emacs using the Ubuntu package manager. sudo apt install emacs Additional versions of Emacs are available via the Ubuntu Emacs Team Personal Package Archive . sudo apt install emacs-snapshot package to use the latest nightly build of Emacs, although be aware that some things may break. Build Emacs 28 from source Building Emacs 28 from source code on Ubuntu is relatively straight forward task, although it will take a little time to compile. Building Emacs allows customisation of some features, such as native compilatin of elisp to enhance the performance of Emacs. Emacs Plus from Homebrew provides many options, including native compilation and Spacemacs Icon for application launchers. brew tap d12frosted/emacs-plus` brew install emacs-plus@28 --with-native-comp --with-spacemacs-icon Emacs.app is installed to: /usr/local/opt/emacs-plus@28 Optionally run Emacs plus as a service brew services start d12frosted/emacs-plus/emacs-plus@28 Run emacs Get a hot cup of something as Emacs native compilation compiles all the things. The Spacemacs README lists other options for MacOSX . Download Emacs-28.2 from the GNU repository and extract the zip file to %AppData%/local/Programs/emacs . Alternatively, if you are using the Chocolatey package manager then install Emacs version 28 Add the Emacs directory to the PATH variable in your user account environment variables. To start Emacs run the command runemacs.exe . You can also pin this to the start menu or task bar. Access to common Unix tools Command line tools, such as diff , are used by Emacs. To have these command line tools available in Windows, install Emacs as above but then run emacs from a Unix shell such as GitBash . Install Emacs (64bits build) with the following: pacman -S mingw-w64-x86_64-emacs","title":"Install Emacs"},{"location":"install-spacemacs/pre-install/#install-clojure-cli","text":"Practicalli Clojure Install Guide Clojure CLI provide a simple and configurable way to: Run Clojure programs and tools Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor Managing dependencies (via tools.deps) from Maven and Git repositories Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools.","title":"Install Clojure CLI"},{"location":"install-spacemacs/pre-install/#command-line-tools","text":"Emacs uses several external command line tools. There are some very efficient search tools that are recommended (ripgrep, silver searcher). Consider installing these tools to enhance your Spacemacs experience.","title":"Command Line Tools"},{"location":"install-spacemacs/pre-install/#spell-check","text":"spell-checking layer in Spacemacs supports ispell, hunspell, and aspell command line tools. Aspell is the recommended spell checking tool. Ubuntu / Debian Homebrew Manual Aspell binary is usually installed on Unix systems by default. Use sudo apt instal aspell if not already present. brew install aspell Aspell Install","title":"spell check"},{"location":"install-spacemacs/pre-install/#text-search","text":"Search text buffers uses an external search tool. Although grep is available in most operating systems, ripgrep (rg) or silver-searcher (ag) offer far greater performance and have more search options. dotspacemacs-search-tools '(\"rg\" \"ag\" \"pt\" \"ack\" \"grep\") in the Spacemacs configuration defines the order of preference for the search tool to use. ripgrep (rg) Silver Searcher (ag)","title":"Text search"},{"location":"install-spacemacs/pre-install/#find-files","text":"Space p opens the projectile menu for finding files relative to the current project. Projectile uses the external command line tool find to index files that are not part of a version controlled project (using git for projects versioned with Git). fd is an external command line binary that is faster than the find command. If installed, projectile will automatically use fd instead of find fd install instructions by operating system","title":"Find files"},{"location":"install-spacemacs/pre-install/#helm-locate","text":"The locate binary is used by Space f L ( helm-locate ) to find files and directories on the operating system file space. helm-locate is the fastest way to search for files across the whole file space on your computer as it uses the updatedb database. If a file was very recently added to the file system, run sudo updatedb to ensure all files are in the database. Ubuntu / Debian Homebrew / MacOSX sudo apt install locate findutils Homebrew findutils brew install findutils","title":"helm-locate"},{"location":"install-spacemacs/smartparens/","text":"Smartparens \u03bb\ufe0e Clojure and other lisp languages are defined as data structures, so expressions always start with parentheses, ( ) . If there is an imbalanced pairing of open and closing parentheses, then the code fails to work and causes an error. smartparens in strict mode ensures balanced parentheses by adding a closing parentheses when you type an open parentheses. This works for () , [] , {} and \"\" . Configure Smartparens \u03bb\ufe0e Smartparens is part of the standard distribution of Spacemacs, so no install is necessary. I recommend enabling smartparens strict mode, so structure cannot be deleted without the content of that structure being deleted first. Smart closing parentheses means you can jump over closing structure characters by typing ) Highlighting all delimiters gives a visual guide to pairs of structural characters, to complement the rainbow parens that also comes with the Clojure layer. ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes. ;; (default nil) dotspacemacs-smartparens-strict-mode t ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes ;; over any automatically added closing parenthesis, bracket, quote, etc\u2026 ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil) dotspacemacs-smart-closing-parenthesis t ;; Select a scope to highlight delimiters. Possible values are `any', ;; `current', `all' or `nil'. Default is `all' (highlight any scope and ;; emphasis the current one). (default 'all) dotspacemacs-highlight-delimiters 'all","title":"Smartparens"},{"location":"install-spacemacs/smartparens/#smartparens","text":"Clojure and other lisp languages are defined as data structures, so expressions always start with parentheses, ( ) . If there is an imbalanced pairing of open and closing parentheses, then the code fails to work and causes an error. smartparens in strict mode ensures balanced parentheses by adding a closing parentheses when you type an open parentheses. This works for () , [] , {} and \"\" .","title":"Smartparens"},{"location":"install-spacemacs/smartparens/#configure-smartparens","text":"Smartparens is part of the standard distribution of Spacemacs, so no install is necessary. I recommend enabling smartparens strict mode, so structure cannot be deleted without the content of that structure being deleted first. Smart closing parentheses means you can jump over closing structure characters by typing ) Highlighting all delimiters gives a visual guide to pairs of structural characters, to complement the rainbow parens that also comes with the Clojure layer. ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes. ;; (default nil) dotspacemacs-smartparens-strict-mode t ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes ;; over any automatically added closing parenthesis, bracket, quote, etc\u2026 ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil) dotspacemacs-smart-closing-parenthesis t ;; Select a scope to highlight delimiters. Possible values are `any', ;; `current', `all' or `nil'. Default is `all' (highlight any scope and ;; emphasis the current one). (default 'all) dotspacemacs-highlight-delimiters 'all","title":"Configure Smartparens"},{"location":"install-spacemacs/switch-to-develop/","text":"Switch to Spacemacs develop branch \u03bb\ufe0e Until the release of Spacemacs 0.300 it is highly recommended to use the Spacemacs develop branch. If you have installed the default Spacemacs master branch, follow these steps to switch smoothly to Spacemacs develop branch. If you have not customized the .spacemacs file then simply delete it and checkout the develop branch in .emacs.d . Starting Emacs will create a new .spacemacs file with the latest updates. cd ~/.emacs.d git checkout develop Updating to develop - keeping .spacemacs changes \u03bb\ufe0e If you have changes in the .spacemacs file you wish to keep, there are two approaches. Either update Spacemacs on top of your changes or replace the configuration and use a diff tool to copy your changes back to the .spacemacs file. Update Existing Configuration Clean install and diff changes Make a backup of your .spacemacs file. Change into the ~/.emacs.d/ directory and change the Git branch to develop cd ~/.emacs.d/ git checkout develop Space f e D ( spacemacs/ediff-dotfile-and-template ) to compare the develop version of the .spacemacs.template with your customized .spacemacs configuration. In the ediff buffer, use J and K to navigate changes, B to copy changes from the spacemacs.template to your custom .spacemacs configuration. You should accept all changes unless you know that you should keep a specific change (eg. layers, variable settings). Q to quit the ediff session. Space f s to save the Spacemacs configuration file. Delete the ~/emacs.d/elpa/ directory, as packages will downloaded under ~/.emacs.d/elpa/develop/<emacs-version>/ . Delete the ~/.emacs.d directory (backup any changes made in .emacs.d/private if relevant). Clone Spacemacs specifying the develop branch git clone -o upstream https://github.com/syl20bnr/spacemacs ~/.emacs.d Move the ~/.spacemacs file or rename it, allowing Spacemacs to create an updated configuration from the develop branch. Start Emacs \u03bb\ufe0e Start Emacs. Select the editing style (vim, emacs) and spacemacs distribution (full, minimal) to use and Spacemacs creates a new .spacemacs configuration . Spacemacs will download the distribution packages and packages for the default set of layers. This may take a couple of minutes. Update Spacemacs configuration \u03bb\ufe0e If you have changes from the original Spacemacs install: SPC D f f to open ediff. Select the ~/.spacemacs file first and then your .spacemacs backup file. j , k navigates (down/up) between each difference in the file. b copies a change from your custom .spacemacs file to the ~/.spacemacs file now used by Spacemacs. ? to list the diff commands (when the cursor is in window 3) q to quit the ediff session (when the cursor is in window 3) and SPC f s to save any changes made to the .spacemacs file. Restart Emacs to load all changes \u03bb\ufe0e SPC q r ( emacs-restart ) to ensure your .spacemacs changes and packages are loaded. This may take a minute if you added layers to the .spacemacs configuration file. Once Spacemacs restarts you are ready to enjoy Spacemacs develop .","title":"Switch to develop"},{"location":"install-spacemacs/switch-to-develop/#switch-to-spacemacs-develop-branch","text":"Until the release of Spacemacs 0.300 it is highly recommended to use the Spacemacs develop branch. If you have installed the default Spacemacs master branch, follow these steps to switch smoothly to Spacemacs develop branch. If you have not customized the .spacemacs file then simply delete it and checkout the develop branch in .emacs.d . Starting Emacs will create a new .spacemacs file with the latest updates. cd ~/.emacs.d git checkout develop","title":"Switch to Spacemacs develop branch"},{"location":"install-spacemacs/switch-to-develop/#updating-to-develop-keeping-spacemacs-changes","text":"If you have changes in the .spacemacs file you wish to keep, there are two approaches. Either update Spacemacs on top of your changes or replace the configuration and use a diff tool to copy your changes back to the .spacemacs file. Update Existing Configuration Clean install and diff changes Make a backup of your .spacemacs file. Change into the ~/.emacs.d/ directory and change the Git branch to develop cd ~/.emacs.d/ git checkout develop Space f e D ( spacemacs/ediff-dotfile-and-template ) to compare the develop version of the .spacemacs.template with your customized .spacemacs configuration. In the ediff buffer, use J and K to navigate changes, B to copy changes from the spacemacs.template to your custom .spacemacs configuration. You should accept all changes unless you know that you should keep a specific change (eg. layers, variable settings). Q to quit the ediff session. Space f s to save the Spacemacs configuration file. Delete the ~/emacs.d/elpa/ directory, as packages will downloaded under ~/.emacs.d/elpa/develop/<emacs-version>/ . Delete the ~/.emacs.d directory (backup any changes made in .emacs.d/private if relevant). Clone Spacemacs specifying the develop branch git clone -o upstream https://github.com/syl20bnr/spacemacs ~/.emacs.d Move the ~/.spacemacs file or rename it, allowing Spacemacs to create an updated configuration from the develop branch.","title":"Updating to develop - keeping .spacemacs changes"},{"location":"install-spacemacs/switch-to-develop/#start-emacs","text":"Start Emacs. Select the editing style (vim, emacs) and spacemacs distribution (full, minimal) to use and Spacemacs creates a new .spacemacs configuration . Spacemacs will download the distribution packages and packages for the default set of layers. This may take a couple of minutes.","title":"Start Emacs"},{"location":"install-spacemacs/switch-to-develop/#update-spacemacs-configuration","text":"If you have changes from the original Spacemacs install: SPC D f f to open ediff. Select the ~/.spacemacs file first and then your .spacemacs backup file. j , k navigates (down/up) between each difference in the file. b copies a change from your custom .spacemacs file to the ~/.spacemacs file now used by Spacemacs. ? to list the diff commands (when the cursor is in window 3) q to quit the ediff session (when the cursor is in window 3) and SPC f s to save any changes made to the .spacemacs file.","title":"Update Spacemacs configuration"},{"location":"install-spacemacs/switch-to-develop/#restart-emacs-to-load-all-changes","text":"SPC q r ( emacs-restart ) to ensure your .spacemacs changes and packages are loaded. This may take a minute if you added layers to the .spacemacs configuration file. Once Spacemacs restarts you are ready to enjoy Spacemacs develop .","title":"Restart Emacs to load all changes"},{"location":"install-spacemacs/themes/","text":"Themes \u03bb\ufe0e Space T s opens a helm selection menu to select from all available themes You can select a different theme or cycle through the currently added themes. Spacemacs Description Space T n Next theme in list Space T p Previous theme in list Space T s Select theme from list (all themes from gallery) Space T s Ctrl + c Ctrl + f Apply themes when scrolling through the list of names (helm-follow-mode) Adding Themes to Spacemacs \u03bb\ufe0e Themes are set by adding the theme name to the dotspacemacs-themes list. The first theme in the list is loaded when Spacemacs starts. dotspacemacs-themes ' ( doom-gruvbox-light doom-gruvbox spacemacs-dark spacemacs-light cyberpunk ) The order of the themes in the list is the order Spacemacs will cycle through those themes, SPC T n for the next theme and SPC T p for the previous theme. The first time you select a theme it will be automatically downloaded, installed and used. This may take a few seconds to load. Doom Gruvbox Themes used for this guide This guide uses the doom-gruvbox-light theme for screenshots and videos, some older screenshots are doom-solarized-light or spacemacs-dark . Example themes \u03bb\ufe0e There are many themes available for Spacemacs that will change the colours of text, background, etc. Original Emacs theme Add (disable-theme) to dotspacemacs/user-config section of .spacemacs to remove any custom theme and use the Emacs default colors. Or set (dotspacemacs-themes '(default)) in .spacemacs to use a theme similar to the Emacs colors. This guide uses the minimal theme provided by doom modeline and doom-gruvbox-light theme. Doom Solarized Light is also an excellent theme for working during the day, as well as presentations and videos due to a lighter color set having a better contrast. Doom Solarized Dark is a good theme for darker environments. Spacemacs has two default themes included, one light and one dark. There are also many themes available that you can select and load on demand, Space T s The cyberpunk theme used a very striking color palette, familiar to those who use to use Emacs Live distribution (now deceased).","title":"Themes"},{"location":"install-spacemacs/themes/#themes","text":"Space T s opens a helm selection menu to select from all available themes You can select a different theme or cycle through the currently added themes. Spacemacs Description Space T n Next theme in list Space T p Previous theme in list Space T s Select theme from list (all themes from gallery) Space T s Ctrl + c Ctrl + f Apply themes when scrolling through the list of names (helm-follow-mode)","title":"Themes"},{"location":"install-spacemacs/themes/#adding-themes-to-spacemacs","text":"Themes are set by adding the theme name to the dotspacemacs-themes list. The first theme in the list is loaded when Spacemacs starts. dotspacemacs-themes ' ( doom-gruvbox-light doom-gruvbox spacemacs-dark spacemacs-light cyberpunk ) The order of the themes in the list is the order Spacemacs will cycle through those themes, SPC T n for the next theme and SPC T p for the previous theme. The first time you select a theme it will be automatically downloaded, installed and used. This may take a few seconds to load. Doom Gruvbox Themes used for this guide This guide uses the doom-gruvbox-light theme for screenshots and videos, some older screenshots are doom-solarized-light or spacemacs-dark .","title":"Adding Themes to Spacemacs"},{"location":"install-spacemacs/themes/#example-themes","text":"There are many themes available for Spacemacs that will change the colours of text, background, etc. Original Emacs theme Add (disable-theme) to dotspacemacs/user-config section of .spacemacs to remove any custom theme and use the Emacs default colors. Or set (dotspacemacs-themes '(default)) in .spacemacs to use a theme similar to the Emacs colors. This guide uses the minimal theme provided by doom modeline and doom-gruvbox-light theme. Doom Solarized Light is also an excellent theme for working during the day, as well as presentations and videos due to a lighter color set having a better contrast. Doom Solarized Dark is a good theme for darker environments. Spacemacs has two default themes included, one light and one dark. There are also many themes available that you can select and load on demand, Space T s The cyberpunk theme used a very striking color palette, familiar to those who use to use Emacs Live distribution (now deceased).","title":"Example themes"},{"location":"install-spacemacs/troubleshooting/","text":"Troubleshooting \u03bb\ufe0e Space q r ( restart-emacs ) is a quick way to resolve some issues, especially when installing multiple packages. Some Emacs packages depend on others being present, which may not be the case when first installing. Space f e D ( ediff ) to compare your Spacemacs configuration with the default Spacemacs configuration. j and k to navigate the differences, b to copy a change from the Spacemacs configuration to your own. q to quit comparing, ? for more help. Switch to the Spacemacs develop branch to get the latest fixes and features (until version 0.300 is release to master). Read the latest docs at develop.spacemacs.org or the layer specific README.org files on GitHub Reviewing issues \u03bb\ufe0e View the Spacemacs issues on GitHub before submitting a new issue. You may find a fix to your problem, even if only a temporary solution. Space h d s generates system information in the kill ring that should be added to help confirm an existing issue with meaningful data, helping to identify the root cause. Also review the GitHub issues for a specific package that may be causing issues. A search for emacs package-name should help you find its GitHub repository. Ask the community \u03bb\ufe0e If you are unsure if you have found an issue, or do not understand why some behavior is happening, then ask the Spacemacs community, they are very helpful and friendly. Spacemacs Gitter chat - any aspects of Spacemacs #Spacemacs on Clojurians Slack community - Clojure specific discussions ( create a free account ) Reporting Issues \u03bb\ufe0e Space h I to create an issue on the Spacemacs GitHub repository which includes Spacemacs environment details, helping others understand and resolve the issue effectively. Read how to make a great bug report https://github.com/syl20bnr/spacemacs/wiki/Debugging#how-to-make-a-great-bug-report Please do not raise an issue directly via the GitHub website. If you do, you will slow down the response to this issue and the first response to your issue will be to provide system information. Specific Package Issue \u03bb\ufe0e If there are issues with a particular package, delete the package directory from the ~/.emacs.d/elpa/<emacs-version>/develop/ directory. Space q r to restart Spacemacs and download the package again. Issues after package update \u03bb\ufe0e If multiple packages are causing issues after an update, or you are short on time to diagnose an issue, then rollback to the packages used before the update. Space b h to visit the Spacemacs home page and select Rollback Package Update Restore individual packages Instead of a full rollback, copy specific package directories from ~/.emacs.d/.cache/.rollback/<emacs-version>/develop to the elpa directory ~/.emacs.d/elpa/<emacs-version>/develop Emacs package recipe for specific version \u03bb\ufe0e Spacemacs installs packages from MELPA , which builds Emacs packages from the latest commit (GitHub/GitLab). If a newly installed package has an issue, rather than rollback all the packages upgraded, configure a package recipe to point to an older version of the package. For example, pin the cider package to a specific Git commit by adding the following recipe to dotspacemacs-additional-packages ( cider :location ( recipe :fetcher github :repo \"clojure-emacs/cider\" :commit \"ae376429a8cf22b82a9e18ff844bdfbe5fc7ecc1\" )) Delete the package from ~/.emacs.d/elpa/ directory and reload the Spacemacs configuration, SPC f e R (or restart Emacs SPC q r ) Related or dependent packages may also need a recipe or at least their packages removed from the elpa directory. Scorched Earth approach \u03bb\ufe0e Delete ~/.emacs.d/elpa director and SPC q r to restart Spacemacs. This will remove any complied Emacs packages that may have become corrupted or replace older packages that are now causing issues. As there are 100's of packages, the scorched earth approach of just deleting them and downloading fresh copies can be surprisingly effective at resolving issues with very little effort. Debugging Spacemacs \u03bb\ufe0e The Spacemacs debugging page explains concepts needed to debug Spacemacs and to report issues in an useful way. Debugging memory issues Issues with spawned processes \u03bb\ufe0e SPC a p ( list-processes ) lists the processes started by or from within Spacemacs, eg. for Clojure its nrepl-server and nrepl-connection processes when running cider-jack-in . Use SPC a P ( proced ) to see all operating system processes. d to immediately kill a process (no prompt is given to confirm kill action). The process list shows the command used to start the process, which can be useful in diagnosing issues. RET on buffer name in the process list will open that buffer in a separate window. If there are problems shutting down the REPL, , s q q ( cider-quit ), check to see if the CIDER nrepl-server or nrepl-connection process has been killed. q to quit the process list buffer. Identify rogue processes Space a P lists all operating system processes Space Space helm-top displays a list of running processes Profiling Emacs \u03bb\ufe0e Space Space profiler-start to start monitoring how much CPU and memory resources that different parts of Emacs are using. The profiler is especially useful if there are slow running commands or Emacs is unresponsive at times. Space Space profiler-report displays buffers showing the results of profiling Emacs. Space Space profiler-stop to stop profiling Emacs.","title":"Troubleshoot"},{"location":"install-spacemacs/troubleshooting/#troubleshooting","text":"Space q r ( restart-emacs ) is a quick way to resolve some issues, especially when installing multiple packages. Some Emacs packages depend on others being present, which may not be the case when first installing. Space f e D ( ediff ) to compare your Spacemacs configuration with the default Spacemacs configuration. j and k to navigate the differences, b to copy a change from the Spacemacs configuration to your own. q to quit comparing, ? for more help. Switch to the Spacemacs develop branch to get the latest fixes and features (until version 0.300 is release to master). Read the latest docs at develop.spacemacs.org or the layer specific README.org files on GitHub","title":"Troubleshooting"},{"location":"install-spacemacs/troubleshooting/#reviewing-issues","text":"View the Spacemacs issues on GitHub before submitting a new issue. You may find a fix to your problem, even if only a temporary solution. Space h d s generates system information in the kill ring that should be added to help confirm an existing issue with meaningful data, helping to identify the root cause. Also review the GitHub issues for a specific package that may be causing issues. A search for emacs package-name should help you find its GitHub repository.","title":"Reviewing issues"},{"location":"install-spacemacs/troubleshooting/#ask-the-community","text":"If you are unsure if you have found an issue, or do not understand why some behavior is happening, then ask the Spacemacs community, they are very helpful and friendly. Spacemacs Gitter chat - any aspects of Spacemacs #Spacemacs on Clojurians Slack community - Clojure specific discussions ( create a free account )","title":"Ask the community"},{"location":"install-spacemacs/troubleshooting/#reporting-issues","text":"Space h I to create an issue on the Spacemacs GitHub repository which includes Spacemacs environment details, helping others understand and resolve the issue effectively. Read how to make a great bug report https://github.com/syl20bnr/spacemacs/wiki/Debugging#how-to-make-a-great-bug-report Please do not raise an issue directly via the GitHub website. If you do, you will slow down the response to this issue and the first response to your issue will be to provide system information.","title":"Reporting Issues"},{"location":"install-spacemacs/troubleshooting/#specific-package-issue","text":"If there are issues with a particular package, delete the package directory from the ~/.emacs.d/elpa/<emacs-version>/develop/ directory. Space q r to restart Spacemacs and download the package again.","title":"Specific Package Issue"},{"location":"install-spacemacs/troubleshooting/#issues-after-package-update","text":"If multiple packages are causing issues after an update, or you are short on time to diagnose an issue, then rollback to the packages used before the update. Space b h to visit the Spacemacs home page and select Rollback Package Update Restore individual packages Instead of a full rollback, copy specific package directories from ~/.emacs.d/.cache/.rollback/<emacs-version>/develop to the elpa directory ~/.emacs.d/elpa/<emacs-version>/develop","title":"Issues after package update"},{"location":"install-spacemacs/troubleshooting/#emacs-package-recipe-for-specific-version","text":"Spacemacs installs packages from MELPA , which builds Emacs packages from the latest commit (GitHub/GitLab). If a newly installed package has an issue, rather than rollback all the packages upgraded, configure a package recipe to point to an older version of the package. For example, pin the cider package to a specific Git commit by adding the following recipe to dotspacemacs-additional-packages ( cider :location ( recipe :fetcher github :repo \"clojure-emacs/cider\" :commit \"ae376429a8cf22b82a9e18ff844bdfbe5fc7ecc1\" )) Delete the package from ~/.emacs.d/elpa/ directory and reload the Spacemacs configuration, SPC f e R (or restart Emacs SPC q r ) Related or dependent packages may also need a recipe or at least their packages removed from the elpa directory.","title":"Emacs package recipe for specific version"},{"location":"install-spacemacs/troubleshooting/#scorched-earth-approach","text":"Delete ~/.emacs.d/elpa director and SPC q r to restart Spacemacs. This will remove any complied Emacs packages that may have become corrupted or replace older packages that are now causing issues. As there are 100's of packages, the scorched earth approach of just deleting them and downloading fresh copies can be surprisingly effective at resolving issues with very little effort.","title":"Scorched Earth approach"},{"location":"install-spacemacs/troubleshooting/#debugging-spacemacs","text":"The Spacemacs debugging page explains concepts needed to debug Spacemacs and to report issues in an useful way. Debugging memory issues","title":"Debugging Spacemacs"},{"location":"install-spacemacs/troubleshooting/#issues-with-spawned-processes","text":"SPC a p ( list-processes ) lists the processes started by or from within Spacemacs, eg. for Clojure its nrepl-server and nrepl-connection processes when running cider-jack-in . Use SPC a P ( proced ) to see all operating system processes. d to immediately kill a process (no prompt is given to confirm kill action). The process list shows the command used to start the process, which can be useful in diagnosing issues. RET on buffer name in the process list will open that buffer in a separate window. If there are problems shutting down the REPL, , s q q ( cider-quit ), check to see if the CIDER nrepl-server or nrepl-connection process has been killed. q to quit the process list buffer. Identify rogue processes Space a P lists all operating system processes Space Space helm-top displays a list of running processes","title":"Issues with spawned processes"},{"location":"install-spacemacs/troubleshooting/#profiling-emacs","text":"Space Space profiler-start to start monitoring how much CPU and memory resources that different parts of Emacs are using. The profiler is especially useful if there are slow running commands or Emacs is unresponsive at times. Space Space profiler-report displays buffers showing the results of profiling Emacs. Space Space profiler-stop to stop profiling Emacs.","title":"Profiling Emacs"},{"location":"install-spacemacs/update/","text":"Update Spacemacs and Packages \u03bb\ufe0e Updating Spacemacs comes in three sections: Pull latest Spacemacs commits Compare changes with .spacemacs-template file Install Packages Update Spacemacs project files \u03bb\ufe0e Open $XDG_CONFIG_HOME/emacs/README.md or $HOME/.emacs.d/README.md Space g s opens Magit status for the Spacemacs project F pop-ups the pull menu, use -r to set rebase to true u to pull from upstream. If upstream is not set, Spacemacs will prompt you with a list of available remotes, there will be only one (the remote added when you first cloned the repository). Spacemacs should update itself using Git in a few seconds. q to quit Magit status buffer. Update the Spacemacs configuration \u03bb\ufe0e Space f e D opens an ediff session, comparing your current .spacemacs file with the latest .spacemacs-template . N , P navigates (down/up) between each difference in the file. B copies a change from the template to your .spacemacs file . Accept all the changes from the template unless you know you made a specific change to your .spacemacs file. Q to quit the ediff session and Space f s to save the changes to the Spacemacs configuration. Update Packages \u03bb\ufe0e Space f e U updates shows the list of packages that will be updated Y to confirm you want to install the packages Wait until Spacemacs prompts to restart Space q r to restart Spacemacs. The new versions of the packages are install when Spacemacs starts up again. If downloading a considerable number of packages, or you see a lot of warnings, then using SPC q r for a second time can be useful to ensure that all new packages have been loaded correctly.","title":"Update Spacemacs and Packages"},{"location":"install-spacemacs/update/#update-spacemacs-and-packages","text":"Updating Spacemacs comes in three sections: Pull latest Spacemacs commits Compare changes with .spacemacs-template file Install Packages","title":"Update Spacemacs and Packages"},{"location":"install-spacemacs/update/#update-spacemacs-project-files","text":"Open $XDG_CONFIG_HOME/emacs/README.md or $HOME/.emacs.d/README.md Space g s opens Magit status for the Spacemacs project F pop-ups the pull menu, use -r to set rebase to true u to pull from upstream. If upstream is not set, Spacemacs will prompt you with a list of available remotes, there will be only one (the remote added when you first cloned the repository). Spacemacs should update itself using Git in a few seconds. q to quit Magit status buffer.","title":"Update Spacemacs project files"},{"location":"install-spacemacs/update/#update-the-spacemacs-configuration","text":"Space f e D opens an ediff session, comparing your current .spacemacs file with the latest .spacemacs-template . N , P navigates (down/up) between each difference in the file. B copies a change from the template to your .spacemacs file . Accept all the changes from the template unless you know you made a specific change to your .spacemacs file. Q to quit the ediff session and Space f s to save the changes to the Spacemacs configuration.","title":"Update the Spacemacs configuration"},{"location":"install-spacemacs/update/#update-packages","text":"Space f e U updates shows the list of packages that will be updated Y to confirm you want to install the packages Wait until Spacemacs prompts to restart Space q r to restart Spacemacs. The new versions of the packages are install when Spacemacs starts up again. If downloading a considerable number of packages, or you see a lot of warnings, then using SPC q r for a second time can be useful to ensure that all new packages have been loaded correctly.","title":"Update Packages"},{"location":"install-spacemacs/clojure-lsp/","text":"Clojure LSP \u03bb\ufe0e Clojure LSP provides a standard set of features for editing and manipulating source code, e.g. autocompletion, code navigation, refactor code, inline syntax errors and idiom warnings. LSP and the REPL The REPL is used to design Clojure effectively by providing instant feedback on code expressions as they are written and evaluated. A REPL based workflow supports the most effective approach to development of Clojure apps and services. Clojure LSP supports the editing activities to write Clojure code effectively, providing a static analysis of the code base that drives advance editing, navigation and refactor tasks. Install Clojure CLI \u03bb\ufe0e Install Clojure CLI - Practicall Clojure LSP layer configuration \u03bb\ufe0e Adding the lsp layer to .spacemacs will automatically use LSP for Clojure formatting, autocompletion and syntax checking. LSP will override some features provided by CIDER, so you may wish to configure lsp and lsp UI . practicalli/spacemacs.d provides an LSP configuration with minimal UI elements and no conflicts with CIDER. ( lsp :variables lsp-ui-doc-enable nil ;; disable all doc popups lsp-ui-sideline-enable nil ;; disable sideline bar for less distraction treemacs-space-between-root-nodes nil ) ;; no spacing in treemacs views Specification \u03bb\ufe0e The Language Server Protocol (LSP) is a specification for tooling developers, defining a protocol for editors to talk to a language server and provide static analysis features, such as refactoring, symbol navigation, code completion, syntax highlighting. A standard protocol means an LSP server implementation can support a wide range of tools, reducing the work of editor maintainers and helping ensure common features are available across all editors. LSP does not provide any implementation, this is left to tooling and editor developers. References \u03bb\ufe0e Configure Emacs as a Clojure IDE guide A guide on disabling/enabling lsp-mode features Emacs LSP UI website and emacs-lsp/lsp-ui repository","title":"Clojure LSP"},{"location":"install-spacemacs/clojure-lsp/#clojure-lsp","text":"Clojure LSP provides a standard set of features for editing and manipulating source code, e.g. autocompletion, code navigation, refactor code, inline syntax errors and idiom warnings. LSP and the REPL The REPL is used to design Clojure effectively by providing instant feedback on code expressions as they are written and evaluated. A REPL based workflow supports the most effective approach to development of Clojure apps and services. Clojure LSP supports the editing activities to write Clojure code effectively, providing a static analysis of the code base that drives advance editing, navigation and refactor tasks.","title":"Clojure LSP"},{"location":"install-spacemacs/clojure-lsp/#install-clojure-cli","text":"Install Clojure CLI - Practicall Clojure","title":"Install Clojure CLI"},{"location":"install-spacemacs/clojure-lsp/#lsp-layer-configuration","text":"Adding the lsp layer to .spacemacs will automatically use LSP for Clojure formatting, autocompletion and syntax checking. LSP will override some features provided by CIDER, so you may wish to configure lsp and lsp UI . practicalli/spacemacs.d provides an LSP configuration with minimal UI elements and no conflicts with CIDER. ( lsp :variables lsp-ui-doc-enable nil ;; disable all doc popups lsp-ui-sideline-enable nil ;; disable sideline bar for less distraction treemacs-space-between-root-nodes nil ) ;; no spacing in treemacs views","title":"LSP layer configuration"},{"location":"install-spacemacs/clojure-lsp/#specification","text":"The Language Server Protocol (LSP) is a specification for tooling developers, defining a protocol for editors to talk to a language server and provide static analysis features, such as refactoring, symbol navigation, code completion, syntax highlighting. A standard protocol means an LSP server implementation can support a wide range of tools, reducing the work of editor maintainers and helping ensure common features are available across all editors. LSP does not provide any implementation, this is left to tooling and editor developers.","title":"Specification"},{"location":"install-spacemacs/clojure-lsp/#references","text":"Configure Emacs as a Clojure IDE guide A guide on disabling/enabling lsp-mode features Emacs LSP UI website and emacs-lsp/lsp-ui repository","title":"References"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/","text":"Configure LSP and Cider \u03bb\ufe0e The Spacemacs lsp layer has a default configuration for all languages The LSP Mode website provides examples of LSP features and there is a long list of LSP settings Add clojure-backend 'cider as a clojure layer variable to the clojure layer in the .spacemacs file to run Cider without LSP features. Start with Minimal Features and add when useful Practicalli recommends starting with a minimal LSP configuration to avoid conflict with features that are present in Cider. LSP features can be enabled when you find them valuable. practicalli/spacemacs.d configuration for Spacemacs included a minimal configuration for Cider and Clojure-lsp. This configuration uses predominately CIDER features. Minimal LSP UI elements and features are added without distracting from the minimal Spacemacs experience. Pre-requisites \u03bb\ufe0e SPC SPC all-the-icons-install-fonts command will install icons that support the breadcrumbs on headerline feature of LSP UI. This provides the director path, file name and symbol as a breadcrumb trail at the top of each buffer. Optional - clj-kondo \u03bb\ufe0e clojure-lsp includes the latest clj-kondo binary if not found on the execution path. so any external install of the clj-kondo binary is optional. Remove the flycheck-clj-kondo configuration, clojure-enable-linters 'clj-kondo , from the clojure layer in .spacemacs to avoid duplication of results. Spacemacs Clojure layer configuration \u03bb\ufe0e practicalli/spacemacs.d configuration uses clojure-mode features for indenting and aligning forms as you type. In .spacemacs, the clojure layer variables allow for evaluating top-level forms from within a rich comment block. The size limit helps avoid slow-down of Emacs from too much output in the REPL buffer. Spacemacs configuration - `dotspacemacs-layer-configuration` ( clojure :variables ;; clojure-backend 'cider ;; use cider and disable lsp ;; clojure-enable-linters 'clj-kondo ;; clj-kondo included in lsp cider-repl-display-help-banner nil ;; disable help banner cider-pprint-fn 'fipp ;; fast pretty printing clojure-indent-style 'align-arguments clojure-align-forms-automatically t clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level cider-result-overlay-position 'at-point ;; results shown right after expression cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100 ;; limit lines shown in REPL buffer ) Aligning forms \u03bb\ufe0e SPC m = l aligns arguments in the current line or selected region. Automatic aligning of forms is not yet supported in LSP for Clojure. LSP aligning forms not fully supported Support for associative syntax alignment is an issue to add aligning forms to cljfmt, which is used by LSP for formatting. Automatic aligning of forms works with clojure-mode by configuring aggressive-indent-mode , however, this seriously conflicts with LSP formatting creating an unworkable editing experience. To auto-align arguments using clojure-mode, set lsp-enable-on-type-formatting to nil in the lsp layer configuration. Then add the following configuration in dotspacemacs/user-config section of .spacemacs Spacemacs Configuration - dotspacemacs/user-config ;; Indentation of function forms ;; https://github.com/clojure-emacs/clojure-mode#indentation-of-function-forms ( setq clojure-indent-style 'align-arguments ) ;; ;; Vertically align s-expressions ;; https://github.com/clojure-emacs/clojure-mode#vertical-alignment ( setq clojure-align-forms-automatically t ) ;; ;; Auto-indent code automatically ;; WARNING - really conflicts with LSP formatting - set lsp-enable-on-type-formatting to nil in lsp layer ;; https://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/ ( add-hook 'clojure-mode-hook #' aggressive-indent-mode ) LSP layer variables \u03bb\ufe0e Add the lsp layer to .spacemacs and include the following variables for an uncluttered LSP UI. Spacemacs configuration - dotspacemacs/user-config ( lsp :variables ;; Formatting and indentation - use Cider instead lsp-enable-on-type-formatting t ;; Set to nil to use CIDER features instead of LSP UI lsp-enable-indentation t lsp-enable-snippet t ;; to test again ;; symbol highlighting - `lsp-toggle-symbol-highlight` toggles highlighting ;; subtle highlighting for doom-gruvbox-light theme defined in dotspacemacs/user-config lsp-enable-symbol-highlighting t ;; Show lint error indicator in the mode line lsp-modeline-diagnostics-enable t ;; lsp-modeline-diagnostics-scope :workspace ;; popup documentation boxes ;; lsp-ui-doc-enable nil ;; disable all doc popups lsp-ui-doc-show-with-cursor nil ;; doc popup for cursor ;; lsp-ui-doc-show-with-mouse t ;; doc popup for mouse ;; lsp-ui-doc-delay 2 ;; delay in seconds for popup to display lsp-ui-doc-include-signature t ;; include function signature ;; lsp-ui-doc-position 'at-point ;; positioning of doc popup: top bottom at-point lsp-ui-doc-alignment 'window ;; relative location of doc popup: frame window ;; code actions and diagnostics text as right-hand side of buffer lsp-ui-sideline-enable nil lsp-ui-sideline-show-code-actions nil ;; lsp-ui-sideline-delay 500 ;; lsp-ui-sideline-show-diagnostics nil ;; reference count for functions (assume their maybe other lenses in future) lsp-lens-enable t ;; Efficient use of space in treemacs-lsp display treemacs-space-between-root-nodes nil ;; Optimization for large files lsp-file-watch-threshold 10000 lsp-log-io nil ) dotspacemacs/user-config settings \u03bb\ufe0e Additional settings have been added to the dotspacemacs/user-config section of .spacemacs file as they were not working as layer variables. Spacemacs Configuration - dotspacemacs/user-config ( setq lsp-ui-sideline-enable nil ) ( setq lsp-modeline-diagnostics-scope :workspace ) Customising symbol highlighting \u03bb\ufe0e Symbol highlighting can be toggled using the command lsp-toggle-symbol-highlighting and the startup state can be set using the lsp layer configuration variable lsp-enable-symbol-highlighting The face used for highlighting will vary by theme. Use the Emacs customize command to configure the lsp-syntax-highlight-read face or add the theming layer to .spacemacs and add a custom face to dotspacemacs/user-init section of .spacemacs In this example, the default orange background color is removed and the font weigh set to bold. emacs title \"Spacemacs configuration - dotspacemacs/user-init\" (setq-default theming-modifications '((doom-gruvbox-light (lsp-face-highlight-read :background nil :weight bold)))) Key bindings over-ridden by lsp include \u03bb\ufe0e , h h calls cider-doc without LSP enabled. With LSP enabled then describe-thing-at-point command is called instead. This is similar to cider-doc , however, it does not allow the navigation to the source code definition of the function. Yas-snippets and LSP \u03bb\ufe0e LSP uses company-lsp mode and manages the auto-completion popup. Yasnippets do not seem to work with company-lsp (although it should be possible in theory). SPC i s will run helm-yas and provides a menu to select and insert snippets into the current buffer. M-/ will expand a matching snippet too (although it seems to take a few tries).","title":"Configure LSP and Cider"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#configure-lsp-and-cider","text":"The Spacemacs lsp layer has a default configuration for all languages The LSP Mode website provides examples of LSP features and there is a long list of LSP settings Add clojure-backend 'cider as a clojure layer variable to the clojure layer in the .spacemacs file to run Cider without LSP features. Start with Minimal Features and add when useful Practicalli recommends starting with a minimal LSP configuration to avoid conflict with features that are present in Cider. LSP features can be enabled when you find them valuable. practicalli/spacemacs.d configuration for Spacemacs included a minimal configuration for Cider and Clojure-lsp. This configuration uses predominately CIDER features. Minimal LSP UI elements and features are added without distracting from the minimal Spacemacs experience.","title":"Configure LSP and Cider"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#pre-requisites","text":"SPC SPC all-the-icons-install-fonts command will install icons that support the breadcrumbs on headerline feature of LSP UI. This provides the director path, file name and symbol as a breadcrumb trail at the top of each buffer.","title":"Pre-requisites"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#optional-clj-kondo","text":"clojure-lsp includes the latest clj-kondo binary if not found on the execution path. so any external install of the clj-kondo binary is optional. Remove the flycheck-clj-kondo configuration, clojure-enable-linters 'clj-kondo , from the clojure layer in .spacemacs to avoid duplication of results.","title":"Optional - clj-kondo"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#spacemacs-clojure-layer-configuration","text":"practicalli/spacemacs.d configuration uses clojure-mode features for indenting and aligning forms as you type. In .spacemacs, the clojure layer variables allow for evaluating top-level forms from within a rich comment block. The size limit helps avoid slow-down of Emacs from too much output in the REPL buffer. Spacemacs configuration - `dotspacemacs-layer-configuration` ( clojure :variables ;; clojure-backend 'cider ;; use cider and disable lsp ;; clojure-enable-linters 'clj-kondo ;; clj-kondo included in lsp cider-repl-display-help-banner nil ;; disable help banner cider-pprint-fn 'fipp ;; fast pretty printing clojure-indent-style 'align-arguments clojure-align-forms-automatically t clojure-toplevel-inside-comment-form t ;; evaluate expressions in comment as top level cider-result-overlay-position 'at-point ;; results shown right after expression cider-overlays-use-font-lock t cider-repl-buffer-size-limit 100 ;; limit lines shown in REPL buffer )","title":"Spacemacs Clojure layer configuration"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#aligning-forms","text":"SPC m = l aligns arguments in the current line or selected region. Automatic aligning of forms is not yet supported in LSP for Clojure. LSP aligning forms not fully supported Support for associative syntax alignment is an issue to add aligning forms to cljfmt, which is used by LSP for formatting. Automatic aligning of forms works with clojure-mode by configuring aggressive-indent-mode , however, this seriously conflicts with LSP formatting creating an unworkable editing experience. To auto-align arguments using clojure-mode, set lsp-enable-on-type-formatting to nil in the lsp layer configuration. Then add the following configuration in dotspacemacs/user-config section of .spacemacs Spacemacs Configuration - dotspacemacs/user-config ;; Indentation of function forms ;; https://github.com/clojure-emacs/clojure-mode#indentation-of-function-forms ( setq clojure-indent-style 'align-arguments ) ;; ;; Vertically align s-expressions ;; https://github.com/clojure-emacs/clojure-mode#vertical-alignment ( setq clojure-align-forms-automatically t ) ;; ;; Auto-indent code automatically ;; WARNING - really conflicts with LSP formatting - set lsp-enable-on-type-formatting to nil in lsp layer ;; https://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/ ( add-hook 'clojure-mode-hook #' aggressive-indent-mode )","title":"Aligning forms"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#lsp-layer-variables","text":"Add the lsp layer to .spacemacs and include the following variables for an uncluttered LSP UI. Spacemacs configuration - dotspacemacs/user-config ( lsp :variables ;; Formatting and indentation - use Cider instead lsp-enable-on-type-formatting t ;; Set to nil to use CIDER features instead of LSP UI lsp-enable-indentation t lsp-enable-snippet t ;; to test again ;; symbol highlighting - `lsp-toggle-symbol-highlight` toggles highlighting ;; subtle highlighting for doom-gruvbox-light theme defined in dotspacemacs/user-config lsp-enable-symbol-highlighting t ;; Show lint error indicator in the mode line lsp-modeline-diagnostics-enable t ;; lsp-modeline-diagnostics-scope :workspace ;; popup documentation boxes ;; lsp-ui-doc-enable nil ;; disable all doc popups lsp-ui-doc-show-with-cursor nil ;; doc popup for cursor ;; lsp-ui-doc-show-with-mouse t ;; doc popup for mouse ;; lsp-ui-doc-delay 2 ;; delay in seconds for popup to display lsp-ui-doc-include-signature t ;; include function signature ;; lsp-ui-doc-position 'at-point ;; positioning of doc popup: top bottom at-point lsp-ui-doc-alignment 'window ;; relative location of doc popup: frame window ;; code actions and diagnostics text as right-hand side of buffer lsp-ui-sideline-enable nil lsp-ui-sideline-show-code-actions nil ;; lsp-ui-sideline-delay 500 ;; lsp-ui-sideline-show-diagnostics nil ;; reference count for functions (assume their maybe other lenses in future) lsp-lens-enable t ;; Efficient use of space in treemacs-lsp display treemacs-space-between-root-nodes nil ;; Optimization for large files lsp-file-watch-threshold 10000 lsp-log-io nil )","title":"LSP layer variables"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#dotspacemacsuser-config-settings","text":"Additional settings have been added to the dotspacemacs/user-config section of .spacemacs file as they were not working as layer variables. Spacemacs Configuration - dotspacemacs/user-config ( setq lsp-ui-sideline-enable nil ) ( setq lsp-modeline-diagnostics-scope :workspace )","title":"dotspacemacs/user-config settings"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#customising-symbol-highlighting","text":"Symbol highlighting can be toggled using the command lsp-toggle-symbol-highlighting and the startup state can be set using the lsp layer configuration variable lsp-enable-symbol-highlighting The face used for highlighting will vary by theme. Use the Emacs customize command to configure the lsp-syntax-highlight-read face or add the theming layer to .spacemacs and add a custom face to dotspacemacs/user-init section of .spacemacs In this example, the default orange background color is removed and the font weigh set to bold. emacs title \"Spacemacs configuration - dotspacemacs/user-init\" (setq-default theming-modifications '((doom-gruvbox-light (lsp-face-highlight-read :background nil :weight bold))))","title":"Customising symbol highlighting"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#key-bindings-over-ridden-by-lsp-include","text":", h h calls cider-doc without LSP enabled. With LSP enabled then describe-thing-at-point command is called instead. This is similar to cider-doc , however, it does not allow the navigation to the source code definition of the function.","title":"Key bindings over-ridden by lsp include"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#yas-snippets-and-lsp","text":"LSP uses company-lsp mode and manages the auto-completion popup. Yasnippets do not seem to work with company-lsp (although it should be possible in theory). SPC i s will run helm-yas and provides a menu to select and insert snippets into the current buffer. M-/ will expand a matching snippet too (although it seems to take a few tries).","title":"Yas-snippets and LSP"},{"location":"install-spacemacs/clojure-lsp/snippets/","text":"Clojure LSP snippets \u03bb\ufe0e Clojure LSP contains several built-in snippets . The practicalli/clojure-lsp-config repository enhances and extends the available snippets, helping create code that documents its purpose clearly. Practicalli Snippets for Clojure LSP Install Practicalli Clojure LSP snippets \u03bb\ufe0e practicalli/clojure-lsp-config contains a wide range of snippets for Clojure LSP, some of which were contributed to the Clojure LSP project Free Desktop XDG Config Classic Config Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Clojure LSP should automatically pick up the new changes without having to restart. Restart LSP Workspace , b r will restart the current LSP workspace in the event snippets are not showing Using snippets \u03bb\ufe0e Start typing the name of the snippet and it should appear in the auto-completion pop-up menu. Matching entry names end with (Snippet) . Enter to expand the highlighted snipped Tab / Ctrl + j & Ctrl + k or arrow-keys navigate the auto-completion pop-up list when there are multiple entries. Adding custom snippets \u03bb\ufe0e Edit the config.edn file. The :additional-snippets key has a collection of hash-maps, with each hash-map representing a snippet. $n represents a tab-stop, where the TAB key will jump throughout the snippet. n is an integer number to define the order of the tab-stops, e.g. $1 , $2 , $3. $0 is a special tab-stop that denotes the end of the tab-stops, ending the snippet interaction. ${n:placeholder text} allows text to be placed at the tab-stop to give an indication as to the value to be completed. The placeholder text is automatically highlighted when tabbing into the tab-stop, so typing a new value replaces the placeholder text. Highlighting and replacing the text does not work for the $0 tab-stop, so placeholder text should not be used with this specific tab-stop.","title":"Clojure LSP snippets"},{"location":"install-spacemacs/clojure-lsp/snippets/#clojure-lsp-snippets","text":"Clojure LSP contains several built-in snippets . The practicalli/clojure-lsp-config repository enhances and extends the available snippets, helping create code that documents its purpose clearly. Practicalli Snippets for Clojure LSP","title":"Clojure LSP snippets"},{"location":"install-spacemacs/clojure-lsp/snippets/#install-practicalli-clojure-lsp-snippets","text":"practicalli/clojure-lsp-config contains a wide range of snippets for Clojure LSP, some of which were contributed to the Clojure LSP project Free Desktop XDG Config Classic Config Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME /clojure-lsp Clone via SSH git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Clone via HTTPS git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $HOME /.clojure-lsp Clojure LSP should automatically pick up the new changes without having to restart. Restart LSP Workspace , b r will restart the current LSP workspace in the event snippets are not showing","title":"Install Practicalli Clojure LSP snippets"},{"location":"install-spacemacs/clojure-lsp/snippets/#using-snippets","text":"Start typing the name of the snippet and it should appear in the auto-completion pop-up menu. Matching entry names end with (Snippet) . Enter to expand the highlighted snipped Tab / Ctrl + j & Ctrl + k or arrow-keys navigate the auto-completion pop-up list when there are multiple entries.","title":"Using snippets"},{"location":"install-spacemacs/clojure-lsp/snippets/#adding-custom-snippets","text":"Edit the config.edn file. The :additional-snippets key has a collection of hash-maps, with each hash-map representing a snippet. $n represents a tab-stop, where the TAB key will jump throughout the snippet. n is an integer number to define the order of the tab-stops, e.g. $1 , $2 , $3. $0 is a special tab-stop that denotes the end of the tab-stops, ending the snippet interaction. ${n:placeholder text} allows text to be placed at the tab-stop to give an indication as to the value to be completed. The placeholder text is automatically highlighted when tabbing into the tab-stop, so typing a new value replaces the placeholder text. Highlighting and replacing the text does not work for the $0 tab-stop, so placeholder text should not be used with this specific tab-stop.","title":"Adding custom snippets"},{"location":"introduction/additional-resources/","text":"Resources \u03bb\ufe0e Spacemacs \u03bb\ufe0e Spacemacs Website Spacemacs ABC - walk-through of features in alphabetical order SimpleTutorials: Spacemacs Clojure Getting Started \u03bb\ufe0e 4Ever Clojure exercises & 4Clojure walk-through videos Exercism.io Clojure track Clojure Reference \u03bb\ufe0e Clojure.org , features and rational Clojure documentation Clojure Cheatsheet Clojure Toolbox - cross-referencing the Clojure ecosystem Clojure Books & Tutorials \u03bb\ufe0e Practicalli Clojure Practicalli Clojure WebApps Practicalli Clojurescript Clojure cookbook","title":"Resources"},{"location":"introduction/additional-resources/#resources","text":"","title":"Resources"},{"location":"introduction/additional-resources/#spacemacs","text":"Spacemacs Website Spacemacs ABC - walk-through of features in alphabetical order SimpleTutorials: Spacemacs","title":"Spacemacs"},{"location":"introduction/additional-resources/#clojure-getting-started","text":"4Ever Clojure exercises & 4Clojure walk-through videos Exercism.io Clojure track","title":"Clojure Getting Started"},{"location":"introduction/additional-resources/#clojure-reference","text":"Clojure.org , features and rational Clojure documentation Clojure Cheatsheet Clojure Toolbox - cross-referencing the Clojure ecosystem","title":"Clojure Reference"},{"location":"introduction/additional-resources/#clojure-books-tutorials","text":"Practicalli Clojure Practicalli Clojure WebApps Practicalli Clojurescript Clojure cookbook","title":"Clojure Books &amp; Tutorials"},{"location":"introduction/workshop-conventions/","text":"Workshop Conventions \u03bb\ufe0e Keybinding conventions \u03bb\ufe0e General menu and commands Spacemacs Major mode Normal Insert Command SPC - global menu , - major mode menu Evil (Vim) normal mode Evil (Vim) insert mode Name of Emacs command Evil (vim-style) states normal - manipulating text insert - typing in new text visual - selecting regions of text motion - ? lisp - structural editing (smartparens) iedit - editing multiple occurrences in a buffer simultaneously Evilified - Emacs applications with Evil key bindings emacs - Emacs chorded key bindings, i.e. C-c C-x , C-x C-s , etc. Spacemacs - SPC \u03bb\ufe0e Spacemacs provides a global menu where you can access commands using a mnemonic, text based menu. Its the recommended starting point for those new to Spacemacs. Access the global menu via SPC in Evil Normal mode or via M-m in all other modes Major Mode - , \u03bb\ufe0e Access features specific to the current major mode. For example when you have a Clojure file or REPL buffer open you can access a Clojure specific menu using M-RET in Emacs mode or , in Vim normal mode. Having a major mode specific menu removes the need to use SPC m in Vim normal mode or M-m in Emacs mode. Evil (normal mode) \u03bb\ufe0e Vim arranges keybindings across multiple modes, reducing the number of key presses required to carry out commands normal mode specific short-cuts to access Spacemacs features Command - SPC SPC \u03bb\ufe0e Every menu item and keybinding in Spacemacs is calling a function, collectively called commands. Use commands with SPC SPC in Vim normal mode or M-x in any mode. Use a command when there is no menu item or keybinding. Classic Emacs Keybindings \u03bb\ufe0e The keybindings used in Emacs (holy mode) are also available, many of which start with C-c or C-x . If you are familiar with these then its fine to stick with them. However, if you have trouble learning or remembering them, then switch to the Spacemacs mnemonic alternatives. Universal argument \u03bb\ufe0e SPC-u is the key binding for the Emacs universal argument, C-u in Emacs, which is used before other key bindings to modify the function that is called. For example, SPC-u , m s in a Clojure file will start a REPL, but allow for editing of the command line that starts the REPL process","title":"Workshop Conventions"},{"location":"introduction/workshop-conventions/#workshop-conventions","text":"","title":"Workshop Conventions"},{"location":"introduction/workshop-conventions/#keybinding-conventions","text":"General menu and commands Spacemacs Major mode Normal Insert Command SPC - global menu , - major mode menu Evil (Vim) normal mode Evil (Vim) insert mode Name of Emacs command Evil (vim-style) states normal - manipulating text insert - typing in new text visual - selecting regions of text motion - ? lisp - structural editing (smartparens) iedit - editing multiple occurrences in a buffer simultaneously Evilified - Emacs applications with Evil key bindings emacs - Emacs chorded key bindings, i.e. C-c C-x , C-x C-s , etc.","title":"Keybinding conventions"},{"location":"introduction/workshop-conventions/#spacemacs-spc","text":"Spacemacs provides a global menu where you can access commands using a mnemonic, text based menu. Its the recommended starting point for those new to Spacemacs. Access the global menu via SPC in Evil Normal mode or via M-m in all other modes","title":"Spacemacs - SPC"},{"location":"introduction/workshop-conventions/#major-mode-","text":"Access features specific to the current major mode. For example when you have a Clojure file or REPL buffer open you can access a Clojure specific menu using M-RET in Emacs mode or , in Vim normal mode. Having a major mode specific menu removes the need to use SPC m in Vim normal mode or M-m in Emacs mode.","title":"Major Mode - ,"},{"location":"introduction/workshop-conventions/#evil-normal-mode","text":"Vim arranges keybindings across multiple modes, reducing the number of key presses required to carry out commands normal mode specific short-cuts to access Spacemacs features","title":"Evil (normal mode)"},{"location":"introduction/workshop-conventions/#command-spc-spc","text":"Every menu item and keybinding in Spacemacs is calling a function, collectively called commands. Use commands with SPC SPC in Vim normal mode or M-x in any mode. Use a command when there is no menu item or keybinding.","title":"Command - SPC SPC"},{"location":"introduction/workshop-conventions/#classic-emacs-keybindings","text":"The keybindings used in Emacs (holy mode) are also available, many of which start with C-c or C-x . If you are familiar with these then its fine to stick with them. However, if you have trouble learning or remembering them, then switch to the Spacemacs mnemonic alternatives.","title":"Classic Emacs Keybindings"},{"location":"introduction/workshop-conventions/#universal-argument","text":"SPC-u is the key binding for the Emacs universal argument, C-u in Emacs, which is used before other key bindings to modify the function that is called. For example, SPC-u , m s in a Clojure file will start a REPL, but allow for editing of the command line that starts the REPL process","title":"Universal argument"},{"location":"markdown-mode/","text":"Markdown Mode \u03bb\ufe0e Markdown is a text format that provides very simple structure for documents. Markdown is often used for README files in code repositories. Markdown guide Markdown menu \u03bb\ufe0e Adding formatting \u03bb\ufe0e , x opens the text sub-menu to add formatting to markdown. Commonly used commands include: , x b to add bold text, **** . Use with visual select to make existing code bold , x q to insert a block quote, > , x B to insert a checkbox * [ ] , x C and select a language to insert a markdown code block , x k to insert a keyboard tag , used with CSS to render keyboard keys Headings \u03bb\ufe0e Define up to 6 levels of headings to help organize the content, collapsing headings to focus on specific parts. , h 1 to insert a heading, # # . Headings 1 to 6 are supported TAB to expand / collapse a single headings S-TAB to expand / collapse all headings","title":"Markdown Mode"},{"location":"markdown-mode/#markdown-mode","text":"Markdown is a text format that provides very simple structure for documents. Markdown is often used for README files in code repositories. Markdown guide","title":"Markdown Mode"},{"location":"markdown-mode/#markdown-menu","text":"","title":"Markdown menu"},{"location":"markdown-mode/#adding-formatting","text":", x opens the text sub-menu to add formatting to markdown. Commonly used commands include: , x b to add bold text, **** . Use with visual select to make existing code bold , x q to insert a block quote, > , x B to insert a checkbox * [ ] , x C and select a language to insert a markdown code block , x k to insert a keyboard tag , used with CSS to render keyboard keys","title":"Adding formatting"},{"location":"markdown-mode/#headings","text":"Define up to 6 levels of headings to help organize the content, collapsing headings to focus on specific parts. , h 1 to insert a heading, # # . Headings 1 to 6 are supported TAB to expand / collapse a single headings S-TAB to expand / collapse all headings","title":"Headings"},{"location":"misc/","text":"Miscellaneous things to do in Emacs \u03bb\ufe0e Random collection of things you can do in Emacs (which is a very long list, so here are just a few of the most interesting).","title":"Miscellaneous things to do in Emacs"},{"location":"misc/#miscellaneous-things-to-do-in-emacs","text":"Random collection of things you can do in Emacs (which is a very long list, so here are just a few of the most interesting).","title":"Miscellaneous things to do in Emacs"},{"location":"misc/artist-mode/","text":"Artist Mode \u03bb\ufe0e Artist is an Emacs lisp package that allows you to draw lines, rectangles, squares, poly-lines, ellipses and circles by using your mouse and/or keyboard. The shapes are made up with the ascii characters. , -, / and . {% youtube %} https://youtu.be/mDp7VvdtLtY?autoplay=1loop=1","title":"Artist Mode"},{"location":"misc/artist-mode/#artist-mode","text":"Artist is an Emacs lisp package that allows you to draw lines, rectangles, squares, poly-lines, ellipses and circles by using your mouse and/or keyboard. The shapes are made up with the ascii characters. , -, / and . {% youtube %} https://youtu.be/mDp7VvdtLtY?autoplay=1loop=1","title":"Artist Mode"},{"location":"misc/unicode-characters/","text":"Unicode Characters \u03bb\ufe0e SPC i u shows a pop-up list of Unicode characters by name, with each name also showing the unicode character. The first time SPC i u is called the unicode characters are loaded, as spacemacs doesn't load them in by default. Loading should only take a second. As the popup list can be narrowed by typing part or all of the name of characters. The list shows a fuzzy match of unicode names that match. Keybindings Description SPC i u Loads unicode characters and lists them in a popup window. Uses helm completion Classic Emacs Unicode 8 \u03bb\ufe0e C-c 8 RET is the classic way to add Unicode 8 characters, which seems to show different symbols, is that unicode 8 and the other unicode 16 perhaps?","title":"Unicode Characters"},{"location":"misc/unicode-characters/#unicode-characters","text":"SPC i u shows a pop-up list of Unicode characters by name, with each name also showing the unicode character. The first time SPC i u is called the unicode characters are loaded, as spacemacs doesn't load them in by default. Loading should only take a second. As the popup list can be narrowed by typing part or all of the name of characters. The list shows a fuzzy match of unicode names that match. Keybindings Description SPC i u Loads unicode characters and lists them in a popup window. Uses helm completion","title":"Unicode Characters"},{"location":"misc/unicode-characters/#classic-emacs-unicode-8","text":"C-c 8 RET is the classic way to add Unicode 8 characters, which seems to show different symbols, is that unicode 8 and the other unicode 16 perhaps?","title":"Classic Emacs Unicode 8"},{"location":"navigating-code/","text":"Navigating code \u03bb\ufe0e Jumping, marks, code folding and searching are effective ways of navigating a codebase, rather than using the arrow keys to move character by character or line by line. General Tools \u03bb\ufe0e Use Evil normal mode to quickly jump around your code. Key binding Description SPC j j Search across all windows for given character(s), type highlighted character(s) to jump to location SPC j C Jump to first unbalanced parens SPC j c / ' ' Jump to last change m x , ' x Create marker called x , jump to marker called x (use any alphabet character) (see markers section ) # Symbol highlight transient state - navigate symbol names, iedit, swoop SPC s s Search in current buffer, C-j / C-k to navigate results SPC s p Search in project, C-j/k to navigate results Code Folding \u03bb\ufe0e Folding code hides away details, so you can just look at the function definitions and data structures of interest on the same screen. Key binding Description z or SPC z . folding code blocks z opens a menu to allow you to un/fold your code quickly. SPC z . is the code fold transient menu should you wish to un/fold code many times. See the code folding section for more details. Structural Editing \u03bb\ufe0e SPC k starts lisp state structural editing . hjkl to navigate the cursor across symbols and open/close parens","title":"Navigating code"},{"location":"navigating-code/#navigating-code","text":"Jumping, marks, code folding and searching are effective ways of navigating a codebase, rather than using the arrow keys to move character by character or line by line.","title":"Navigating code"},{"location":"navigating-code/#general-tools","text":"Use Evil normal mode to quickly jump around your code. Key binding Description SPC j j Search across all windows for given character(s), type highlighted character(s) to jump to location SPC j C Jump to first unbalanced parens SPC j c / ' ' Jump to last change m x , ' x Create marker called x , jump to marker called x (use any alphabet character) (see markers section ) # Symbol highlight transient state - navigate symbol names, iedit, swoop SPC s s Search in current buffer, C-j / C-k to navigate results SPC s p Search in project, C-j/k to navigate results","title":"General Tools"},{"location":"navigating-code/#code-folding","text":"Folding code hides away details, so you can just look at the function definitions and data structures of interest on the same screen. Key binding Description z or SPC z . folding code blocks z opens a menu to allow you to un/fold your code quickly. SPC z . is the code fold transient menu should you wish to un/fold code many times. See the code folding section for more details.","title":"Code Folding"},{"location":"navigating-code/#structural-editing","text":"SPC k starts lisp state structural editing . hjkl to navigate the cursor across symbols and open/close parens","title":"Structural Editing"},{"location":"navigating-code/code-folding/","text":"Code folding \u03bb\ufe0e Code folding allows you to collapse a code block onto one line, allowing you to see more of your code in the window. A code block for Clojure includes comments, def , defn and the threading macros -> and --> . Overview of a namespace z m shows just the names of all function definitions and vars in a namespace, providing a quick way to review all namespace api. Keybindings \u03bb\ufe0e Evil state Description z a Toggle fold for current code block z c Folds a code block z m Folds all code in buffer z o Opens current folded code block z O Opens current folded code block recursively z r Opens all folded code blocks in the buffer Code Fold Transient State \u03bb\ufe0e Space z opens a transient state for folding code, most useful when reviewing code. Code folding methods \u03bb\ufe0e There are two code folding methods, evil folding (the default) and origami . Evil fold is recommended for Clojure development. Origami adds a recursive open and close and what it calls an org-mode header collapse (didn't seem to work on Clojure code). Origami seems less useful for Clojure than evil-fold, as folding seems to only work at the top level. Origami allows you to write your own parser to teach different ways to fold code. Origami is a great choice if you want to customise your code folding. Switching to origami code folding \u03bb\ufe0e Space f e d to open the Spacemacs configuration file Space s s dotspacemacs-folding-method to find the code folding setting, Enter to end the search. Change the code folding method: dotspacemacs-folding-method 'origami Space q r to restarting Emacs and download the origami package.","title":"Code Folding"},{"location":"navigating-code/code-folding/#code-folding","text":"Code folding allows you to collapse a code block onto one line, allowing you to see more of your code in the window. A code block for Clojure includes comments, def , defn and the threading macros -> and --> . Overview of a namespace z m shows just the names of all function definitions and vars in a namespace, providing a quick way to review all namespace api.","title":"Code folding"},{"location":"navigating-code/code-folding/#keybindings","text":"Evil state Description z a Toggle fold for current code block z c Folds a code block z m Folds all code in buffer z o Opens current folded code block z O Opens current folded code block recursively z r Opens all folded code blocks in the buffer","title":"Keybindings"},{"location":"navigating-code/code-folding/#code-fold-transient-state","text":"Space z opens a transient state for folding code, most useful when reviewing code.","title":"Code Fold Transient State"},{"location":"navigating-code/code-folding/#code-folding-methods","text":"There are two code folding methods, evil folding (the default) and origami . Evil fold is recommended for Clojure development. Origami adds a recursive open and close and what it calls an org-mode header collapse (didn't seem to work on Clojure code). Origami seems less useful for Clojure than evil-fold, as folding seems to only work at the top level. Origami allows you to write your own parser to teach different ways to fold code. Origami is a great choice if you want to customise your code folding.","title":"Code folding methods"},{"location":"navigating-code/code-folding/#switching-to-origami-code-folding","text":"Space f e d to open the Spacemacs configuration file Space s s dotspacemacs-folding-method to find the code folding setting, Enter to end the search. Change the code folding method: dotspacemacs-folding-method 'origami Space q r to restarting Emacs and download the origami package.","title":"Switching to origami code folding"},{"location":"navigating-code/expressions/","text":"Navigating Expressions \u03bb\ufe0e Jumping between symbols and expressions is an effective way to navigate your Clojure code, especially where you have nested expressions. SPC k . enters Lisp State transient state, where you can easily navigate around symbols and expressions. Key bindings Description $ jump to end of current expression 0 jump to the beginning of current expression j / k next close paren / previous open paren l / h next symbol / previous symbol L / H next expression / previous expression t transpose expression U got to parent sexp backward w wrap expression with parenthesis W unwrap expression y copy expression Lisp state has many more examples of structural editing.","title":"Expressions"},{"location":"navigating-code/expressions/#navigating-expressions","text":"Jumping between symbols and expressions is an effective way to navigate your Clojure code, especially where you have nested expressions. SPC k . enters Lisp State transient state, where you can easily navigate around symbols and expressions. Key bindings Description $ jump to end of current expression 0 jump to the beginning of current expression j / k next close paren / previous open paren l / h next symbol / previous symbol L / H next expression / previous expression t transpose expression U got to parent sexp backward w wrap expression with parenthesis W unwrap expression y copy expression Lisp state has many more examples of structural editing.","title":"Navigating Expressions"},{"location":"navigating-code/find-usages/","text":"Find Usages \u03bb\ufe0e Show all functions that reference a function or any var, matching on the namespace and symbol name. cider-xref-fn-refs - find use of a function under the cursor, showing results in a new buffer cider-xref-fn-refs-select - show the usages of the function at point in the mini-buffer cider-xref-fn-deps and cider-xref-fn-deps-select to navigate to the functions used by some function Pull Request for Spacemacs key bindings A Pull request should be created to add key binding to Spacemacs to launch these commands. Limitations \u03bb\ufe0e Find usages only works for Clojure will show only data for evaluated namespaces. Only information that a function is used is provided, there is no information as to the precise location. Lambda functions do not currently work with find usages. Alternative approaches \u03bb\ufe0e , r f u find usages with clj-refactor.el Space / pattern will show all matches to the pattern in a project. Ctrl + c Ctrl + e will open those results in a separate buffer and any edits will be applied to the original files. References \u03bb\ufe0e Discovering Runtime Function References in Clojure Hard CIDER: find usages","title":"Find Uses"},{"location":"navigating-code/find-usages/#find-usages","text":"Show all functions that reference a function or any var, matching on the namespace and symbol name. cider-xref-fn-refs - find use of a function under the cursor, showing results in a new buffer cider-xref-fn-refs-select - show the usages of the function at point in the mini-buffer cider-xref-fn-deps and cider-xref-fn-deps-select to navigate to the functions used by some function Pull Request for Spacemacs key bindings A Pull request should be created to add key binding to Spacemacs to launch these commands.","title":"Find Usages"},{"location":"navigating-code/find-usages/#limitations","text":"Find usages only works for Clojure will show only data for evaluated namespaces. Only information that a function is used is provided, there is no information as to the precise location. Lambda functions do not currently work with find usages.","title":"Limitations"},{"location":"navigating-code/find-usages/#alternative-approaches","text":", r f u find usages with clj-refactor.el Space / pattern will show all matches to the pattern in a project. Ctrl + c Ctrl + e will open those results in a separate buffer and any edits will be applied to the original files.","title":"Alternative approaches"},{"location":"navigating-code/find-usages/#references","text":"Discovering Runtime Function References in Clojure Hard CIDER: find usages","title":"References"},{"location":"navigating-code/function-definitions/","text":"Navigating to function definitions \u03bb\ufe0e , g g go to the source code definition of the Clojure function under the cursor. If the cursor is not on a function name, a prompt displays asking for the function name. , g G to open the definition in another window ' ' returns to the point in the code you originally jumped from. Hint::Run the REPL for best results \u03bb\ufe0e cider-find-var is used when a REPL is running, otherwise dumb-jump-go is called. clojure.core functions are known to CIDER. Custom functions, i.e. defn expressions in the project, must first be evaluated in the REPL. If , g g is not working, try evaluate any expression from the project and try , g g again. Listing functions \u03bb\ufe0e SPC j i lists matching functions of using the name under the cursor Functions can come from anything that is on the classpath, including Java sources if they are installed. Hint::Java classes and methods \u03bb\ufe0e , g g also works for Java definitions once the Java sources are added to your project. See the section on Java Definitions","title":"Functions"},{"location":"navigating-code/function-definitions/#navigating-to-function-definitions","text":", g g go to the source code definition of the Clojure function under the cursor. If the cursor is not on a function name, a prompt displays asking for the function name. , g G to open the definition in another window ' ' returns to the point in the code you originally jumped from.","title":"Navigating to function definitions"},{"location":"navigating-code/function-definitions/#hintrun-the-repl-for-best-results","text":"cider-find-var is used when a REPL is running, otherwise dumb-jump-go is called. clojure.core functions are known to CIDER. Custom functions, i.e. defn expressions in the project, must first be evaluated in the REPL. If , g g is not working, try evaluate any expression from the project and try , g g again.","title":"Hint::Run the REPL for best results"},{"location":"navigating-code/function-definitions/#listing-functions","text":"SPC j i lists matching functions of using the name under the cursor Functions can come from anything that is on the classpath, including Java sources if they are installed.","title":"Listing functions"},{"location":"navigating-code/function-definitions/#hintjava-classes-and-methods","text":", g g also works for Java definitions once the Java sources are added to your project. See the section on Java Definitions","title":"Hint::Java classes and methods"},{"location":"navigating-code/java-definitions/","text":"Navigating to Java Class and Method definitions \u03bb\ufe0e , g g with the cursor on a Java class or method name in a Clojure source code file will jump to its definition. This is useful if you are using Java interop in your Clojure code or using Java libraries as part of your project, e.g. Java swing code example Add the Java sources locally to also enable searching with ripgrep or ag. Or add a java-source alias when starting a REPL. Adding a deps.edn alias for Java sources \u03bb\ufe0e Using an alias is the recommended way to include Java sources for Clojure CLI projects, as those sources are a only used in the development workflow. :src/java17 { :extra-deps { java-sources { :local/root \"/usr/lib/jvm/openjdk-17/lib/src.zip\" }}} :src/clojure { :extra-deps { org.clojure/source { :local/root \"~/projects/community/clojure.org/clojure\" }}} practicalli/example deps.edn includes example aliases for java sources Location of Sources The location of the Java src.zip file may differ on your operating system. You can also extract the src.zip file and use the extracted sources. Include Java sources alias during jack-in \u03bb\ufe0e Add a .dir-locals.el file to the root of your Clojure project to include the java sources alias when running cider-jack-in. (( clojure-mode . (( cider-clojure-cli-aliases . \":src/java17\" ) ( cider-preferred-build-tool . \"clojure-cli\" )))) Or include both Java and Clojure Java sources (( clojure-mode . (( cider-clojure-cli-aliases . \":src/java17:src/clojure\" ) ( cider-preferred-build-tool . \"clojure-cli\" )))) Adding Local Clojure and Java sources \u03bb\ufe0e Navigate to Java source files using local copies of the Java Source code . Download and extracting the Clojure and Java sources to your computer. Ubuntu MacOSX Windows CIDER Java sources are available as Debian/Ubuntu packages sudo apt install openjdk-17-source Java source code is part of the JDK installation and can be found at: /Library/Java/JavaVirtualMachines/{jdk-version}/Contents/Home/src.zip. Java source code is part of the JDK installation and can be found at: C:\\Program Files\\Java\\{jdk-version}\\src.zip Download the latest Clojure sources from Maven Extract the Java src.zip file and clojure-x-x-x-sources.jar file Add cider-jdk-src-paths configuration to dotspacemacs/user-config in the .spacemacs file. Change the paths if you extracted the files to a different location. ( setq cider-jdk-src-paths ' ( \"~/projects/java/clojure-1.11.1-sources\" \"~/projects/java/openjdk-17/src\" ))","title":"Java"},{"location":"navigating-code/java-definitions/#navigating-to-java-class-and-method-definitions","text":", g g with the cursor on a Java class or method name in a Clojure source code file will jump to its definition. This is useful if you are using Java interop in your Clojure code or using Java libraries as part of your project, e.g. Java swing code example Add the Java sources locally to also enable searching with ripgrep or ag. Or add a java-source alias when starting a REPL.","title":"Navigating to Java Class and Method definitions"},{"location":"navigating-code/java-definitions/#adding-a-depsedn-alias-for-java-sources","text":"Using an alias is the recommended way to include Java sources for Clojure CLI projects, as those sources are a only used in the development workflow. :src/java17 { :extra-deps { java-sources { :local/root \"/usr/lib/jvm/openjdk-17/lib/src.zip\" }}} :src/clojure { :extra-deps { org.clojure/source { :local/root \"~/projects/community/clojure.org/clojure\" }}} practicalli/example deps.edn includes example aliases for java sources Location of Sources The location of the Java src.zip file may differ on your operating system. You can also extract the src.zip file and use the extracted sources.","title":"Adding a deps.edn alias for Java sources"},{"location":"navigating-code/java-definitions/#include-java-sources-alias-during-jack-in","text":"Add a .dir-locals.el file to the root of your Clojure project to include the java sources alias when running cider-jack-in. (( clojure-mode . (( cider-clojure-cli-aliases . \":src/java17\" ) ( cider-preferred-build-tool . \"clojure-cli\" )))) Or include both Java and Clojure Java sources (( clojure-mode . (( cider-clojure-cli-aliases . \":src/java17:src/clojure\" ) ( cider-preferred-build-tool . \"clojure-cli\" ))))","title":"Include Java sources alias during jack-in"},{"location":"navigating-code/java-definitions/#adding-local-clojure-and-java-sources","text":"Navigate to Java source files using local copies of the Java Source code . Download and extracting the Clojure and Java sources to your computer. Ubuntu MacOSX Windows CIDER Java sources are available as Debian/Ubuntu packages sudo apt install openjdk-17-source Java source code is part of the JDK installation and can be found at: /Library/Java/JavaVirtualMachines/{jdk-version}/Contents/Home/src.zip. Java source code is part of the JDK installation and can be found at: C:\\Program Files\\Java\\{jdk-version}\\src.zip Download the latest Clojure sources from Maven Extract the Java src.zip file and clojure-x-x-x-sources.jar file Add cider-jdk-src-paths configuration to dotspacemacs/user-config in the .spacemacs file. Change the paths if you extracted the files to a different location. ( setq cider-jdk-src-paths ' ( \"~/projects/java/clojure-1.11.1-sources\" \"~/projects/java/openjdk-17/src\" ))","title":"Adding Local Clojure and Java sources"},{"location":"navigating-code/markers/","text":"Navigating using markers \u03bb\ufe0e Markers are used to create adhoc places to jump to in your buffer. m and a character defines the name of the marker. For example, m a defines a marker called a ' and a character jumps to that marker, so ' a jumps to the marker called a ' ' will jump back to the point where the last change was made. Only one marker, use the same character Marker names are case-specific, so in theory you have have up to 52 markers. Recommend only using one marker and the same character for the marker each time, as this will ingrain the action. Using a as the marker is quicker as its on the opposite hand to m and '","title":"Markers"},{"location":"navigating-code/markers/#navigating-using-markers","text":"Markers are used to create adhoc places to jump to in your buffer. m and a character defines the name of the marker. For example, m a defines a marker called a ' and a character jumps to that marker, so ' a jumps to the marker called a ' ' will jump back to the point where the last change was made. Only one marker, use the same character Marker names are case-specific, so in theory you have have up to 52 markers. Recommend only using one marker and the same character for the marker each time, as this will ingrain the action. Using a as the marker is quicker as its on the opposite hand to m and '","title":"Navigating using markers"},{"location":"navigating-code/names-symbols/","text":"Navigate names or symbols \u03bb\ufe0e # or * enters symbol highlight transient state allowing you to jump between the current symbol name and any other instance in the buffer. e to start iedit state and edit all the symbols concurrently. This is so amazing. / will show a helm popup with all the instances of the symbol through out the project files, a quick way to search a project. f will show a helm popup with all the instances of the symbol in a specified file. b will show a helm popup with all the instances of the symbol through out all open buffers (global buffers, so even those in a different layer). s search a buffer and navigate to each location in code with the matching symbol by scrolling though the results. SPC s c clears symbol highlighting and search pattern highlighting. Helm-swoop \u03bb\ufe0e Search a buffer (Clojure namespace) or project and use the results to navigate to the locations in the code for each match found. Keybindings Description SPC s C clear helm-swoop own cache SPC s s execute helm-swoop SPC s S execute helm-multi-swoop SPC s C-s execute helm-multi-swoop-all SPC s p search project For example, navigate to a function definition and all the places that function is called in a project using helm-multi-swoop. Refactor code Refactor section provides examples of using helm-ag, helm-swoop, iedit, narrowing and clj-refactor.","title":"Symbols"},{"location":"navigating-code/names-symbols/#navigate-names-or-symbols","text":"# or * enters symbol highlight transient state allowing you to jump between the current symbol name and any other instance in the buffer. e to start iedit state and edit all the symbols concurrently. This is so amazing. / will show a helm popup with all the instances of the symbol through out the project files, a quick way to search a project. f will show a helm popup with all the instances of the symbol in a specified file. b will show a helm popup with all the instances of the symbol through out all open buffers (global buffers, so even those in a different layer). s search a buffer and navigate to each location in code with the matching symbol by scrolling though the results. SPC s c clears symbol highlighting and search pattern highlighting.","title":"Navigate names or symbols"},{"location":"navigating-code/names-symbols/#helm-swoop","text":"Search a buffer (Clojure namespace) or project and use the results to navigate to the locations in the code for each match found. Keybindings Description SPC s C clear helm-swoop own cache SPC s s execute helm-swoop SPC s S execute helm-multi-swoop SPC s C-s execute helm-multi-swoop-all SPC s p search project For example, navigate to a function definition and all the places that function is called in a project using helm-multi-swoop. Refactor code Refactor section provides examples of using helm-ag, helm-swoop, iedit, narrowing and clj-refactor.","title":"Helm-swoop"},{"location":"navigating-code/namespaces/","text":"Navigating Clojure Namespaces \u03bb\ufe0e , g n ( cider-find-ns ) lists the namespaces currently loaded into the running REPL. Type a pattern to narrow the list. C-j and C-k to navigate the list. RET to open the namespace in the current buffer. Namespaces via Projectile \u03bb\ufe0e SPC p f ( helm-projectile-find-file ) is an effective way to switch between files in the project. Helm uses fuzzy matching, so _ characters can be skipped when narrowing the helm list with a pattern, so searching for a file is the same as searching for a namespace. g g jumps to the top of the file, which should be near to the location of the ns form LSP symbols and ns definitions \u03bb\ufe0e , g s ( helm-lsp-workspace-symbols ) lists all the symbols found in the current project, including ns , def and defn forms. Type in a pattern to narrow the list. C-j and C-k to navigate the list. RET to jump to the symbol, opening the relevant namespace in the current buffer. Browse namespace symbol documentation \u03bb\ufe0e Browse namespace symbols by navigating through the definitions in a namespace ( def , defn ) and view their documentation (doc strings). , h n ( cider-browse-ns ) lists all namespaces loaded into the REPL in the current project. Namespaces in the project that have not been evaluated, directly or via a require, will not be in the list. RET to show the symbols in the namespace RET on a namespace symbol to see the documention in a pop-up wondow. Use the link to the source code file in the documentation to open the namespace in the buffer. REPL buffer cider commands \u03bb\ufe0e , in Evil insert mode in the REPL buffer will bring up the REPL command menu Command Description browse-ns Browse namespace ns Switch to namespace (lists known namespaces) Using code to change the namespace \u03bb\ufe0e in-ns function will set the namespace for the REPL. If that namespace does not exist, then the namespace is created in the current REPL.","title":"Namespaces"},{"location":"navigating-code/namespaces/#navigating-clojure-namespaces","text":", g n ( cider-find-ns ) lists the namespaces currently loaded into the running REPL. Type a pattern to narrow the list. C-j and C-k to navigate the list. RET to open the namespace in the current buffer.","title":"Navigating Clojure Namespaces"},{"location":"navigating-code/namespaces/#namespaces-via-projectile","text":"SPC p f ( helm-projectile-find-file ) is an effective way to switch between files in the project. Helm uses fuzzy matching, so _ characters can be skipped when narrowing the helm list with a pattern, so searching for a file is the same as searching for a namespace. g g jumps to the top of the file, which should be near to the location of the ns form","title":"Namespaces via Projectile"},{"location":"navigating-code/namespaces/#lsp-symbols-and-ns-definitions","text":", g s ( helm-lsp-workspace-symbols ) lists all the symbols found in the current project, including ns , def and defn forms. Type in a pattern to narrow the list. C-j and C-k to navigate the list. RET to jump to the symbol, opening the relevant namespace in the current buffer.","title":"LSP symbols and ns definitions"},{"location":"navigating-code/namespaces/#browse-namespace-symbol-documentation","text":"Browse namespace symbols by navigating through the definitions in a namespace ( def , defn ) and view their documentation (doc strings). , h n ( cider-browse-ns ) lists all namespaces loaded into the REPL in the current project. Namespaces in the project that have not been evaluated, directly or via a require, will not be in the list. RET to show the symbols in the namespace RET on a namespace symbol to see the documention in a pop-up wondow. Use the link to the source code file in the documentation to open the namespace in the buffer.","title":"Browse namespace symbol documentation"},{"location":"navigating-code/namespaces/#repl-buffer-cider-commands","text":", in Evil insert mode in the REPL buffer will bring up the REPL command menu Command Description browse-ns Browse namespace ns Switch to namespace (lists known namespaces)","title":"REPL buffer cider commands"},{"location":"navigating-code/namespaces/#using-code-to-change-the-namespace","text":"in-ns function will set the namespace for the REPL. If that namespace does not exist, then the namespace is created in the current REPL.","title":"Using code to change the namespace"},{"location":"org-mode/","text":"Org-mode \u03bb\ufe0e Org-mode provides a simple way of creating rich documentation and exporting to multiple formats. Org-mode can also manage tasks (TODO lists), keep your schedule (org-agenda) and even literate programming (babel). Examples of what Org-mode can do \u03bb\ufe0e {% youtube %} https://youtu.be/PVsSOmUB7ic Getting started with Org Mode - covers more than what you need to start with Org-mode todo states - interesting ideas with org-mode todo states Overview of Org Mode - Hack Emacs - older, but has more examples Getting started with org \u03bb\ufe0e Open or create a new file with a .org filename extension to start org-mode major mode. For example, if you want to write a guide to your project, you could create an org-mode file called user-guide.org . When you open this file in Spacemacs, org-mode is selected as the major mode for editing.","title":"Org-mode"},{"location":"org-mode/#org-mode","text":"Org-mode provides a simple way of creating rich documentation and exporting to multiple formats. Org-mode can also manage tasks (TODO lists), keep your schedule (org-agenda) and even literate programming (babel).","title":"Org-mode"},{"location":"org-mode/#examples-of-what-org-mode-can-do","text":"{% youtube %} https://youtu.be/PVsSOmUB7ic Getting started with Org Mode - covers more than what you need to start with Org-mode todo states - interesting ideas with org-mode todo states Overview of Org Mode - Hack Emacs - older, but has more examples","title":"Examples of what Org-mode can do"},{"location":"org-mode/#getting-started-with-org","text":"Open or create a new file with a .org filename extension to start org-mode major mode. For example, if you want to write a guide to your project, you could create an org-mode file called user-guide.org . When you open this file in Spacemacs, org-mode is selected as the major mode for editing.","title":"Getting started with org"},{"location":"org-mode/code-blocks/","text":"Org blocks - source code and more \u03bb\ufe0e Block are used to highlight source code and other areas of text that should be highlight differently. , b d calls ( org-babel-demarcate-block ) opens a list of programming languages to select from, pasting an org source code block with the chosen language. When choosing clojure as the language, a source code block is added with the label clojure to indicate the language. # +BEGIN_SRC clojure # +END_SRC , i b displays the currently available templates to use as blocks ( org-insert-structure-template ). These templates provide a wider range than only the source code block.","title":"Org blocks - source code and more"},{"location":"org-mode/code-blocks/#org-blocks-source-code-and-more","text":"Block are used to highlight source code and other areas of text that should be highlight differently. , b d calls ( org-babel-demarcate-block ) opens a list of programming languages to select from, pasting an org source code block with the chosen language. When choosing clojure as the language, a source code block is added with the label clojure to indicate the language. # +BEGIN_SRC clojure # +END_SRC , i b displays the currently available templates to use as blocks ( org-insert-structure-template ). These templates provide a wider range than only the source code block.","title":"Org blocks - source code and more"},{"location":"org-mode/get-things-done/","text":"Org-mode: Get Things Done \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Get Things Done is a simple and effective way to manage tasks using Org-mode todo states. See the article: Emacs - Get Things Done","title":"Org-mode: Get Things Done"},{"location":"org-mode/get-things-done/#org-mode-get-things-done","text":"","title":"Org-mode: Get Things Done"},{"location":"org-mode/get-things-done/#todowork-in-progress-sorry","text":"Get Things Done is a simple and effective way to manage tasks using Org-mode todo states. See the article: Emacs - Get Things Done","title":"TODO::work in progress, sorry"},{"location":"org-mode/headings/","text":"Org-mode Headings \u03bb\ufe0e Organise text content with multiple levels of headings. Focus on sections by expanding and folding the content under headings, to show the level of information required at a particular time. TODO states can be applied to any level of headings. C-RTN to create a heading at the same level of parent (top level heading if no parent) C-S-RTN to create a heading with the TODO state , providing a visual marker of progress. o on a heading creates a new line automatically indented for text, to which a list item, - or check box list, - [ ] , can be added. HINT::Toggle checkboxes \u03bb\ufe0e , T c toggles the state of org checkboxes Collapse / Expand headings \u03bb\ufe0e TAB expands / collapses the heading at the current cursor position. S-TAB will cycle through expanding and collapsing headings at different levels. Moving headings and content around \u03bb\ufe0e Items can be moved to change the order they appear, avoiding the need to cut and paste. Key binding Description M-h or M-\ud83e\udc44 Promote heading (larger) M-l or M-\ud83e\udc46 Demote heading (smaller) M-H , M-S-\ud83e\udc44 Promote heading containing sub-headings M-L or M-S-\ud83e\udc46 Demote heading containing sub-headings M-k or M-\ud83e\udc45 Move heading up within the same level M-j or M-\ud83e\udc47 Move heading down within the same level M-K or M-S-\ud83e\udc45 Move heading up, jumping over parent headings M-J or M-S-\ud83e\udc47 Move heading down, jumping over parent headings Hint::Arrows and other unicode symbols \u03bb\ufe0e The arrow keys used in the page are unicode symbols. SPC i u shows a helm popup allowing you to add a symbol by name. All the symbol names are listed along with the symbol itself.","title":"Org-mode Headings"},{"location":"org-mode/headings/#org-mode-headings","text":"Organise text content with multiple levels of headings. Focus on sections by expanding and folding the content under headings, to show the level of information required at a particular time. TODO states can be applied to any level of headings. C-RTN to create a heading at the same level of parent (top level heading if no parent) C-S-RTN to create a heading with the TODO state , providing a visual marker of progress. o on a heading creates a new line automatically indented for text, to which a list item, - or check box list, - [ ] , can be added.","title":"Org-mode Headings"},{"location":"org-mode/headings/#hinttoggle-checkboxes","text":", T c toggles the state of org checkboxes","title":"HINT::Toggle checkboxes"},{"location":"org-mode/headings/#collapse-expand-headings","text":"TAB expands / collapses the heading at the current cursor position. S-TAB will cycle through expanding and collapsing headings at different levels.","title":"Collapse / Expand headings"},{"location":"org-mode/headings/#moving-headings-and-content-around","text":"Items can be moved to change the order they appear, avoiding the need to cut and paste. Key binding Description M-h or M-\ud83e\udc44 Promote heading (larger) M-l or M-\ud83e\udc46 Demote heading (smaller) M-H , M-S-\ud83e\udc44 Promote heading containing sub-headings M-L or M-S-\ud83e\udc46 Demote heading containing sub-headings M-k or M-\ud83e\udc45 Move heading up within the same level M-j or M-\ud83e\udc47 Move heading down within the same level M-K or M-S-\ud83e\udc45 Move heading up, jumping over parent headings M-J or M-S-\ud83e\udc47 Move heading down, jumping over parent headings","title":"Moving headings and content around"},{"location":"org-mode/headings/#hintarrows-and-other-unicode-symbols","text":"The arrow keys used in the page are unicode symbols. SPC i u shows a helm popup allowing you to add a symbol by name. All the symbol names are listed along with the symbol itself.","title":"Hint::Arrows and other unicode symbols"},{"location":"org-mode/linking/","text":"Linking to files and websites \u03bb\ufe0e , i l adds a file or URL link. Helm pop-up prompts for the filename or URL, then link text and optionally tool tip text. C-y pastes the contents of the kill ring into the helm prompt, so you can easily paste URL's from your browser. The Link prompt provides a recent history of links you have added. Links to files will open in Spacemacs. Website links will open in your default browser. org-cliplink \u03bb\ufe0e , i L adds an org-mode style link using the current value of the clipboard using org-cliplink . Help linking to files \u03bb\ufe0e SPC a o l / M-x org-store-link function gets the path and filename of the current file, appending the contents of the current line of that file to the link. , i l will show the stored link in the helm prompt for the Link. M-x org-insert-last-stored-link will also add a link to a file using the information from org-store-link . TODO::Add keybinding to Spacemacs org layer \u03bb\ufe0e Create a pull request with a keybinding for org-insert-last-stored-link","title":"Linking to files and websites"},{"location":"org-mode/linking/#linking-to-files-and-websites","text":", i l adds a file or URL link. Helm pop-up prompts for the filename or URL, then link text and optionally tool tip text. C-y pastes the contents of the kill ring into the helm prompt, so you can easily paste URL's from your browser. The Link prompt provides a recent history of links you have added. Links to files will open in Spacemacs. Website links will open in your default browser.","title":"Linking to files and websites"},{"location":"org-mode/linking/#org-cliplink","text":", i L adds an org-mode style link using the current value of the clipboard using org-cliplink .","title":"org-cliplink"},{"location":"org-mode/linking/#help-linking-to-files","text":"SPC a o l / M-x org-store-link function gets the path and filename of the current file, appending the contents of the current line of that file to the link. , i l will show the stored link in the helm prompt for the Link. M-x org-insert-last-stored-link will also add a link to a file using the information from org-store-link .","title":"Help linking to files"},{"location":"org-mode/linking/#todoadd-keybinding-to-spacemacs-org-layer","text":"Create a pull request with a keybinding for org-insert-last-stored-link","title":"TODO::Add keybinding to Spacemacs org layer"},{"location":"org-mode/lists-and-checkboxes/","text":"Lists and Checkboxes \u03bb\ufe0e List and Checkboxes are useful for organizing and tracking tasks. Using lists \u03bb\ufe0e - creates a list item in Evil insert mode o on a list item creates a new list item below when in Evil normal mode. O creates a checkbox above. M -> on a list item creates a sub-list and M <- promotes a list item Using checkboxes \u03bb\ufe0e - [ ] creates a list item as a checkbox o on a checkbox item creates a new checkbox item below when in Evil normal mode. O creates a checkbox above. M -> on a list item creates a sub-list and M <- promotes a list item , T c toggles the mark in the checkbox (unless the checkbox has children) When a child checkbox is marked, the parent has a dash to show partial completion. When all child checkboxes are crossed, then the parent is automatically crossed. Tracking checkbox completion \u03bb\ufe0e Add [/] to the end of a heading that contains checkboxes to track the number of completed checkboxes and the total number of checkboxes. Totals will automatically update when the status of a checkbox updates. C-c when the cursor is on one of the [x/x] header totals will update all the totals for all the org-mode buffer.","title":"Lists and Checkboxes"},{"location":"org-mode/lists-and-checkboxes/#lists-and-checkboxes","text":"List and Checkboxes are useful for organizing and tracking tasks.","title":"Lists and Checkboxes"},{"location":"org-mode/lists-and-checkboxes/#using-lists","text":"- creates a list item in Evil insert mode o on a list item creates a new list item below when in Evil normal mode. O creates a checkbox above. M -> on a list item creates a sub-list and M <- promotes a list item","title":"Using lists"},{"location":"org-mode/lists-and-checkboxes/#using-checkboxes","text":"- [ ] creates a list item as a checkbox o on a checkbox item creates a new checkbox item below when in Evil normal mode. O creates a checkbox above. M -> on a list item creates a sub-list and M <- promotes a list item , T c toggles the mark in the checkbox (unless the checkbox has children) When a child checkbox is marked, the parent has a dash to show partial completion. When all child checkboxes are crossed, then the parent is automatically crossed.","title":"Using checkboxes"},{"location":"org-mode/lists-and-checkboxes/#tracking-checkbox-completion","text":"Add [/] to the end of a heading that contains checkboxes to track the number of completed checkboxes and the total number of checkboxes. Totals will automatically update when the status of a checkbox updates. C-c when the cursor is on one of the [x/x] header totals will update all the totals for all the org-mode buffer.","title":"Tracking checkbox completion"},{"location":"org-mode/org-journal/","text":"Org Journal \u03bb\ufe0e Org-journal is an effective way to keep a daily record of discovery from work, personal study, hobbies or even a mood diary to help with mental wellness. SPC a o j j opens a new journal entry for the current day in a new buffer. SPC u SPC a o j j to view the journal without adding a new entry. SPC o j is a user binding as a short-cut for SPC a o j j , added in the practicalli/spacemacs.d configuration o creates a new line automatically indented, or a new list item, - or check box list, - [ ] , if the previous line was that type. C-RET creates a new heading at the same level. M-right-arrow demotes the current heading (smaller heading) and M-left-arrow promotes the current heading. M-up/down-arrow moved heading up or down the list of headings. , displays the org-mode major mode commands. g menu contains org related commands , i l to add a link, prompting first for the URL ( C-y to paste) followed by the text of the link and an optional tool tip. , p and , n will show the previous and next days journal entries, providing a quick way to scroll through the diary. SPC f s to save the journal entry. Hint::Create a check box list \u03bb\ufe0e - is a list and - [ ] adds a checkbox to the list. , T c will toggle the mark in the checkbox, ticked or empty, for the current line. Tracking progress with TODO states \u03bb\ufe0e Any Heading level can be assigned a TODO state to demonstrate progress and use the journal to manage tasks for the day. , L or S-\ud83e\udc46 ( org-shiftright ) cycles through the states, which are TODO DOING and DONE by default. , H or S-\ud83e\udc44 to cycle the states in reverse. Headings in the TODO state are automatically carried over when creating the next days journal. Sub-heading with TODO states are carried over along with their parent heading(s). See the configure section below to change this. Hint::End of day review \u03bb\ufe0e Practicalli recommends reviewing each days journal at the end of the day, before creating the next day. This is a great opportunity to take a few moments to reflect on the day. , p jumps to the previous days journal if items seem to be missing. Manually copy any missing items. , n to view today's journal and paste those missing items. Tracking progress with checkboxes \u03bb\ufe0e - [ ] on a new line adds a checkbox as a list item. , T c toggles the done or not done state of the checkbox from anywhere on the line. Add a cookie to a header containing tasks to show the number or percentage of tasks complete. [/] to show number of complete task and total [%] to show the percentage of completed tasks C-c C-c will force an update of the checkbox totals in the cookie for the current heading. Configure org-journal \u03bb\ufe0e practicalli/spacemacs.d includes the configuration below To manually add org-journal, edit .spacemacs and add these org layer variable with suggested settings from Spacemacs org layer documentation org-enable-org-journal-support t org-journal-dir \"~/projects/journal/\" org-journal-file-format \"%Y-%m-%d\" org-journal-date-prefix \"#+TITLE: \" org-journal-date-format \"%A, %B %d %Y\" org-journal-time-prefix \"* \" org-journal-time-format \"\" The TODO states carried over can be configured using the org-journal-carryover-items variable on the org layer in .spacemacs org-journal-carryover-items \"TODO=\\\"TODO\\\"|TODO=\\\"DOING\\\"|TODO=\\\"BLOCKED\\\"|TODO=\\\"REVIEW\\\"\" )","title":"Org Journal"},{"location":"org-mode/org-journal/#org-journal","text":"Org-journal is an effective way to keep a daily record of discovery from work, personal study, hobbies or even a mood diary to help with mental wellness. SPC a o j j opens a new journal entry for the current day in a new buffer. SPC u SPC a o j j to view the journal without adding a new entry. SPC o j is a user binding as a short-cut for SPC a o j j , added in the practicalli/spacemacs.d configuration o creates a new line automatically indented, or a new list item, - or check box list, - [ ] , if the previous line was that type. C-RET creates a new heading at the same level. M-right-arrow demotes the current heading (smaller heading) and M-left-arrow promotes the current heading. M-up/down-arrow moved heading up or down the list of headings. , displays the org-mode major mode commands. g menu contains org related commands , i l to add a link, prompting first for the URL ( C-y to paste) followed by the text of the link and an optional tool tip. , p and , n will show the previous and next days journal entries, providing a quick way to scroll through the diary. SPC f s to save the journal entry.","title":"Org Journal"},{"location":"org-mode/org-journal/#hintcreate-a-check-box-list","text":"- is a list and - [ ] adds a checkbox to the list. , T c will toggle the mark in the checkbox, ticked or empty, for the current line.","title":"Hint::Create a check box list"},{"location":"org-mode/org-journal/#tracking-progress-with-todo-states","text":"Any Heading level can be assigned a TODO state to demonstrate progress and use the journal to manage tasks for the day. , L or S-\ud83e\udc46 ( org-shiftright ) cycles through the states, which are TODO DOING and DONE by default. , H or S-\ud83e\udc44 to cycle the states in reverse. Headings in the TODO state are automatically carried over when creating the next days journal. Sub-heading with TODO states are carried over along with their parent heading(s). See the configure section below to change this.","title":"Tracking progress with TODO states"},{"location":"org-mode/org-journal/#hintend-of-day-review","text":"Practicalli recommends reviewing each days journal at the end of the day, before creating the next day. This is a great opportunity to take a few moments to reflect on the day. , p jumps to the previous days journal if items seem to be missing. Manually copy any missing items. , n to view today's journal and paste those missing items.","title":"Hint::End of day review"},{"location":"org-mode/org-journal/#tracking-progress-with-checkboxes","text":"- [ ] on a new line adds a checkbox as a list item. , T c toggles the done or not done state of the checkbox from anywhere on the line. Add a cookie to a header containing tasks to show the number or percentage of tasks complete. [/] to show number of complete task and total [%] to show the percentage of completed tasks C-c C-c will force an update of the checkbox totals in the cookie for the current heading.","title":"Tracking progress with checkboxes"},{"location":"org-mode/org-journal/#configure-org-journal","text":"practicalli/spacemacs.d includes the configuration below To manually add org-journal, edit .spacemacs and add these org layer variable with suggested settings from Spacemacs org layer documentation org-enable-org-journal-support t org-journal-dir \"~/projects/journal/\" org-journal-file-format \"%Y-%m-%d\" org-journal-date-prefix \"#+TITLE: \" org-journal-date-format \"%A, %B %d %Y\" org-journal-time-prefix \"* \" org-journal-time-format \"\" The TODO states carried over can be configured using the org-journal-carryover-items variable on the org layer in .spacemacs org-journal-carryover-items \"TODO=\\\"TODO\\\"|TODO=\\\"DOING\\\"|TODO=\\\"BLOCKED\\\"|TODO=\\\"REVIEW\\\"\" )","title":"Configure org-journal"},{"location":"org-mode/org-mode-tweaks/","text":"Org-mode tweaks \u03bb\ufe0e Here are some simple tweaks to org-mode that you may find useful. Wrapping lines with truncate lines \u03bb\ufe0e The command SPC t l toggles truncate-lines in a buffer, the same as wrap lines in other editors. truncate-lines will wrap at what ever size the buffer\u2026org-mode with truncate lines on. There may be some other minor conflicts If truncate-line is what\u2026 dotspacemacs/user-config section: \u2026 (add-hook 'org-mode-hook (lambda () (setq truncate-lines t))) Any lines that are truncated have a return arrow symbol in the right hand margin of that line as a visual clue that the line has been wrapped.","title":"Org-mode tweaks"},{"location":"org-mode/org-mode-tweaks/#org-mode-tweaks","text":"Here are some simple tweaks to org-mode that you may find useful.","title":"Org-mode tweaks"},{"location":"org-mode/org-mode-tweaks/#wrapping-lines-with-truncate-lines","text":"The command SPC t l toggles truncate-lines in a buffer, the same as wrap lines in other editors. truncate-lines will wrap at what ever size the buffer\u2026org-mode with truncate lines on. There may be some other minor conflicts If truncate-line is what\u2026 dotspacemacs/user-config section: \u2026 (add-hook 'org-mode-hook (lambda () (setq truncate-lines t))) Any lines that are truncated have a return arrow symbol in the right hand margin of that line as a visual clue that the line has been wrapped.","title":"Wrapping lines with truncate lines"},{"location":"org-mode/tables/","text":"Org-mode Tables \u03bb\ufe0e Org comes with a fast and intuitive table editor. Spreadsheet-like calculations are supported using the Emacs calc package (see Calc in GNU Emacs Calculator Manual). This guide covers just the simple tables you can create when documenting your application or service. The Org-mode manual covers tables in more detail, including: * Built-in table editor for simple tables * Column width and alignment, to overrule the automatic settings * Column groups, grouping to trigger vertical lines * Orgtbl mode, table editor as minor mode * Table editor spreadsheet capabilities * Org-Plot, plotting graphs from org tables Hint::Org-mode tables in Markdown \u03bb\ufe0e Org-mode table commands can also be used in Markdown major mode which is very useful for tables of keybindings in your documentation. Edit your .spacemacs configuration file, SPC f e d and add a hook to the dotspacemacs/user-config section. This hook will enable orgtbl-mode minor mode for every buffer using Markdown mode ( add-hook 'markdown-mode-hook 'turn-on-orgtbl )","title":"Org-mode Tables"},{"location":"org-mode/tables/#org-mode-tables","text":"Org comes with a fast and intuitive table editor. Spreadsheet-like calculations are supported using the Emacs calc package (see Calc in GNU Emacs Calculator Manual). This guide covers just the simple tables you can create when documenting your application or service. The Org-mode manual covers tables in more detail, including: * Built-in table editor for simple tables * Column width and alignment, to overrule the automatic settings * Column groups, grouping to trigger vertical lines * Orgtbl mode, table editor as minor mode * Table editor spreadsheet capabilities * Org-Plot, plotting graphs from org tables","title":"Org-mode Tables"},{"location":"org-mode/tables/#hintorg-mode-tables-in-markdown","text":"Org-mode table commands can also be used in Markdown major mode which is very useful for tables of keybindings in your documentation. Edit your .spacemacs configuration file, SPC f e d and add a hook to the dotspacemacs/user-config section. This hook will enable orgtbl-mode minor mode for every buffer using Markdown mode ( add-hook 'markdown-mode-hook 'turn-on-orgtbl )","title":"Hint::Org-mode tables in Markdown"},{"location":"org-mode/todo-states-customise/","text":"Customise your own todo states \u03bb\ufe0e You can also define your own todo states and workflow to support the way you work. TODO::Check if there is a better approach \u03bb\ufe0e You can define todo states per .org file (to investigate). Define states and workflow for all .org files in the .spacemacs file, inside dotspacemacs/user-config as follows ( with-eval-after-load 'org ( setq org-todo-keywords ' (( sequence \"todo\" \"doing\" \"blocked\" \"review\" \"|\" \"done\" \"archived\" )))) Setting colours (faces) for todo states to give clearer view of work \u03bb\ufe0e Setting a different colour for each TODO state makes it easier to see the status at a glance. Using the X11 color names gives colours that are easy to notice but are not to strong. Add the following code to the dotspacemacs\\user-config section of the .spacemacs file: ( with-eval-after-load 'org ( setq org-todo-keyword-faces ' (( \"todo\" . \"SlateGray\" ) ( \"doing\" . \"DarkOrchid\" ) ( \"blocked\" . \"Firebrick\" ) ( \"review\" . \"Teal\" ) ( \"done\" . \"ForestGreen\" ) ( \"archived\" . \"SlateBlue\" )))) HINT::Use simpler names or colour codes \u03bb\ufe0e If the above codes do not work for you, try simpler colour names such as green , blue , yellow . Alternatively, use the specific colour codes, such as #242424 . Automatically log completion date-time \u03bb\ufe0e When a heading status enters DONE , add a closed: property with current date-time stamp ( with-eval-after-load 'org ( setq org-log-done 'time ))","title":"Customise your own todo states"},{"location":"org-mode/todo-states-customise/#customise-your-own-todo-states","text":"You can also define your own todo states and workflow to support the way you work.","title":"Customise your own todo states"},{"location":"org-mode/todo-states-customise/#todocheck-if-there-is-a-better-approach","text":"You can define todo states per .org file (to investigate). Define states and workflow for all .org files in the .spacemacs file, inside dotspacemacs/user-config as follows ( with-eval-after-load 'org ( setq org-todo-keywords ' (( sequence \"todo\" \"doing\" \"blocked\" \"review\" \"|\" \"done\" \"archived\" ))))","title":"TODO::Check if there is a better approach"},{"location":"org-mode/todo-states-customise/#setting-colours-faces-for-todo-states-to-give-clearer-view-of-work","text":"Setting a different colour for each TODO state makes it easier to see the status at a glance. Using the X11 color names gives colours that are easy to notice but are not to strong. Add the following code to the dotspacemacs\\user-config section of the .spacemacs file: ( with-eval-after-load 'org ( setq org-todo-keyword-faces ' (( \"todo\" . \"SlateGray\" ) ( \"doing\" . \"DarkOrchid\" ) ( \"blocked\" . \"Firebrick\" ) ( \"review\" . \"Teal\" ) ( \"done\" . \"ForestGreen\" ) ( \"archived\" . \"SlateBlue\" ))))","title":"Setting colours (faces) for todo states to give clearer view of work"},{"location":"org-mode/todo-states-customise/#hintuse-simpler-names-or-colour-codes","text":"If the above codes do not work for you, try simpler colour names such as green , blue , yellow . Alternatively, use the specific colour codes, such as #242424 .","title":"HINT::Use simpler names or colour codes"},{"location":"org-mode/todo-states-customise/#automatically-log-completion-date-time","text":"When a heading status enters DONE , add a closed: property with current date-time stamp ( with-eval-after-load 'org ( setq org-log-done 'time ))","title":"Automatically log completion date-time"},{"location":"org-mode/todo-states/","text":"Org-mode TODO states \u03bb\ufe0e Show progress by adding TODO states to the headings of an .org document. The default states are TODO DOING and DONE . States can be added to any org document by simply typing them, or using commands to cycle through the states. t calls org-todo which cycles through all the TODO states for the current heading. If the current line is not a heading, the parent heading is updated. , L or S-\ud83e\udc46 ( org-shiftright ) move the current TODO state forward to the next. , H or S-\ud83e\udc44 move to the previous TODO states. Custom TODO States \u03bb\ufe0e A custom set of states can be configured, although it seems useful to keep the defaults and simply add custom states. Practicalli/spacemacs.d includes a simple kanban style of states. The | character denotes closed TODO states. In dotspacemacs/user-config in the .spacemacs file, define states and workflow for all .org files ( with-eval-after-load 'org ( setq org-todo-keywords ' (( sequence \"TODO\" \"DOING\" \"BLOCKED\" \"REVIEW\" \"|\" \"DONE\" \"ARCHIVED\" )))) Use with-eval-after-load as a hook to call this setting when org-mode is first run by Spacemacs. Automatically log completion date-time \u03bb\ufe0e Commands can be triggered when entering a specific TODO state. To add a closed: property with current date-time stamp when the status is DONE . Changing the status will remove the closed property. ( with-eval-after-load 'org ( setq org-log-done 'time )) Custom colors (faces) \u03bb\ufe0e Using colors for the TODO states makes them easier to distinguish, especially in a long list of items. org-todo-keyword-faces is a defcustom function for setting colors for the TODO state faces. Using the X11 color names gives colours that are easy to notice but are not to strong. In dotspacemacs/user-config in the .spacemacs file, add following to configure custom colors ( with-eval-after-load 'org ( setq org-todo-keyword-faces ' (( \"todo\" . \"SlateGray\" ) ( \"doing\" . \"DarkOrchid\" ) ( \"blocked\" . \"Firebrick\" ) ( \"review\" . \"Teal\" ) ( \"done\" . \"ForestGreen\" ) ( \"archived\" . \"SlateBlue\" )))) Hint::Theme faces may over-ride your custom color settings \u03bb\ufe0e SPC h d F will list all the faces used with the current buffer. RET on a face name to find out where it is defined. Use the SPC SPC customize command to explore and change faces","title":"Org-mode TODO states"},{"location":"org-mode/todo-states/#org-mode-todo-states","text":"Show progress by adding TODO states to the headings of an .org document. The default states are TODO DOING and DONE . States can be added to any org document by simply typing them, or using commands to cycle through the states. t calls org-todo which cycles through all the TODO states for the current heading. If the current line is not a heading, the parent heading is updated. , L or S-\ud83e\udc46 ( org-shiftright ) move the current TODO state forward to the next. , H or S-\ud83e\udc44 move to the previous TODO states.","title":"Org-mode TODO states"},{"location":"org-mode/todo-states/#custom-todo-states","text":"A custom set of states can be configured, although it seems useful to keep the defaults and simply add custom states. Practicalli/spacemacs.d includes a simple kanban style of states. The | character denotes closed TODO states. In dotspacemacs/user-config in the .spacemacs file, define states and workflow for all .org files ( with-eval-after-load 'org ( setq org-todo-keywords ' (( sequence \"TODO\" \"DOING\" \"BLOCKED\" \"REVIEW\" \"|\" \"DONE\" \"ARCHIVED\" )))) Use with-eval-after-load as a hook to call this setting when org-mode is first run by Spacemacs.","title":"Custom TODO States"},{"location":"org-mode/todo-states/#automatically-log-completion-date-time","text":"Commands can be triggered when entering a specific TODO state. To add a closed: property with current date-time stamp when the status is DONE . Changing the status will remove the closed property. ( with-eval-after-load 'org ( setq org-log-done 'time ))","title":"Automatically log completion date-time"},{"location":"org-mode/todo-states/#custom-colors-faces","text":"Using colors for the TODO states makes them easier to distinguish, especially in a long list of items. org-todo-keyword-faces is a defcustom function for setting colors for the TODO state faces. Using the X11 color names gives colours that are easy to notice but are not to strong. In dotspacemacs/user-config in the .spacemacs file, add following to configure custom colors ( with-eval-after-load 'org ( setq org-todo-keyword-faces ' (( \"todo\" . \"SlateGray\" ) ( \"doing\" . \"DarkOrchid\" ) ( \"blocked\" . \"Firebrick\" ) ( \"review\" . \"Teal\" ) ( \"done\" . \"ForestGreen\" ) ( \"archived\" . \"SlateBlue\" ))))","title":"Custom colors (faces)"},{"location":"org-mode/todo-states/#hinttheme-faces-may-over-ride-your-custom-color-settings","text":"SPC h d F will list all the faces used with the current buffer. RET on a face name to find out where it is defined. Use the SPC SPC customize command to explore and change faces","title":"Hint::Theme faces may over-ride your custom color settings"},{"location":"org-mode/yasnippets/","text":"Yasnippets for Org-mode \u03bb\ufe0e Snippets provide a way to add common code or text. <ta M-/ adds a two column table snippet with a caption. The cursor is the first tab stop, followed by the first column name, then the second column name. Yasnippets official snippets - org-mode \u03bb\ufe0e The current snippets for org-mode from the yasnippet official snippet collection . Snippet name Key Description author <a Author metadata center <c center block date <da date metadata - year, month, day description desc description metadata dot dot_ Graphviz source block elisp elips_ Emacs lisp source block with tangle emacs-lisp emacs-lisp_ Emacs lisp source block with tangle email <em email metadata embedded emb_ general source block entry entry_ html source block with layout and title exampleblock <e example source block export <ex export source block with type figure fig_ LaTeX figure html <ht html metadata image <im Image with caption img img_ html image tag include <i include metadata ipython ipy_ ipython source block keywords <ke keywords metadata language <lan language metadata link <li org link matrix matrix_ matrix computation options <op options metadata python py_ python source block quote <q quote block rv_background <rsb reveal single colored background rv_image_background <rib reveal image background setup set setup file metadata src <src source code block style <st stylesheet metadata table <ta org table title <ti title metadata uml uml uml source block verse <v verse source block video <vi org link to video file Reference \u03bb\ufe0e Create your own snippets","title":"Yasnippets for Org-mode"},{"location":"org-mode/yasnippets/#yasnippets-for-org-mode","text":"Snippets provide a way to add common code or text. <ta M-/ adds a two column table snippet with a caption. The cursor is the first tab stop, followed by the first column name, then the second column name.","title":"Yasnippets for Org-mode"},{"location":"org-mode/yasnippets/#yasnippets-official-snippets-org-mode","text":"The current snippets for org-mode from the yasnippet official snippet collection . Snippet name Key Description author <a Author metadata center <c center block date <da date metadata - year, month, day description desc description metadata dot dot_ Graphviz source block elisp elips_ Emacs lisp source block with tangle emacs-lisp emacs-lisp_ Emacs lisp source block with tangle email <em email metadata embedded emb_ general source block entry entry_ html source block with layout and title exampleblock <e example source block export <ex export source block with type figure fig_ LaTeX figure html <ht html metadata image <im Image with caption img img_ html image tag include <i include metadata ipython ipy_ ipython source block keywords <ke keywords metadata language <lan language metadata link <li org link matrix matrix_ matrix computation options <op options metadata python py_ python source block quote <q quote block rv_background <rsb reveal single colored background rv_image_background <rib reveal image background setup set setup file metadata src <src source code block style <st stylesheet metadata table <ta org table title <ti title metadata uml uml uml source block verse <v verse source block video <vi org link to video file","title":"Yasnippets official snippets - org-mode"},{"location":"org-mode/yasnippets/#reference","text":"Create your own snippets","title":"Reference"},{"location":"org-mode/literate-programming/","text":"Literate Programming \u03bb\ufe0e Literate programming is a document written in a natural language, interspersed with snippets of code that can be executed and results visualised as text or graphics. It is an interactive document that can update sections of itself from the code that runs inside. In Spacemacs and Clojure development, it means you could write a document explaining your project or library and include code that can execute and give results in the document itself. To encourage contributors to open source project or on-boarding a developer onto a team, a literate programming document that explains how all the important aspects work, including real code examples that they can experiment with, would remove barriers in becoming familiar with a project. Literate programming with Spacemacs \u03bb\ufe0e Emacs has Org-mode with can do amazing things with documents, simply open a file with a .org filename extension. Org-mode includes Babel, which can take code and run it in an Emacs buffer of the correct major-mode for the programming language and automatically return the result back to the org-mode file. Configure Literate Programming with Clojure \u03bb\ufe0e Include the org and clojure layers in the dotspacemacs-layer-configuration of the ~/.spacemacs configuration file. Create a Clojure project \u03bb\ufe0e Literate programming can be used with any working Clojure project, using either a deps.edn configuration or a Leiningen project.clj file. Create a project using either Clojure CLI tools or Leiningen. Dependencies, apart from Clojure, itself are not required. Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/literate lein new app literate Simple example project Clone practicalli/literate-programming-in-clojure project for a simple example project that works. Run a Clojure REPL \u03bb\ufe0e Open the deps.edn , project.clj , or any source code file from the project. , m s and select cider-jack-in-clj to start a REPL. Create an org file with Clojure code blocks \u03bb\ufe0e Create an org file, eg. literate-clojure.org in the root of the Clojure project. Write the text of the document and use , b d to add a code block, selecting clojure as the language. Add :results value after clojure in the code block BEGIN line. In the code block write your clojure code, e.g. (+ 1 2 3) Ctrl + C + Ctrl + c to evaluate the code block at the cursor point. The result is pasted underneath the code block. Clojure Literate programming examples \u03bb\ufe0e Starting with a very basic Clojure expression to test evaluation is working correctly. Using :results silent will not add the result to the .org file. #+begin_src clojure :results silent (+ 1 4) #+end_src Ctrl + C + Ctrl + c with the cursor placed in the code block This should evaluate the Clojure form and echo the results: \"5\" in the mini-buffer. Now insert the results into the org buffer immediately after the Clojure code block #+begin_src clojure :results value [ 1 2 3 4] #+end_src Ctrl + C + Ctrl + c with the cursor placed in the code block The following results block will be inserted immediately following the code block #+RESULTS [ 1 2 3 4] Multiple expressions can be defined. First define a Clojure data structure (hash-map) and then use a keyword as a function to retrieve a specific value from the hash-map. #+begin_src clojure :results value (def small-map {:a 2 :b 4 :c 8}) (:b small-map) #+end_src #+RESULTS: : 4 Make a Graph of the results Using the Clojure Incanter library to create a line plot graph using the Incanter xy-plot function. The Incanter library should first be added to the Clojure project as a dependency. Clojure CLI Leiningen Add Incanter to the :deps key of the deps.edn file { :paths [ \"src\" \"resources\" ] :deps { org.clojure/clojure { :mvn/version \"1.10.3\" } incanter/incanter { :mvn/version \"1.9.3\" }}} Add Incanter to the :dependencies key of the project.clj file ( defproject clojure-literate-programming \"0.1.0\" :description \"Literate Programming with Incanter\" :license { :name \"Creative Commons Attribution Share-Alike 4.0 International\" :url \"https://creativecommons.org/\" } :dependencies [[ org.clojure/clojure \"1.10.3\" ] [ incanter \"1.9.3\" ]]) Use the Incanter library to create an x-y line plot. The view function displays the line plot. The plot is also saved to both PDF and PNG format image files. #+begin_src clojure (use '(incanter core charts pdf)) ;;; Create the x and y data: (def x-data [0.0 1.0 2.0 3.0 4.0 5.0]) (def y-data [2.3 9.0 2.6 3.1 8.1 4.5]) (def xy-line (xy-plot x-data y-data)) (view xy-line) (save-pdf xy-line \"incanter-xy-line.pdf\") (save xy-line \"incanter-xy-line.png\") #+end_src Insert the image into the exported PDF document: #+CAPTION: A basic x-y line plot #+NAME: fig:xy-line [[./incanter-xy-line.pdf]] Files are saved to the root of the Clojure project. Export to LaTeX or HTML \u03bb\ufe0e Ctrl + C + Ctrl + e l l to export to LaTeX. Ctrl + C + Ctrl + e h h to export to HTML. The exported HTML code will hyperlink the PDF file. To embed the image in the HTML, switch to the PNG image file. The exported LaTeX (.tex) file will embed either the PDF or PNG file. Graphical quality will be superior with the PDF file. Session Evaluation \u03bb\ufe0e Use the :session option to run all Clojure code in the same REPL process Without :session each individual code block will execute by starting a Clojure REPL process. Due to the start-up time of a Java virtual machine, this can make execution of many blocks slow. Sessions changed in Org 9 The :session option may not be required in Org version 9. Testing is required. Specify a namespace \u03bb\ufe0e Each code block will execute in the default user namespace, unless changed via CIDER nREPL connection. A namespace can be specified in a code block using the Clojure ns function. #+begin_src clojure :results pp (ns practicalli.greet) (def hello \"Hello Practicalli, this is the greet namespace\") #+end_src #+RESULTS: : #'practically.greet/hello Following code blocks in the .org file will continue to use the specified namespace. #+begin_src clojure :results value :ns kk2 *ns* #+end_src #+RESULTS: : #'practicalli.greet/hello References \u03bb\ufe0e Incanter examples","title":"Literate Programming"},{"location":"org-mode/literate-programming/#literate-programming","text":"Literate programming is a document written in a natural language, interspersed with snippets of code that can be executed and results visualised as text or graphics. It is an interactive document that can update sections of itself from the code that runs inside. In Spacemacs and Clojure development, it means you could write a document explaining your project or library and include code that can execute and give results in the document itself. To encourage contributors to open source project or on-boarding a developer onto a team, a literate programming document that explains how all the important aspects work, including real code examples that they can experiment with, would remove barriers in becoming familiar with a project.","title":"Literate Programming"},{"location":"org-mode/literate-programming/#literate-programming-with-spacemacs","text":"Emacs has Org-mode with can do amazing things with documents, simply open a file with a .org filename extension. Org-mode includes Babel, which can take code and run it in an Emacs buffer of the correct major-mode for the programming language and automatically return the result back to the org-mode file.","title":"Literate programming with Spacemacs"},{"location":"org-mode/literate-programming/#configure-literate-programming-with-clojure","text":"Include the org and clojure layers in the dotspacemacs-layer-configuration of the ~/.spacemacs configuration file.","title":"Configure Literate Programming with Clojure"},{"location":"org-mode/literate-programming/#create-a-clojure-project","text":"Literate programming can be used with any working Clojure project, using either a deps.edn configuration or a Leiningen project.clj file. Create a project using either Clojure CLI tools or Leiningen. Dependencies, apart from Clojure, itself are not required. Clojure CLI Leiningen clojure -T:project/new :template app :name practicalli/literate lein new app literate Simple example project Clone practicalli/literate-programming-in-clojure project for a simple example project that works.","title":"Create a Clojure project"},{"location":"org-mode/literate-programming/#run-a-clojure-repl","text":"Open the deps.edn , project.clj , or any source code file from the project. , m s and select cider-jack-in-clj to start a REPL.","title":"Run a Clojure REPL"},{"location":"org-mode/literate-programming/#create-an-org-file-with-clojure-code-blocks","text":"Create an org file, eg. literate-clojure.org in the root of the Clojure project. Write the text of the document and use , b d to add a code block, selecting clojure as the language. Add :results value after clojure in the code block BEGIN line. In the code block write your clojure code, e.g. (+ 1 2 3) Ctrl + C + Ctrl + c to evaluate the code block at the cursor point. The result is pasted underneath the code block.","title":"Create an org file with Clojure code blocks"},{"location":"org-mode/literate-programming/#clojure-literate-programming-examples","text":"Starting with a very basic Clojure expression to test evaluation is working correctly. Using :results silent will not add the result to the .org file. #+begin_src clojure :results silent (+ 1 4) #+end_src Ctrl + C + Ctrl + c with the cursor placed in the code block This should evaluate the Clojure form and echo the results: \"5\" in the mini-buffer. Now insert the results into the org buffer immediately after the Clojure code block #+begin_src clojure :results value [ 1 2 3 4] #+end_src Ctrl + C + Ctrl + c with the cursor placed in the code block The following results block will be inserted immediately following the code block #+RESULTS [ 1 2 3 4] Multiple expressions can be defined. First define a Clojure data structure (hash-map) and then use a keyword as a function to retrieve a specific value from the hash-map. #+begin_src clojure :results value (def small-map {:a 2 :b 4 :c 8}) (:b small-map) #+end_src #+RESULTS: : 4 Make a Graph of the results Using the Clojure Incanter library to create a line plot graph using the Incanter xy-plot function. The Incanter library should first be added to the Clojure project as a dependency. Clojure CLI Leiningen Add Incanter to the :deps key of the deps.edn file { :paths [ \"src\" \"resources\" ] :deps { org.clojure/clojure { :mvn/version \"1.10.3\" } incanter/incanter { :mvn/version \"1.9.3\" }}} Add Incanter to the :dependencies key of the project.clj file ( defproject clojure-literate-programming \"0.1.0\" :description \"Literate Programming with Incanter\" :license { :name \"Creative Commons Attribution Share-Alike 4.0 International\" :url \"https://creativecommons.org/\" } :dependencies [[ org.clojure/clojure \"1.10.3\" ] [ incanter \"1.9.3\" ]]) Use the Incanter library to create an x-y line plot. The view function displays the line plot. The plot is also saved to both PDF and PNG format image files. #+begin_src clojure (use '(incanter core charts pdf)) ;;; Create the x and y data: (def x-data [0.0 1.0 2.0 3.0 4.0 5.0]) (def y-data [2.3 9.0 2.6 3.1 8.1 4.5]) (def xy-line (xy-plot x-data y-data)) (view xy-line) (save-pdf xy-line \"incanter-xy-line.pdf\") (save xy-line \"incanter-xy-line.png\") #+end_src Insert the image into the exported PDF document: #+CAPTION: A basic x-y line plot #+NAME: fig:xy-line [[./incanter-xy-line.pdf]] Files are saved to the root of the Clojure project.","title":"Clojure Literate programming examples"},{"location":"org-mode/literate-programming/#export-to-latex-or-html","text":"Ctrl + C + Ctrl + e l l to export to LaTeX. Ctrl + C + Ctrl + e h h to export to HTML. The exported HTML code will hyperlink the PDF file. To embed the image in the HTML, switch to the PNG image file. The exported LaTeX (.tex) file will embed either the PDF or PNG file. Graphical quality will be superior with the PDF file.","title":"Export to LaTeX or HTML"},{"location":"org-mode/literate-programming/#session-evaluation","text":"Use the :session option to run all Clojure code in the same REPL process Without :session each individual code block will execute by starting a Clojure REPL process. Due to the start-up time of a Java virtual machine, this can make execution of many blocks slow. Sessions changed in Org 9 The :session option may not be required in Org version 9. Testing is required.","title":"Session Evaluation"},{"location":"org-mode/literate-programming/#specify-a-namespace","text":"Each code block will execute in the default user namespace, unless changed via CIDER nREPL connection. A namespace can be specified in a code block using the Clojure ns function. #+begin_src clojure :results pp (ns practicalli.greet) (def hello \"Hello Practicalli, this is the greet namespace\") #+end_src #+RESULTS: : #'practically.greet/hello Following code blocks in the .org file will continue to use the specified namespace. #+begin_src clojure :results value :ns kk2 *ns* #+end_src #+RESULTS: : #'practicalli.greet/hello","title":"Specify a namespace"},{"location":"org-mode/literate-programming/#references","text":"Incanter examples","title":"References"},{"location":"os-specific-config/macosx/","text":"MacOSX Specific configuration \u03bb\ufe0e MacOSX Layer \u03bb\ufe0e The OSX layer globally defines common macOS key bindings. * \u2318 is set to hyper and \u2325 is set to meta * In dired use gls instead of ls * Fix separator colors of Spaceline mode-line Disable touchpad zoom gestures \u03bb\ufe0e The touchpad on a Mac included gestures to zoom the font. If you find the touchpad gestures unwanted, they can be disabled by setting their key binding to nil . ( define-key global-map ( kbd \"<magnify-up>\" ) nil ) ( define-key global-map ( kbd \"<magnify-down>\" ) nil ) Another approach would be to call a dummy function or a function that has some conditional. In this case define a function to that carries out the function required. Then bind that function to the key bindings for the touchpad gesture. ( defun practicalli-nothing () ( interactive ) ( message \"Buttons are not toys\" ) ) ( define-key global-map ( kbd \"<magnify-up>\" ) 'practicalli-nothing ) ( define-key global-map ( kbd \"<magnify-down>\" ) 'practicalli-nothing )","title":"MacOSX Specific configuration"},{"location":"os-specific-config/macosx/#macosx-specific-configuration","text":"","title":"MacOSX Specific configuration"},{"location":"os-specific-config/macosx/#macosx-layer","text":"The OSX layer globally defines common macOS key bindings. * \u2318 is set to hyper and \u2325 is set to meta * In dired use gls instead of ls * Fix separator colors of Spaceline mode-line","title":"MacOSX Layer"},{"location":"os-specific-config/macosx/#disable-touchpad-zoom-gestures","text":"The touchpad on a Mac included gestures to zoom the font. If you find the touchpad gestures unwanted, they can be disabled by setting their key binding to nil . ( define-key global-map ( kbd \"<magnify-up>\" ) nil ) ( define-key global-map ( kbd \"<magnify-down>\" ) nil ) Another approach would be to call a dummy function or a function that has some conditional. In this case define a function to that carries out the function required. Then bind that function to the key bindings for the touchpad gesture. ( defun practicalli-nothing () ( interactive ) ( message \"Buttons are not toys\" ) ) ( define-key global-map ( kbd \"<magnify-up>\" ) 'practicalli-nothing ) ( define-key global-map ( kbd \"<magnify-down>\" ) 'practicalli-nothing )","title":"Disable touchpad zoom gestures"},{"location":"refactor/","text":"Refactor Clojure Code \u03bb\ufe0e General refactor steps such as changing function names can be done with the Evil tools , iedit , narrowing and helm-ag . These do not require a running Clojure REPL. Examples of refactoring names: within a function , within a namespace , within a project . Structural editing via the SPC k lisp state uses smartparens to alter the your code whist respecting the structure, as defined by parens, [ ] { } ( ) and even \" \" . Smartparens works for all languages, although is most useful with lisp syntax. Refactor Approach Usage narrowing refactor in function on region (usually with iedit) iedit refactor in current namespace helm-ag project wide refactor (usually with iedit) lisp state A state for smartparens structural editing clojure-mode and clj-refactor , r for clojure specific refactor commands Clojure REPL based refactoring \u03bb\ufe0e Clojure specific refactor commands are in the clojure mode refactor menu, , r provided by the package clj-refactor . These refactor commands typically require a running Clojure REPL Use , e u () cider-undef when changing a name of a var ( def , defn ) to keep the REPL clean of stale names. Or if","title":"Refactor Clojure Code"},{"location":"refactor/#refactor-clojure-code","text":"General refactor steps such as changing function names can be done with the Evil tools , iedit , narrowing and helm-ag . These do not require a running Clojure REPL. Examples of refactoring names: within a function , within a namespace , within a project . Structural editing via the SPC k lisp state uses smartparens to alter the your code whist respecting the structure, as defined by parens, [ ] { } ( ) and even \" \" . Smartparens works for all languages, although is most useful with lisp syntax. Refactor Approach Usage narrowing refactor in function on region (usually with iedit) iedit refactor in current namespace helm-ag project wide refactor (usually with iedit) lisp state A state for smartparens structural editing clojure-mode and clj-refactor , r for clojure specific refactor commands","title":"Refactor Clojure Code"},{"location":"refactor/#clojure-repl-based-refactoring","text":"Clojure specific refactor commands are in the clojure mode refactor menu, , r provided by the package clj-refactor . These refactor commands typically require a running Clojure REPL Use , e u () cider-undef when changing a name of a var ( def , defn ) to keep the REPL clean of stale names. Or if","title":"Clojure REPL based refactoring"},{"location":"refactor/clojure-lsp/","text":"Refactor Code with Clojure LSP \u03bb\ufe0e The majority of refactor tools from Clojure LSP are code actions, providing context specific tools that are only available when relevant. Renaming \u03bb\ufe0e Symbols such as namespace names, function definitions, names bound to values and keywords can be renamed across a whole project , r r to rename symbol at point Code Actions \u03bb\ufe0e , a a opens the LSP code actions menu to provide context specific refactor tools lsp-ui sidebar shows available code actions when the following variables are added to the lsp layer in the .spacemacs layer configuration: lsp-ui-sideline-enable t lsp-ui-sideline-show-code-actions t Clojure LSP features includes examples of code actions . Converting Parens \u03bb\ufe0e Convert between literal hash-map {} , vector [] , set #{} and list () forms Add library namespace to current namespace \u03bb\ufe0e Add the suggested library to the ns namespace definition using a require form with an alias Add import form for known Java methods and classes Move to let binding \u03bb\ufe0e Move an expression to be a value of a new local name in an existing let form Move a value to a new local name in an existing let binding (inline symbol) Extract expression to new function \u03bb\ufe0e Create a new public function definition with the expression at point the body of that new function. Replace the expression at point with a call to the new function with arguments extracted from the expression at point where relevant. Convert to thread macro \u03bb\ufe0e Convert (nested) expression to a thread first or thread last form Convert function definition to private \u03bb\ufe0e Toggle function form \u03bb\ufe0e Toggle between short and normal forms of a function definition Re-order data structures \u03bb\ufe0e Move elements of a data structure using lsp-clojure-coll-move-entry-up and lsp-clojure-coll-move-entry-up , which have no key binding in Spacemacs by default (Doom Emacs uses Meta up/down arrow keys) WARNING: does not seem to work and does not show as a code action","title":"Refactor Code with Clojure LSP"},{"location":"refactor/clojure-lsp/#refactor-code-with-clojure-lsp","text":"The majority of refactor tools from Clojure LSP are code actions, providing context specific tools that are only available when relevant.","title":"Refactor Code with Clojure LSP"},{"location":"refactor/clojure-lsp/#renaming","text":"Symbols such as namespace names, function definitions, names bound to values and keywords can be renamed across a whole project , r r to rename symbol at point","title":"Renaming"},{"location":"refactor/clojure-lsp/#code-actions","text":", a a opens the LSP code actions menu to provide context specific refactor tools lsp-ui sidebar shows available code actions when the following variables are added to the lsp layer in the .spacemacs layer configuration: lsp-ui-sideline-enable t lsp-ui-sideline-show-code-actions t Clojure LSP features includes examples of code actions .","title":"Code Actions"},{"location":"refactor/clojure-lsp/#converting-parens","text":"Convert between literal hash-map {} , vector [] , set #{} and list () forms","title":"Converting Parens"},{"location":"refactor/clojure-lsp/#add-library-namespace-to-current-namespace","text":"Add the suggested library to the ns namespace definition using a require form with an alias Add import form for known Java methods and classes","title":"Add library namespace to current namespace"},{"location":"refactor/clojure-lsp/#move-to-let-binding","text":"Move an expression to be a value of a new local name in an existing let form Move a value to a new local name in an existing let binding (inline symbol)","title":"Move to let binding"},{"location":"refactor/clojure-lsp/#extract-expression-to-new-function","text":"Create a new public function definition with the expression at point the body of that new function. Replace the expression at point with a call to the new function with arguments extracted from the expression at point where relevant.","title":"Extract expression to new function"},{"location":"refactor/clojure-lsp/#convert-to-thread-macro","text":"Convert (nested) expression to a thread first or thread last form","title":"Convert to thread macro"},{"location":"refactor/clojure-lsp/#convert-function-definition-to-private","text":"","title":"Convert function definition to private"},{"location":"refactor/clojure-lsp/#toggle-function-form","text":"Toggle between short and normal forms of a function definition","title":"Toggle function form"},{"location":"refactor/clojure-lsp/#re-order-data-structures","text":"Move elements of a data structure using lsp-clojure-coll-move-entry-up and lsp-clojure-coll-move-entry-up , which have no key binding in Spacemacs by default (Doom Emacs uses Meta up/down arrow keys) WARNING: does not seem to work and does not show as a code action","title":"Re-order data structures"},{"location":"refactor/namespace-definitions/","text":"Refactor ns namespace definitions \u03bb\ufe0e Refactor ns forms using clojure-mode , meaning these refactor commands work even when the REPL is not running. Hint::Pull request to be merged \u03bb\ufe0e Defined in pull request 13755 so will only be available once this PR is merged. Keybinding Command Description SPC m r a n clojure-insert-ns-form Add current namespace (from file name) to top of buffer SPC m r a N clojure-insert-ns-form-at-point Add current namespace (from file name) at point SPC m r s n clojure-sort-ns Sort namespaces inside an ns form (e.g. required namespaces) clj-refactor contains commands to add require forms to the ns form . Adding a namespace \u03bb\ufe0e , r a n will add a namespace definition to the top of the buffer, useful when creating a new Clojure/Script file. The namespace is taken from the file name, using kebab case for separate names. , r a N is useful if a comment block is used at the start of source code files or if you want to control the placement of the namespace definition. Hint::Updating a namespace \u03bb\ufe0e clojure-update-ns has an outstanding bug , so its not possible to update the name of an existing namespace. One option is to use , r N to add a new namespace at point and cut/paste the name over the original namespace name. Sorting namespaces within an ns form \u03bb\ufe0e , r s n alphabetically sorts the required namespace names within an ns form. Organizing by purpose \u03bb\ufe0e When there are more than a few required namespaces, it can be valuable to group namespaces by their purpose rather than alphabetically.","title":"Refactor `ns` namespace definitions"},{"location":"refactor/namespace-definitions/#refactor-ns-namespace-definitions","text":"Refactor ns forms using clojure-mode , meaning these refactor commands work even when the REPL is not running.","title":"Refactor ns namespace definitions"},{"location":"refactor/namespace-definitions/#hintpull-request-to-be-merged","text":"Defined in pull request 13755 so will only be available once this PR is merged. Keybinding Command Description SPC m r a n clojure-insert-ns-form Add current namespace (from file name) to top of buffer SPC m r a N clojure-insert-ns-form-at-point Add current namespace (from file name) at point SPC m r s n clojure-sort-ns Sort namespaces inside an ns form (e.g. required namespaces) clj-refactor contains commands to add require forms to the ns form .","title":"Hint::Pull request to be merged"},{"location":"refactor/namespace-definitions/#adding-a-namespace","text":", r a n will add a namespace definition to the top of the buffer, useful when creating a new Clojure/Script file. The namespace is taken from the file name, using kebab case for separate names. , r a N is useful if a comment block is used at the start of source code files or if you want to control the placement of the namespace definition.","title":"Adding a namespace"},{"location":"refactor/namespace-definitions/#hintupdating-a-namespace","text":"clojure-update-ns has an outstanding bug , so its not possible to update the name of an existing namespace. One option is to use , r N to add a new namespace at point and cut/paste the name over the original namespace name.","title":"Hint::Updating a namespace"},{"location":"refactor/namespace-definitions/#sorting-namespaces-within-an-ns-form","text":", r s n alphabetically sorts the required namespace names within an ns form.","title":"Sorting namespaces within an ns form"},{"location":"refactor/namespace-definitions/#organizing-by-purpose","text":"When there are more than a few required namespaces, it can be valuable to group namespaces by their purpose rather than alphabetically.","title":"Organizing by purpose"},{"location":"refactor/similar-function-call-name/","text":"Refactor similar function call \u03bb\ufe0e TAB allows you to quickly change the name of a function call to one that is similar. For example, if you have used a call to reduce instead of reductions or other similarly named functions, pressing TAB with the cursor on reduce will display a popup listing alternative functions","title":"Refactor similar function call"},{"location":"refactor/similar-function-call-name/#refactor-similar-function-call","text":"TAB allows you to quickly change the name of a function call to one that is similar. For example, if you have used a call to reduce instead of reductions or other similarly named functions, pressing TAB with the cursor on reduce will display a popup listing alternative functions","title":"Refactor similar function call"},{"location":"refactor/within-a-function/","text":"Refactor within a function \u03bb\ufe0e The symbol highlight transient state and iedit tools can be used to make concurrent changes to multiple instances of the same piece of text, eg. a function name, a local let binding name, a def name, etc. We can use narrowing to just make changes within in a function or any selected region of text Move the cursor to the function you wish to refactor SPC n f to narrow to that function. The buffer updates and only shows the text of that function, preventing changes happening elsewhere in the code. * or # to select a function name using the symbol highlight transient state on the current text under the cursor. This highlights all instances of that function name in the namespace. e starts iedit state, turning the cursor red. Make the changes to the highlighted text and all instances of that text will change. You can use Normal and Insert mode editing commands within iedit. ESC or fd to leave iedit mode (twice if you are in Evil Insert). SPC n w to return to the full view of the buffer. TODO::Add video \u03bb\ufe0e Hint::Narrowing a region of text \u03bb\ufe0e You can select a range to narrow to using v for the visual select mode. Then use SPC n r to narrow to just the selected text for editing. SPC n w to return to the full view of the buffer.","title":"Refactor within a function"},{"location":"refactor/within-a-function/#refactor-within-a-function","text":"The symbol highlight transient state and iedit tools can be used to make concurrent changes to multiple instances of the same piece of text, eg. a function name, a local let binding name, a def name, etc. We can use narrowing to just make changes within in a function or any selected region of text Move the cursor to the function you wish to refactor SPC n f to narrow to that function. The buffer updates and only shows the text of that function, preventing changes happening elsewhere in the code. * or # to select a function name using the symbol highlight transient state on the current text under the cursor. This highlights all instances of that function name in the namespace. e starts iedit state, turning the cursor red. Make the changes to the highlighted text and all instances of that text will change. You can use Normal and Insert mode editing commands within iedit. ESC or fd to leave iedit mode (twice if you are in Evil Insert). SPC n w to return to the full view of the buffer.","title":"Refactor within a function"},{"location":"refactor/within-a-function/#todoadd-video","text":"","title":"TODO::Add video"},{"location":"refactor/within-a-function/#hintnarrowing-a-region-of-text","text":"You can select a range to narrow to using v for the visual select mode. Then use SPC n r to narrow to just the selected text for editing. SPC n w to return to the full view of the buffer.","title":"Hint::Narrowing a region of text"},{"location":"refactor/within-a-namespace/","text":"Refactor within a namespace \u03bb\ufe0e The symbol highlight transient state and iedit tools can be used to make concurrent changes to multiple instances of the same piece of text, eg. a function name, a local let binding name, a def name, etc. You can also use / to search for matched to particular text pattern Changes a symbol or name \u03bb\ufe0e * or # to open symbol highlight transient state on the current text under the cursor. This highlights all instances of that text in the namespace. e starts iedit state, turning the cursor red. Make the changes to the highlighted text and all instances of that text will change. You can use Normal and Insert mode editing commands within iedit. ESC or fd to leave iedit mode (from Evil normal mode, so if you are in Insert mode you will need to do this twice). TODO::Add video \u03bb\ufe0e Changes any text using search \u03bb\ufe0e / to open the buffer search and type in the text pattern you are looking to find. RET to confirm you have finished entering the text pattern (hopefully you found what you are looking for). SPC s e starts iedit state, turning the cursor red. Make the changes to the highlighted text and all instances of that text will change. You can use Normal and Insert mode editing commands within iedit. ESC or fd to leave iedit mode (from Evil normal mode, so if you are in Insert mode you will need to do this twice). TODO::Add video \u03bb\ufe0e Hint::Edit just a function or text region \u03bb\ufe0e Use narrowing before selecting / searching to be more selective in what text is show and therefore highlighted and changed. E.g. if you just want to change a specific function . Alternatives - multiple cursors \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Any feedback on using multiple cursors is most welcome.","title":"Refactor within a namespace"},{"location":"refactor/within-a-namespace/#refactor-within-a-namespace","text":"The symbol highlight transient state and iedit tools can be used to make concurrent changes to multiple instances of the same piece of text, eg. a function name, a local let binding name, a def name, etc. You can also use / to search for matched to particular text pattern","title":"Refactor within a namespace"},{"location":"refactor/within-a-namespace/#changes-a-symbol-or-name","text":"* or # to open symbol highlight transient state on the current text under the cursor. This highlights all instances of that text in the namespace. e starts iedit state, turning the cursor red. Make the changes to the highlighted text and all instances of that text will change. You can use Normal and Insert mode editing commands within iedit. ESC or fd to leave iedit mode (from Evil normal mode, so if you are in Insert mode you will need to do this twice).","title":"Changes a symbol or name"},{"location":"refactor/within-a-namespace/#todoadd-video","text":"","title":"TODO::Add video"},{"location":"refactor/within-a-namespace/#changes-any-text-using-search","text":"/ to open the buffer search and type in the text pattern you are looking to find. RET to confirm you have finished entering the text pattern (hopefully you found what you are looking for). SPC s e starts iedit state, turning the cursor red. Make the changes to the highlighted text and all instances of that text will change. You can use Normal and Insert mode editing commands within iedit. ESC or fd to leave iedit mode (from Evil normal mode, so if you are in Insert mode you will need to do this twice).","title":"Changes any text using search"},{"location":"refactor/within-a-namespace/#todoadd-video_1","text":"","title":"TODO::Add video"},{"location":"refactor/within-a-namespace/#hintedit-just-a-function-or-text-region","text":"Use narrowing before selecting / searching to be more selective in what text is show and therefore highlighted and changed. E.g. if you just want to change a specific function .","title":"Hint::Edit just a function or text region"},{"location":"refactor/within-a-namespace/#alternatives-multiple-cursors","text":"","title":"Alternatives - multiple cursors"},{"location":"refactor/within-a-namespace/#todowork-in-progress-sorry","text":"Any feedback on using multiple cursors is most welcome.","title":"TODO::work in progress, sorry"},{"location":"refactor/within-a-project/","text":"Refactor within a project \u03bb\ufe0e SPC s p ( helm-swoop ) searches the text of all project files, displaying the results in a helm popup. C-c C-e opens the search results in a buffer for editing. Changes in this buffer can be applied back to the relevant files in the project. # or * on a function name (or any text) will select all instances, opening the transient buffer menu. e starts iedit, placing a cursor on each instance to make multiple simultaneous changes. Multiple cursors or the usual editing commands can also be used to make changes. C-c C-c to commit the changes and update all the relevant files in the project. C-c C-k to changes and keep the project files as they were. TODO::Add video \u03bb\ufe0e Hint:: Clojure refactor - rename symbol \u03bb\ufe0e , r r s will rename all occurrences of the symbol at point using clj-refactor rename symbol . This requires a running REPL and for all the project code to compile without error.","title":"Refactor within a project"},{"location":"refactor/within-a-project/#refactor-within-a-project","text":"SPC s p ( helm-swoop ) searches the text of all project files, displaying the results in a helm popup. C-c C-e opens the search results in a buffer for editing. Changes in this buffer can be applied back to the relevant files in the project. # or * on a function name (or any text) will select all instances, opening the transient buffer menu. e starts iedit, placing a cursor on each instance to make multiple simultaneous changes. Multiple cursors or the usual editing commands can also be used to make changes. C-c C-c to commit the changes and update all the relevant files in the project. C-c C-k to changes and keep the project files as they were.","title":"Refactor within a project"},{"location":"refactor/within-a-project/#todoadd-video","text":"","title":"TODO::Add video"},{"location":"refactor/within-a-project/#hint-clojure-refactor-rename-symbol","text":", r r s will rename all occurrences of the symbol at point using clj-refactor rename symbol . This requires a running REPL and for all the project code to compile without error.","title":"Hint:: Clojure refactor - rename symbol"},{"location":"refactor/clj-refactor/","text":"clj-refactor - additional refactor commands \u03bb\ufe0e clj-refactor is an optional package in the Spacemacs Clojure layer that provides additional refactor commands . These commands typically require a running REPL to work. This section covers the more commonly used refactor commands. Enable clj-refactor \u03bb\ufe0e Enable using the clojure-enable-clj-refactor variable in your .spacemacs layer configuration ( clojure :variables clojure-enable-clj-refactor t ) SPC q r to restart Spacemacs which will download and install clj-refactor. Or use SPC f e R to reload the Spacemacs configuration which should also download and install clj-refactor.","title":"clj-refactor - additional refactor commands"},{"location":"refactor/clj-refactor/#clj-refactor-additional-refactor-commands","text":"clj-refactor is an optional package in the Spacemacs Clojure layer that provides additional refactor commands . These commands typically require a running REPL to work. This section covers the more commonly used refactor commands.","title":"clj-refactor - additional refactor commands"},{"location":"refactor/clj-refactor/#enable-clj-refactor","text":"Enable using the clojure-enable-clj-refactor variable in your .spacemacs layer configuration ( clojure :variables clojure-enable-clj-refactor t ) SPC q r to restart Spacemacs which will download and install clj-refactor. Or use SPC f e R to reload the Spacemacs configuration which should also download and install clj-refactor.","title":"Enable clj-refactor"},{"location":"refactor/clj-refactor/collections/","text":"Convert between collection types \u03bb\ufe0e Quickly convert an existing collection (list, map, vector, set) to a different collection type without breaking the structure of that collection (i.e without loosing the closing character) Place the cursor on the opening character of the collection ( { [ # and use one of the following commands Spacemacs Normal Emacs Command Description SPC m r c [ , r c [ C-c C-r [ clojure-convert-to-vector convert to vector SPC m r c { , r c { C-c C-r { clojure-convert-to-map convert to map SPC m r c # , r c # C-c C-r # clojure-convert-to-set convert to set SPC m r c ( , r c ( C-c C-r ( clojure-convert-to-list convert to list SPC m r c ' , r c ' C-c C-r ' clojure-convert-to-quoted-list convert to quoted list Hint::Syntax not checked during refactor \u03bb\ufe0e Collections are converted regardless of whether the resulting collection is of the correct structure. For example, converting to a map does not check for balanced key-value pairs. Neither does converting to a set check for unique values. These commands replace the previous cycle collection command from earlier versions of clj-refactor.","title":"Convert between collection types"},{"location":"refactor/clj-refactor/collections/#convert-between-collection-types","text":"Quickly convert an existing collection (list, map, vector, set) to a different collection type without breaking the structure of that collection (i.e without loosing the closing character) Place the cursor on the opening character of the collection ( { [ # and use one of the following commands Spacemacs Normal Emacs Command Description SPC m r c [ , r c [ C-c C-r [ clojure-convert-to-vector convert to vector SPC m r c { , r c { C-c C-r { clojure-convert-to-map convert to map SPC m r c # , r c # C-c C-r # clojure-convert-to-set convert to set SPC m r c ( , r c ( C-c C-r ( clojure-convert-to-list convert to list SPC m r c ' , r c ' C-c C-r ' clojure-convert-to-quoted-list convert to quoted list","title":"Convert between collection types"},{"location":"refactor/clj-refactor/collections/#hintsyntax-not-checked-during-refactor","text":"Collections are converted regardless of whether the resulting collection is of the correct structure. For example, converting to a map does not check for balanced key-value pairs. Neither does converting to a set check for unique values. These commands replace the previous cycle collection command from earlier versions of clj-refactor.","title":"Hint::Syntax not checked during refactor"},{"location":"refactor/clj-refactor/extracting/","text":"Extracting or Expanding \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Extract anonymous functions \u03bb\ufe0e , r e If you have code that contains an inline function, like (fn []) or #() you can use to quickly create a named function. This new named function is replaces by a call to this function from the original location. (reverse (reduce (fn [x y] (if (even? y) (conj x y) x)) (list) (range 10))) Hint::Extracting requires working code \u03bb\ufe0e The extraction command will compile your code and review the AST produced, in order to make the extraction (this seems a bit overkill). So if your code does not compile, you cannot use this command.","title":"Extracting or Expanding"},{"location":"refactor/clj-refactor/extracting/#extracting-or-expanding","text":"","title":"Extracting or Expanding"},{"location":"refactor/clj-refactor/extracting/#todowork-in-progress-sorry","text":"","title":"TODO::work in progress, sorry"},{"location":"refactor/clj-refactor/extracting/#extract-anonymous-functions","text":", r e If you have code that contains an inline function, like (fn []) or #() you can use to quickly create a named function. This new named function is replaces by a call to this function from the original location. (reverse (reduce (fn [x y] (if (even? y) (conj x y) x)) (list) (range 10)))","title":"Extract anonymous functions"},{"location":"refactor/clj-refactor/extracting/#hintextracting-requires-working-code","text":"The extraction command will compile your code and review the AST produced, in order to make the extraction (this seems a bit overkill). So if your code does not compile, you cannot use this command.","title":"Hint::Extracting requires working code"},{"location":"refactor/clj-refactor/forms/","text":"Forms \u03bb\ufe0e","title":"Forms"},{"location":"refactor/clj-refactor/forms/#forms","text":"","title":"Forms"},{"location":"refactor/clj-refactor/managing-library-dependencies/","text":"Managing Library Dependencies - Leiningen only \u03bb\ufe0e Hint::Restart the REPL when adding new libraries \u03bb\ufe0e The following techniques may work for specific projects, although hot-loading libraries into a running REPL has been problematic. Hot loading has been disabled in some versions of Cider due to bugs. Update project dependencies using clj-refactor on your project.clj configuration file. ap - Add a project dependency (library) - required REPL restart up - Update the project dependency versions sp - Sort project dependencies If you are adding libraries as dependencies then you may wish to refactor the relevant namespace , as shown in the next section. ap Add project dependency \u03bb\ufe0e , r a p to search a library and add a specific version of that library to your project dependencies, without having to browse clojars.org separately. A selected library version is added to the dependency vector of the Leiningen project.clj file. When this function is called with a prefix, C-u , the artifact cache is refreshed synchronously. up Update project dependency versions \u03bb\ufe0e , r u p to update the version for each library in your Leiningen dependency configuration. Alternatively you can use lein-ancient plugin to update dependencies in your project. Hint::deps.edn projects \u03bb\ufe0e practicalli/clojure-deps-edn contains an :update alias that uses depot to update deps.edn projects sp Sort project dependencies \u03bb\ufe0e , r s p in the project.clj buffer to alphabetically sort the library names in the project :dependencies configuration.","title":"Managing Library Dependencies - Leiningen only"},{"location":"refactor/clj-refactor/managing-library-dependencies/#managing-library-dependencies-leiningen-only","text":"","title":"Managing Library Dependencies - Leiningen only"},{"location":"refactor/clj-refactor/managing-library-dependencies/#hintrestart-the-repl-when-adding-new-libraries","text":"The following techniques may work for specific projects, although hot-loading libraries into a running REPL has been problematic. Hot loading has been disabled in some versions of Cider due to bugs. Update project dependencies using clj-refactor on your project.clj configuration file. ap - Add a project dependency (library) - required REPL restart up - Update the project dependency versions sp - Sort project dependencies If you are adding libraries as dependencies then you may wish to refactor the relevant namespace , as shown in the next section.","title":"Hint::Restart the REPL when adding new libraries"},{"location":"refactor/clj-refactor/managing-library-dependencies/#ap-add-project-dependency","text":", r a p to search a library and add a specific version of that library to your project dependencies, without having to browse clojars.org separately. A selected library version is added to the dependency vector of the Leiningen project.clj file. When this function is called with a prefix, C-u , the artifact cache is refreshed synchronously.","title":"ap Add project dependency"},{"location":"refactor/clj-refactor/managing-library-dependencies/#up-update-project-dependency-versions","text":", r u p to update the version for each library in your Leiningen dependency configuration. Alternatively you can use lein-ancient plugin to update dependencies in your project.","title":"up Update project dependency versions"},{"location":"refactor/clj-refactor/managing-library-dependencies/#hintdepsedn-projects","text":"practicalli/clojure-deps-edn contains an :update alias that uses depot to update deps.edn projects","title":"Hint::deps.edn projects"},{"location":"refactor/clj-refactor/managing-library-dependencies/#sp-sort-project-dependencies","text":", r s p in the project.clj buffer to alphabetically sort the library names in the project :dependencies configuration.","title":"sp Sort project dependencies"},{"location":"refactor/clj-refactor/managing-namespaces/","text":"Managing Namespaces \u03bb\ufe0e Adding, updating and cleaning up of libraries in your namespace. Open the relevant Clojure file for the namespace and use the following commands to update the ns definition. Keybinding Description , r a r Add require form , r a m Add a missing namespace (library specification - libspec) , r a i Add import form for a JVM library , r c n Clean (remove unused) require and import forms managing library dependencies covers commands that add and update library dependencies to a Leiningen project. ar Add require to namespace definition \u03bb\ufe0e , r a r to require a known library namespace to the current namespace definition. (:require [ :as ]) is added if the ns definition does not contain any require statements [ :as ] is added if the (:require ) form already exists in the ns definition. Auto-completion will show namespaces the REPL is aware of. TAB will jump through the various tabstops to simplify adding the require statement 1st tabstop wraps the entire [example :as x] entry, letting you paste in a complete require. 2nd tabstop is inside the brackets example :as x , letting you write in a require with no alias. 3rd and 4th tabstop is the example and x , letting you write a require with an alias. Once you're through the tabstops, the cursor jumps back to where you were. The namespace is automatically cleaned up afterwards. This behaviour can be disabled by adding cljr-auto-clean-ns nil to the clojure layer configuration in .spacemacs am Add missing Clojure library (libspec) \u03bb\ufe0e , r a m ( cljr-add-missing-libspec ) to require a namespace for a var (function, name) under the cursor that is defined in a different namespace. This can be a namespace from the project or a library added as a dependency. If the var name is unique on the classpath then the ns definition is updated automatically. A prompt to select possible candidates is shown if more than one possibility. If the symbol at point is of the form edn/read-string the required namespace will be aliased to edn . ai Add a Java Library \u03bb\ufe0e , r a i to import a known JVM library (Java, Scala, Jython, etc.) to the current namespace definition. (:import ) form is added if the ns definition does not contain any import statements. Auto-completion will show namespaces the REPL is aware of. The namespace is automatically cleaned up afterwards. This behaviour can be disabled by adding cljr-auto-clean-ns nil to the clojure layer configuration in .spacemacs cn Clean ns \u03bb\ufe0e , r c n to clean the ns namespace definition in the current Clojure buffer Replace :use in favor of refer :all . Sort required libraries, imports and vectors of referred symbols Use prefix form e.g. [clojure [string test]] instead of two separate libspecs Raise errors if any inconsistencies are found (e.g. a libspec with more than one alias). Remove any duplication in the :require and :import form. Remove any unused libspec vectors Remove unused symbols from the :refer vector, or remove it completely. Remove any unused imports The prefix rewriting can be turned off by setting cljr-favor-prefix-notation nil .","title":"Managing Namespaces"},{"location":"refactor/clj-refactor/managing-namespaces/#managing-namespaces","text":"Adding, updating and cleaning up of libraries in your namespace. Open the relevant Clojure file for the namespace and use the following commands to update the ns definition. Keybinding Description , r a r Add require form , r a m Add a missing namespace (library specification - libspec) , r a i Add import form for a JVM library , r c n Clean (remove unused) require and import forms managing library dependencies covers commands that add and update library dependencies to a Leiningen project.","title":"Managing Namespaces"},{"location":"refactor/clj-refactor/managing-namespaces/#ar-add-require-to-namespace-definition","text":", r a r to require a known library namespace to the current namespace definition. (:require [ :as ]) is added if the ns definition does not contain any require statements [ :as ] is added if the (:require ) form already exists in the ns definition. Auto-completion will show namespaces the REPL is aware of. TAB will jump through the various tabstops to simplify adding the require statement 1st tabstop wraps the entire [example :as x] entry, letting you paste in a complete require. 2nd tabstop is inside the brackets example :as x , letting you write in a require with no alias. 3rd and 4th tabstop is the example and x , letting you write a require with an alias. Once you're through the tabstops, the cursor jumps back to where you were. The namespace is automatically cleaned up afterwards. This behaviour can be disabled by adding cljr-auto-clean-ns nil to the clojure layer configuration in .spacemacs","title":"ar Add require to namespace definition"},{"location":"refactor/clj-refactor/managing-namespaces/#am-add-missing-clojure-library-libspec","text":", r a m ( cljr-add-missing-libspec ) to require a namespace for a var (function, name) under the cursor that is defined in a different namespace. This can be a namespace from the project or a library added as a dependency. If the var name is unique on the classpath then the ns definition is updated automatically. A prompt to select possible candidates is shown if more than one possibility. If the symbol at point is of the form edn/read-string the required namespace will be aliased to edn .","title":"am Add missing Clojure library (libspec)"},{"location":"refactor/clj-refactor/managing-namespaces/#ai-add-a-java-library","text":", r a i to import a known JVM library (Java, Scala, Jython, etc.) to the current namespace definition. (:import ) form is added if the ns definition does not contain any import statements. Auto-completion will show namespaces the REPL is aware of. The namespace is automatically cleaned up afterwards. This behaviour can be disabled by adding cljr-auto-clean-ns nil to the clojure layer configuration in .spacemacs","title":"ai Add a Java Library"},{"location":"refactor/clj-refactor/managing-namespaces/#cn-clean-ns","text":", r c n to clean the ns namespace definition in the current Clojure buffer Replace :use in favor of refer :all . Sort required libraries, imports and vectors of referred symbols Use prefix form e.g. [clojure [string test]] instead of two separate libspecs Raise errors if any inconsistencies are found (e.g. a libspec with more than one alias). Remove any duplication in the :require and :import form. Remove any unused libspec vectors Remove unused symbols from the :refer vector, or remove it completely. Remove any unused imports The prefix rewriting can be turned off by setting cljr-favor-prefix-notation nil .","title":"cn Clean ns"},{"location":"refactor/clj-refactor/reference/","text":"References \u03bb\ufe0e http://endlessparentheses.com/a-small-improvement-to-clj-refactor.html Spacemacs clj-refactor configuration \u03bb\ufe0e All functions in clj-refactor have a two-letter mnemonic shortcut. E.g. rs for cljr-rename-symbol . The configuration for clj-refactor is in the file ~/.emacs.d/layers/+lang/clojure/packages.el . The specific clj-refactor configuration is in the clojure/init-clj-refactor function. The most relevant configuration is the keybindings prefix, which for spacemacs is c-c C-f . ( cljr-add-keybindings-with-prefix \"C-c C-f\" ) The Spacemacs nemonic menu is defined in the clj-refactor--key-binding-prefixes list. These are the menu options when you press SPC ( setq clj-refactor--key-binding-prefixes ' (( \"mr\" . \"refactor\" ) ( \"mra\" . \"add\" ) ( \"mrc\" . \"cycle/clean\" ) ( \"mrd\" . \"destructure\" ) ( \"mre\" . \"extract/expand\" ) ( \"mrf\" . \"find/function\" ) ( \"mrh\" . \"hotload\" ) ( \"mri\" . \"introduce/inline\" ) ( \"mrm\" . \"move\" ) ( \"mrp\" . \"project/promote\" ) ( \"mrr\" . \"remove/rename/replace\" ) ( \"mrs\" . \"show/sort/stop\" ) ( \"mrt\" . \"thread\" ) ( \"mru\" . \"unwind/update\" )))","title":"References"},{"location":"refactor/clj-refactor/reference/#references","text":"http://endlessparentheses.com/a-small-improvement-to-clj-refactor.html","title":"References"},{"location":"refactor/clj-refactor/reference/#spacemacs-clj-refactor-configuration","text":"All functions in clj-refactor have a two-letter mnemonic shortcut. E.g. rs for cljr-rename-symbol . The configuration for clj-refactor is in the file ~/.emacs.d/layers/+lang/clojure/packages.el . The specific clj-refactor configuration is in the clojure/init-clj-refactor function. The most relevant configuration is the keybindings prefix, which for spacemacs is c-c C-f . ( cljr-add-keybindings-with-prefix \"C-c C-f\" ) The Spacemacs nemonic menu is defined in the clj-refactor--key-binding-prefixes list. These are the menu options when you press SPC ( setq clj-refactor--key-binding-prefixes ' (( \"mr\" . \"refactor\" ) ( \"mra\" . \"add\" ) ( \"mrc\" . \"cycle/clean\" ) ( \"mrd\" . \"destructure\" ) ( \"mre\" . \"extract/expand\" ) ( \"mrf\" . \"find/function\" ) ( \"mrh\" . \"hotload\" ) ( \"mri\" . \"introduce/inline\" ) ( \"mrm\" . \"move\" ) ( \"mrp\" . \"project/promote\" ) ( \"mrr\" . \"remove/rename/replace\" ) ( \"mrs\" . \"show/sort/stop\" ) ( \"mrt\" . \"thread\" ) ( \"mru\" . \"unwind/update\" )))","title":"Spacemacs clj-refactor configuration"},{"location":"refactor/clojure-mode/","text":"Clojure specific refactor tools \u03bb\ufe0e , r is the refactor menu in Spacemacs which contains commands specific to refactor Clojure code. These complement the Evil tools and structural editing The default refactor tools are part of the clojure-mode package and work even when the REPL is not running. The optional clj-refactor commands mostly require a running REPL to work. Refactor menu \u03bb\ufe0e Keybinding Description , r ? Display help on how to enable clj-refactor package in the Clojure layer , r a n add namespace at top of current buffer , r a N add namespace at current point , r c # convert collection to a set #{} , r c ' convert collection to a quoted list , r ( convert collection to a list , r : cycle between keyword and string , r [ convert collection to a vector , r { convert collection to a hash-map , r i cycle between if and if-not , r p cycle privacy of vars, defn / defn- & def /`def ^:private**","title":"Clojure specific refactor tools"},{"location":"refactor/clojure-mode/#clojure-specific-refactor-tools","text":", r is the refactor menu in Spacemacs which contains commands specific to refactor Clojure code. These complement the Evil tools and structural editing The default refactor tools are part of the clojure-mode package and work even when the REPL is not running. The optional clj-refactor commands mostly require a running REPL to work.","title":"Clojure specific refactor tools"},{"location":"refactor/clojure-mode/#refactor-menu","text":"Keybinding Description , r ? Display help on how to enable clj-refactor package in the Clojure layer , r a n add namespace at top of current buffer , r a N add namespace at current point , r c # convert collection to a set #{} , r c ' convert collection to a quoted list , r ( convert collection to a list , r : cycle between keyword and string , r [ convert collection to a vector , r { convert collection to a hash-map , r i cycle between if and if-not , r p cycle privacy of vars, defn / defn- & def /`def ^:private**","title":"Refactor menu"},{"location":"reference/","text":"Reference \u03bb\ufe0e","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/emacs-quick-reference/","text":"Emacs Quick Reference \u03bb\ufe0e Todo::Consider moving this to just a reference section. Vim style is the default approach for this book and whist the Emacs bindings are still available in Spacemacs, they are not as focused on great user experience as Vim. \u03bb\ufe0e As Spacemacs is built on Emacs, its worth spending a little time getting uses to working with Emacs. Here is a short summary of what you need to know. For more details use the built in docs with M-x helm-spacemacs or M-m h SPC . Starting emacs \u03bb\ufe0e Either emacs as a command line or a desktop icon. Basic terms \u03bb\ufe0e The 'meta' key is usually the 'Alt' or 'Start Menu' key on your keyboard. C-<char> : control + <char> M-<char> : meta + <char> SPC : space RET : return / enter DEL : delete or backspace ESC : escape; ESC <char> is the same as M-<char> buffer : Everything you use, edit or read in emacs. This can be an open file, the results of a compilation, your mail and several other things, like e.g. a shell window. mark : It is a position in a buffer, that is pushed in a special stack, when jumping in the buffer etc. It can be pushed manually. mode : Every buffer has a mode. A mode can have special functions, colouring, indentions etc. minibuffer : The line at the bottom, where you can enter commands after typing M-x. Most of these commands can be invoked by pressing *lot of* keys, but don't worry... from now on, I'm going to introduce some of these functions, with the actual command name in round brackets. point : the actual cursor position Managing files, buffers and windows \u03bb\ufe0e C-x C-f (find-file) : opens a file C-x 4 C-f (find-file-other-window) : opens a file in the next window C-x k (kill-buffer) : closes the current buffer C-x C-c (save-buffers-kill-emacs) : asks whether it should save your files and exits C-x C-s (save-buffer) : saves the current buffer C-x C-w (write-file) : saves in a file of your choice C-x C-b (list-buffers) : lists and manages all open buffers, press ? for help C-x b (switch-to-buffer) : changes the current buffer C-x 4 b (switch-to-buffer-other-window) : changes the next window's buffer C-x 2 (split-window-vertically) : splits the current window vertically in half C-x 3 (split-window-horizontally): splits the current window horizontally in half C-x 1 (delete-other-windows) : closes every but the current window C-x 0 (delete-window) : closes the current window C-x o (other-window) : switches to the next window Simple editing \u03bb\ufe0e C-SPC (set-mark-command) : sets the mark where the cursor is C-w (kill-region) : cuts the region from the mark till point to the clipboard M-w (kill-ring-save) : copies the region from the mark till point to the clipboard C-y (yank) : pastes from the clipboard C-a (beginning-of-line) : positions the cursor to the beginning of the line C-e (end-of-line) : positions the cursor to the end of the line C-t (transpose-chars) : swaps the last two characters M-t (transpose-words) : swaps the last two words C-x C-t (transpose-lines) : swaps the last two lines Search and replace \u03bb\ufe0e If the search string contains uppercase letters, it will be case sensitive. Case sensitivity can be toggled with M-c during search in newer versions. C-s (isearch-forward) : searches forward C-r (isearch-backward) : searches backward M-% (query-replace) : replaces a string wherever it occurs with another, and asks for permission every time (replace-string) : replaces a string wherever it occurs with another Other useful things \u03bb\ufe0e (set-variable) : sets the value of a variable C-h v (describe-variable) : displays the current value and the meaning of a variable C-h m (describe-mode) : describes the current mode and lists its functions and key combinations C-h f (describe-function) : explains what a function does C-g (keyboard-quit) : exits from the minibuffer C-h ? (help-for-help) : gives a help for using help commands C-_ (undo) : undoes the last change (man) : invokes the manual in the next window Managing case \u03bb\ufe0e Spacemacs Major mode Emacs Evil Command Description C-x C-l downcase-region Convert region to lower case C-x C-u upcase-region Convert region to upper case M-c capitalize-word Capitalize the following word M-u upcase-word Convert following word to upper case M-l ** downcase-word Convert following word to lower case ** The keybinding M-l is bound to markdow-demote in spacemacs The ~/.emacs file \u03bb\ufe0e You can assign hot-keys for frequently used commands: \"(global-set-key key 'command)\", e.g. I recommend the following: (global-set-key \"\\C-cr\" 'revert-buffer) ; C-c r reverts the file from disk (global-set-key [f12] 'compile) (global-set-key [f10] 'shell) (global-set-key [end] 'end-of-buffer) ; only for the new emacs (global-set-key [home] 'beginning-of-buffer) ; only for the new emacs Advanced functions \u03bb\ufe0e Modes Mode-specific indention: TAB (indent-relative) : indents the current line C-M-\\ (indent-region) : indents the selected region Modes are automatically entered, e.g. when you open a file of a known extension. To force a mode-change, you can type these: (latex-mode) : enters LaTeX mode (c++-mode) : enters C++ mode (ada-mode) : enters Ada mode (irchat) : enters IRC mode (IRChat 2.4+ needed) (rmail) : enters mail mode (gnus) : enters news-reading mode (tcl-mode) : enters TCL mode I advise to use IRChat in a new frame (i.e. in another window): (new-frame) : opens a new window (only in X/Windows) External programs \u03bb\ufe0e (shell) : starts a terminal in the window (ediff) : compares two files and makes changes (gdb) : runs the GNU Debug tool Simple editing (2) \u03bb\ufe0e M-PgUp (scroll-other-window-down) : scrolls up the next window M-PgDn (scroll-other-window) : scrolls down the next window C-x C-SPC (pop-global-mark) : pops the top mark from the stack, and moves the cursor there C-x C-x (exchange-point-and-mark) : exchanges the mark with cursor position C-x r SPC (point-to-register) : stores the buffer & cursor position to a register C-x r j (jump-to-register) : jumps to a previously stored buffer/position. M-D (kill-word) : cuts from point until the next whitespace character M-DEL (backward-kill-word) : cuts from the last whitespace character until point C-k (kill-line) : cuts the line from point C-x r k (kill-rectangle) : cuts the rectangle defined by the mark as upper left and point as lower right corner to the clipboard C-x r y (yank-rectangle) : pastes a rectangle M-c (capitalize-word) : capitalizes the word under cursor M-l (downcase-word) : changes the word to lowercase M-u (upcase-word) : changes the word to uppercase (iso-accents-mode) : turns on/off flying accents (',~,^) Search and replace (2) \u03bb\ufe0e C-x n n (narrow-to-region) : temporarily crops the buffer to the selected region C-x n w (widen) : restores the un-cropped buffer C-M-% (query-replace-regexp) : replaces a regexp wherever it occurs with a string, and asks for permission every time (replace-regexp) : replaces a regexp wherever it occurs with a string (occur) : lists all occurrences of search string (find-name-dired) : searches for a file with the specified name (find-grep-dired) : searches for a file that contains the specified string Fun things to do \u03bb\ufe0e (gomoku) : emacs plays gomoku with you (blackbox) : a nice logical game (dunnet) : a hilarious interactive fiction (malyon) : a z-code player; you can download tons of IF games and this library at http://www.ifarchive.org/ (calendar) : a calendar that tells you everything you want to know about any day and also provides a diary - press ? for commands Did you know? \u03bb\ufe0e You can complete minibuffer commands with TAB. If you press it twice, completions appear in the next window. You can hide most of the 'information' buffers (like info, man, completions, help etc.) with q. If you press enter on a directory when typing an address in the minibuffer, a friendly navigator appears. Reference \u03bb\ufe0e Mastering Emacs","title":"Emacs Quick Reference"},{"location":"reference/emacs-quick-reference/#emacs-quick-reference","text":"","title":"Emacs Quick Reference"},{"location":"reference/emacs-quick-reference/#todoconsider-moving-this-to-just-a-reference-section-vim-style-is-the-default-approach-for-this-book-and-whist-the-emacs-bindings-are-still-available-in-spacemacs-they-are-not-as-focused-on-great-user-experience-as-vim","text":"As Spacemacs is built on Emacs, its worth spending a little time getting uses to working with Emacs. Here is a short summary of what you need to know. For more details use the built in docs with M-x helm-spacemacs or M-m h SPC .","title":"Todo::Consider moving this to just a reference section.  Vim style is the default approach for this book and whist the Emacs bindings are still available in Spacemacs, they are not as focused on great user experience as Vim."},{"location":"reference/emacs-quick-reference/#starting-emacs","text":"Either emacs as a command line or a desktop icon.","title":"Starting emacs"},{"location":"reference/emacs-quick-reference/#basic-terms","text":"The 'meta' key is usually the 'Alt' or 'Start Menu' key on your keyboard. C-<char> : control + <char> M-<char> : meta + <char> SPC : space RET : return / enter DEL : delete or backspace ESC : escape; ESC <char> is the same as M-<char> buffer : Everything you use, edit or read in emacs. This can be an open file, the results of a compilation, your mail and several other things, like e.g. a shell window. mark : It is a position in a buffer, that is pushed in a special stack, when jumping in the buffer etc. It can be pushed manually. mode : Every buffer has a mode. A mode can have special functions, colouring, indentions etc. minibuffer : The line at the bottom, where you can enter commands after typing M-x. Most of these commands can be invoked by pressing *lot of* keys, but don't worry... from now on, I'm going to introduce some of these functions, with the actual command name in round brackets. point : the actual cursor position","title":"Basic terms"},{"location":"reference/emacs-quick-reference/#managing-files-buffers-and-windows","text":"C-x C-f (find-file) : opens a file C-x 4 C-f (find-file-other-window) : opens a file in the next window C-x k (kill-buffer) : closes the current buffer C-x C-c (save-buffers-kill-emacs) : asks whether it should save your files and exits C-x C-s (save-buffer) : saves the current buffer C-x C-w (write-file) : saves in a file of your choice C-x C-b (list-buffers) : lists and manages all open buffers, press ? for help C-x b (switch-to-buffer) : changes the current buffer C-x 4 b (switch-to-buffer-other-window) : changes the next window's buffer C-x 2 (split-window-vertically) : splits the current window vertically in half C-x 3 (split-window-horizontally): splits the current window horizontally in half C-x 1 (delete-other-windows) : closes every but the current window C-x 0 (delete-window) : closes the current window C-x o (other-window) : switches to the next window","title":"Managing files, buffers and windows"},{"location":"reference/emacs-quick-reference/#simple-editing","text":"C-SPC (set-mark-command) : sets the mark where the cursor is C-w (kill-region) : cuts the region from the mark till point to the clipboard M-w (kill-ring-save) : copies the region from the mark till point to the clipboard C-y (yank) : pastes from the clipboard C-a (beginning-of-line) : positions the cursor to the beginning of the line C-e (end-of-line) : positions the cursor to the end of the line C-t (transpose-chars) : swaps the last two characters M-t (transpose-words) : swaps the last two words C-x C-t (transpose-lines) : swaps the last two lines","title":"Simple editing"},{"location":"reference/emacs-quick-reference/#search-and-replace","text":"If the search string contains uppercase letters, it will be case sensitive. Case sensitivity can be toggled with M-c during search in newer versions. C-s (isearch-forward) : searches forward C-r (isearch-backward) : searches backward M-% (query-replace) : replaces a string wherever it occurs with another, and asks for permission every time (replace-string) : replaces a string wherever it occurs with another","title":"Search and replace"},{"location":"reference/emacs-quick-reference/#other-useful-things","text":"(set-variable) : sets the value of a variable C-h v (describe-variable) : displays the current value and the meaning of a variable C-h m (describe-mode) : describes the current mode and lists its functions and key combinations C-h f (describe-function) : explains what a function does C-g (keyboard-quit) : exits from the minibuffer C-h ? (help-for-help) : gives a help for using help commands C-_ (undo) : undoes the last change (man) : invokes the manual in the next window","title":"Other useful things"},{"location":"reference/emacs-quick-reference/#managing-case","text":"Spacemacs Major mode Emacs Evil Command Description C-x C-l downcase-region Convert region to lower case C-x C-u upcase-region Convert region to upper case M-c capitalize-word Capitalize the following word M-u upcase-word Convert following word to upper case M-l ** downcase-word Convert following word to lower case ** The keybinding M-l is bound to markdow-demote in spacemacs","title":"Managing case"},{"location":"reference/emacs-quick-reference/#the-emacs-file","text":"You can assign hot-keys for frequently used commands: \"(global-set-key key 'command)\", e.g. I recommend the following: (global-set-key \"\\C-cr\" 'revert-buffer) ; C-c r reverts the file from disk (global-set-key [f12] 'compile) (global-set-key [f10] 'shell) (global-set-key [end] 'end-of-buffer) ; only for the new emacs (global-set-key [home] 'beginning-of-buffer) ; only for the new emacs","title":"The ~/.emacs file"},{"location":"reference/emacs-quick-reference/#advanced-functions","text":"Modes Mode-specific indention: TAB (indent-relative) : indents the current line C-M-\\ (indent-region) : indents the selected region Modes are automatically entered, e.g. when you open a file of a known extension. To force a mode-change, you can type these: (latex-mode) : enters LaTeX mode (c++-mode) : enters C++ mode (ada-mode) : enters Ada mode (irchat) : enters IRC mode (IRChat 2.4+ needed) (rmail) : enters mail mode (gnus) : enters news-reading mode (tcl-mode) : enters TCL mode I advise to use IRChat in a new frame (i.e. in another window): (new-frame) : opens a new window (only in X/Windows)","title":"Advanced functions"},{"location":"reference/emacs-quick-reference/#external-programs","text":"(shell) : starts a terminal in the window (ediff) : compares two files and makes changes (gdb) : runs the GNU Debug tool","title":"External programs"},{"location":"reference/emacs-quick-reference/#simple-editing-2","text":"M-PgUp (scroll-other-window-down) : scrolls up the next window M-PgDn (scroll-other-window) : scrolls down the next window C-x C-SPC (pop-global-mark) : pops the top mark from the stack, and moves the cursor there C-x C-x (exchange-point-and-mark) : exchanges the mark with cursor position C-x r SPC (point-to-register) : stores the buffer & cursor position to a register C-x r j (jump-to-register) : jumps to a previously stored buffer/position. M-D (kill-word) : cuts from point until the next whitespace character M-DEL (backward-kill-word) : cuts from the last whitespace character until point C-k (kill-line) : cuts the line from point C-x r k (kill-rectangle) : cuts the rectangle defined by the mark as upper left and point as lower right corner to the clipboard C-x r y (yank-rectangle) : pastes a rectangle M-c (capitalize-word) : capitalizes the word under cursor M-l (downcase-word) : changes the word to lowercase M-u (upcase-word) : changes the word to uppercase (iso-accents-mode) : turns on/off flying accents (',~,^)","title":"Simple editing (2)"},{"location":"reference/emacs-quick-reference/#search-and-replace-2","text":"C-x n n (narrow-to-region) : temporarily crops the buffer to the selected region C-x n w (widen) : restores the un-cropped buffer C-M-% (query-replace-regexp) : replaces a regexp wherever it occurs with a string, and asks for permission every time (replace-regexp) : replaces a regexp wherever it occurs with a string (occur) : lists all occurrences of search string (find-name-dired) : searches for a file with the specified name (find-grep-dired) : searches for a file that contains the specified string","title":"Search and replace (2)"},{"location":"reference/emacs-quick-reference/#fun-things-to-do","text":"(gomoku) : emacs plays gomoku with you (blackbox) : a nice logical game (dunnet) : a hilarious interactive fiction (malyon) : a z-code player; you can download tons of IF games and this library at http://www.ifarchive.org/ (calendar) : a calendar that tells you everything you want to know about any day and also provides a diary - press ? for commands","title":"Fun things to do"},{"location":"reference/emacs-quick-reference/#did-you-know","text":"You can complete minibuffer commands with TAB. If you press it twice, completions appear in the next window. You can hide most of the 'information' buffers (like info, man, completions, help etc.) with q. If you press enter on a directory when typing an address in the minibuffer, a friendly navigator appears.","title":"Did you know?"},{"location":"reference/emacs-quick-reference/#reference","text":"Mastering Emacs","title":"Reference"},{"location":"reference/hydra-menus/","text":"Hydra menus \u03bb\ufe0e Some packages also include their own hydra menus. An example of this is the Clojure refactor hyrda menu. C-c C-f h h - clj-refactor (hydra menu) TODO::Transient state keybinding for Clojure layer - cljr-refactor \u03bb\ufe0e hydra-cljr-help-menu/body is an interactive compiled Lisp function in `clj-refactor.el'. This is probably irrelevant as clj-refactor is being merged into clojure-mode. (hydra-cljr-help-menu/body) For more information check the manuals. Call the body in the \"hydra-cljr-help-menu\" hydra. The heads for the associated hydra are: \"n\": \u2018hydra-cljr-ns-menu/body\u2019, \"c\": \u2018hydra-cljr-code-menu/body\u2019, \"p\": \u2018hydra-cljr-project-menu/body\u2019, \"t\": \u2018hydra-cljr-toplevel-form-menu/body\u2019, \"s\": \u2018hydra-cljr-cljr-menu/body\u2019, \"q\": \u2018nil\u2019 The body can be accessed via \u2018hydra-cljr-help-menu/body\u2019. ```","title":"Hydra menus"},{"location":"reference/hydra-menus/#hydra-menus","text":"Some packages also include their own hydra menus. An example of this is the Clojure refactor hyrda menu. C-c C-f h h - clj-refactor (hydra menu)","title":"Hydra menus"},{"location":"reference/hydra-menus/#todotransient-state-keybinding-for-clojure-layer-cljr-refactor","text":"hydra-cljr-help-menu/body is an interactive compiled Lisp function in `clj-refactor.el'. This is probably irrelevant as clj-refactor is being merged into clojure-mode. (hydra-cljr-help-menu/body) For more information check the manuals. Call the body in the \"hydra-cljr-help-menu\" hydra. The heads for the associated hydra are: \"n\": \u2018hydra-cljr-ns-menu/body\u2019, \"c\": \u2018hydra-cljr-code-menu/body\u2019, \"p\": \u2018hydra-cljr-project-menu/body\u2019, \"t\": \u2018hydra-cljr-toplevel-form-menu/body\u2019, \"s\": \u2018hydra-cljr-cljr-menu/body\u2019, \"q\": \u2018nil\u2019 The body can be accessed via \u2018hydra-cljr-help-menu/body\u2019. ```","title":"TODO::Transient state keybinding for Clojure layer - cljr-refactor"},{"location":"reference/projectile/","text":"Projectile project navigation and management \u03bb\ufe0e Projectile provides commands to navigate within a project and manage files and buffers as a project. A project is defined by any of the following: a source control directory e.g. .git programming language tools e.g. deps.edn projectile configuration file, .projectile Commonly used commands \u03bb\ufe0e SPC p f will find a file by name within the project scope SPC p a will alternate between a source code file and its unit test file SPC p \" opens an external terminal at the root of the project, so external terminal commands can easily be run on the project, e.g. clojure -M:repl/rebel to start a terminal UI REPL SPC Ignore files in project Projectile configuration file \u03bb\ufe0e A .projectile file at the root of a project include file and directory name patterns for Projectile to ignore , similar to a .gitignore file. Projectile will ignore patterns in a .gitignore file. however, there may be additional patterns that Projectile should ignore that Git should not Ignore files at the root of the project -/log -/tmp -/public/uploads Relative pathname ignores: -tmp -*.port -*.yml Ignore everything except certain sub-directories (not relevant for file names) +/src/practicalli +/tests/practicalli Projectile menu \u03bb\ufe0e SPC p opens the projectile menu","title":"Projectile"},{"location":"reference/projectile/#projectile-project-navigation-and-management","text":"Projectile provides commands to navigate within a project and manage files and buffers as a project. A project is defined by any of the following: a source control directory e.g. .git programming language tools e.g. deps.edn projectile configuration file, .projectile","title":"Projectile project navigation and management"},{"location":"reference/projectile/#commonly-used-commands","text":"SPC p f will find a file by name within the project scope SPC p a will alternate between a source code file and its unit test file SPC p \" opens an external terminal at the root of the project, so external terminal commands can easily be run on the project, e.g. clojure -M:repl/rebel to start a terminal UI REPL SPC","title":"Commonly used commands"},{"location":"reference/projectile/#ignore-files-in-project-projectile-configuration-file","text":"A .projectile file at the root of a project include file and directory name patterns for Projectile to ignore , similar to a .gitignore file. Projectile will ignore patterns in a .gitignore file. however, there may be additional patterns that Projectile should ignore that Git should not Ignore files at the root of the project -/log -/tmp -/public/uploads Relative pathname ignores: -tmp -*.port -*.yml Ignore everything except certain sub-directories (not relevant for file names) +/src/practicalli +/tests/practicalli","title":"Ignore files in project Projectile configuration file"},{"location":"reference/projectile/#projectile-menu","text":"SPC p opens the projectile menu","title":"Projectile menu"},{"location":"reference/cider/","text":"Cider reference \u03bb\ufe0e The following section complements the excellent CIDER documentation which are highly recommended. CIDER configuration variables \u03bb\ufe0e Cider behaviour can easily be modified by changing configuration variables.","title":"Cider reference"},{"location":"reference/cider/#cider-reference","text":"The following section complements the excellent CIDER documentation which are highly recommended.","title":"Cider reference"},{"location":"reference/cider/#cider-configuration-variables","text":"Cider behaviour can easily be modified by changing configuration variables.","title":"CIDER configuration variables"},{"location":"reference/cider/configuration-variables/","text":"Cider configuration variables. \u03bb\ufe0e The following in non-authoritative list of configuration variables, created by searching for defcustom across the clojure-emacs/cider project. Variables are grouped by the files they are defined in throughout the clojure-emacs/cider project. CIDER Variables can be set via: .dir-locals.el files for project specific configuration (clojure :variables variable-name value) in .spacemacs layers list (setq variable-name value) in dotspacemacs/user-config section of .spacemacs Hint::Clojure Project Configuration \u03bb\ufe0e Examples of using .dir-locals.el for Clojure projects are covered in the project level configuration page Completion \u03bb\ufe0e Variables Default value Description cider-completion-use-context true - use context at point to improve completion suggestions cider-annotate-completion-candidates true - annotate completion candidates cider-annotate-completion-function function to format annotations for completion candidates - takes 2 arguments: abbreviation candidate type ( cider-completion-annotations-alist ) and candidate namespace cider-completion-annotations-alist Annotation abbreviation for completion candidates (TYPE . ABBREVIATION). TYPE is that returned from the completion backend.ABBREVIATION is a short form of that type. cider-completion-annotations-include-ns Pass namespace to cider-annotate-completion-function , 'always passed if namespace is available. 'unqualified only pass namespace if not namespace-qualified. Client \u03bb\ufe0e Variables Default value Description cider-eval-spinner-type 'progress-bar Type of evaluation spinner (describe-variable spinner-types) cider-show-eval-spinner t Show evaluation spinner in mode line cider-eval-spinner-delay 1 Time (seconds) elapsed before evaluation spinner shown (default: 1 ) cider-enhanced-cljs-completion-p t Enable dynamic cljs completions. Expressions at point evaluated, resulting value are used to compute completions cider-print-fn nil Pretty print function: 'pprint clojure.pprint, pr clojure.core/pr , fipp fast idiomatic pprint, puget serialised fipp , zprint zprint library, nil defer to REPL cider-print-options nil Options map passed to cider-print-fn , pprint example: '((\\\"length\\\" 50) (\\\"right-margin\\\" 70)) cider-print-quota (* 1024 1024) Hard limit on the number of bytes to return from any printing operation, nil for no limit cider-print-buffer-size (* 4 1024) Chunk size (bytes) for print streaming. Smaller chunks, faster feedback and smaller results (only single chunk result can be font-locked) cider-filtered-namespaces-regexps Filter var/symbol/namespace with list of Clojure regex patters (double backslashes as passed through CIDER middleware) eldoc \u03bb\ufe0e Variables Default value Description cider-eldoc-max-num-sexps-to-skip 30 Maximum number of sexps to skip while searching the beginning of current sexp cider-eldoc-ns-function #'identity Function returning a ns string to eldoc. Takes namespace name as argument. Convenience functions: cider-abbreviate-ns , and cider-last-ns-segment cider-eldoc-max-class-names-to-display 3 Maximum number of classes to display in eldoc string (Java interop forms may have several classes), with \"& x more\" suffix. nil - all classes are displayed cider-eldoc-display-for-symbol-at-point t t display eldoc for symbol at point. nil always display eldoc for first symbol of the sexp. cider-eldoc-display-context-dependent-info nil t display context dependent info in the eldoc. CIDER adds expected function arguments based on the current context debug \u03bb\ufe0e Variables Default value Description cider-debug-prompt 'overlay Position of debug key binding menu. overlay overlay above the current function. minibuffer in minibuffer with return value. t overlay and minibuffer. nil no menu cider-debug-use-overlays t Highlight debug information with overlays. Same values as cider-use-overlays cider-debug-display-locals nil t local variable display during debugging. Toggled with cider-debug-toggle-locals cider-debug-prompt-commands List of debugger command specs in the format (KEY COMMAND-NAME DISPLAY-NAME?). KEY is a character mapped to the command COMMAND-NAME which is a valid debug command to be passed to the cider-nrepl middleware DISPLAY-NAME is the string displayed in the debugger overlay. If DISPLAY-NAME is nil, that command is hidden from the overlay but still callable. The rest of the commands are displayed in the same order as this list.\" Overlays \u03bb\ufe0e Variables Default value Description cider-result-use-clojure-font-lock t t interactive eval results are font-locked as Clojure code. cider-overlays-use-font-lock t t results overlays are font-locked as Clojure code. nil apply cider-result-overlay-face to the entire overlay instead cider-use-overlays 'both Display evaluation results with overlays. t overlays determined by cider-result-overlay-position . nil display on the echo area. both display on both places. cider-result-overlay-position 'at-eol Display result overlays for inline evaluation and the debugger. If 'at-eol display at the end of the line. 'at-point display at the end of the respective sexp. cider-eval-result-prefix \"=>\" Prefix displayed in minibuffer before a result value cider-eval-result-duration 'command Duration (seconds) of CIDER's eval-result overlays. nil overlays last indefinitely. command overlays erased after the next command. See `cider-use-overlays'. cider-use-fringe-indicators t Display evaluation indicators on the left fringe. Inspector \u03bb\ufe0e Variables Default value Description cider-inspector-page-size 32 Results per page in paginated inspector view, s to interactively change cider-inspector-fill-frame nil t cider inspector window fills its frame cider-inspector-skip-uninteresting t skips values when navigating with `cider-inspector-*-inspectable-object' commands REPL history \u03bb\ufe0e Variables Default value Description cider-repl-history-display-style 'separated 'separated display cider-repl-history-separator between entries. 'one-line replace newlines with \"\\n\" cider-repl-history-quit-action 'quit-window Action when cider-repl-history-quit called. 'bury-buffer bury cider-repl-history buffer but keep window, 'bury-and-delete-window bury buffer and delete window if more than one window in frame. 'delete-and-restore restore window layout and kill cider-repl-history buffer. 'quit-window restore window layout and bury cider-repl-history . 'kill-and-delete-window kill the cider-repl-history buffer and delete the window on close. cider-repl-history-resize-window nil Resize the cider-repl-history window to fit its contents. t resize window (MAXIMUM . MINIMUM) for the size of the window. MAXIMUM defaults to the window size chosen by pop-to-buffer'; MINIMUM defaults to window-min-height'. cider-repl-history-separator \";;;;;;;;;;\" String separating entries in the separated style. See cider-repl-history-display-style cider-repl-history-recenter nil t always keep current entry at the top of the window cider-repl-history-highlight-current-entry nil t highlight currently selected command history entry cider-repl-history-highlight-inserted-item nil t temporarily highlight inserted command history entry. 'solid highlight inserted text for a fixed period of time. 'pulse fade out the highlight gradually. cider-repl-history-inserted-item-face face used for highlighting. cider-repl-history-separator-face 'bold Face to highlight cider-repl-history-separator cider-repl-history-current-entry-face 'highlight Face to highlight command history current entry cider-repl-history-inserted-item-face 'highlight Face to highlight inserted item cider-repl-history-maximum-display-length nil Limit the length of displayed items. Command history limited to number of characters. nil means no limit cider-repl-history-display-duplicates t t display duplicate items in the command history cider-repl-history-display-duplicate-highest t When cider-repl-history-display-duplicates is nil, display most recent duplicate items in command history cider-repl-history-text-properties nil If non-nil, maintain text properties of the command history items. cider-repl-history-hook nil List of functions to call after `cider-repl-history' cider-repl-history-show-preview nil t show preview of inserted text in REPL buffer using item under point where inserted xref \u03bb\ufe0e Variables Default value Description cider-xref-actions '((\"display-doc\" . cider-doc-lookup) Actions applied on symbol found by xref search. First action in list selected as default. If only one action function, its applied automatically util \u03bb\ufe0e Variables Default value Description cider-font-lock-max-length 10000 Maxiumum length of strings to fontify in cider-font-lock-as . nil removes the fontification restriction cider-doc-xref-regexp Regexp to search Clojure vars in doc buffers cider-jdk-src-paths '(\"/usr/lib/jvm/openjdk-8/src.zip\") Source code used by `cider-stacktrace-navigate'. Zip/jar file or extracted directory (recommended). Clojure sources: https://mvnrepository.com/artifact/org.clojure/clojure repl \u03bb\ufe0e Variables Default value Description cider-repl-pop-to-buffer-on-connect t Display and Focus REPL buffer on connect. nil REPL buffer is created but not displayed. display-only REPL buffer displayed but not focused. cider-repl-display-in-current-window nil Display REPL buffer in the current window. cider-repl-use-pretty-printing t REPL buffer results pretty-printed. cider-toggle-pretty-printing interactively toggles. Specify printer function in cider-pprint-fn . cider-repl-use-content-types nil REPL results presented using content-type information. cider-repl-toggle-content-types interactively toggles cider-repl-auto-detect-type t Auto-detect REPL type using track-state information. cider-set-repl-type to manually change REPL between Clojure and ClojureScript REPL cider-repl-use-clojure-font-lock t t use Clojure mode font-locking for input and result. nil uses cider-repl-input-face and cider-repl-result-face cider-repl-require-ns-on-set nil Should the namespace be required before setting it in the REPL cider-repl-result-prefix \"\" Display prefix characters in the REPL before a result value, e.g. \"=>\" may make results stand out more cider-repl-tab-command 'cider-repl-indent-and-complete-symbol Command invoked by TAB key. Default option is cider-repl-indent-and-complete-symbol . indent-for-tab-command to use the default Emacs behavior. cider-repl-init-code (list (cdr (assoc 'clj cider-repl-require-repl-utils-code))) Clojure code evaluated when starting a REPL, evaluated with bindings for set! -able vars in place. cider-repl-display-help-banner t t help text will be displayed on REPL start cider-repl-prompt-function #'cider-repl-prompt-default Function takes a namespace name and returns a prompt string. Convenience functions: cider-repl-prompt-lastname , cider-repl-prompt-abbreviated and cider-repl-prompt-default cider-repl-image-margin 10 Margin applied to images in REPL buffer. Single number of pixels as symmetric margin, pair of numbers (x . y) for an arbitrary margin cider-locref-regexp-alist Regular expressions for inline location references. (NAME REGEXP HIGHLIGHT VAR FILE LINE), NAME identifier of the regexp, REGEXP regexp matching a location, HIGHLIGHT sub-expression matching region to highlight on mouse-over, VAR sub-expression giving Clojure VAR to look up. FILE only used when VAR is nil and must be full resource path cider-repl-wrap-history nil t to wrap history when the end is reached cider-repl-history-size 500 Maximum number of items to keep in the REPL history cider-repl-history-file nil File to save the persistent REPL history cider-repl-shortcut-dispatch-char ?\\, Character used to distinguish REPL commands from Lisp forms cider-repl-buffer-size-limit No default Auto-trimming: Remove older output in the REPL buffer once the set size is reached cider.el \u03bb\ufe0e Variables Default value Description cider-lein-command Command used to execute Leiningen cider-lein-global-options Command global options used to execute Leiningen (e.g. -o for offline). cider-lein-parameters Params passed to Leiningen to start an nREPL server via cider-jack-in . cider-boot-command Command used to execute Boot cider-boot-global-options Command global options used to execute Boot (e.g. -c for checkouts). cider-boot-parameters Params passed to boot to start an nREPL server via cider-jack-in . cider-clojure-cli-command Command execute Clojure CLI deps.edn. If clojure executable is not found on Windows, default to powershell cider-clojure-cli-global-options Command line options used to execute Clojure CLI - also see cider-clojure-cli-aliases cider-clojure-cli-aliases Aliases to be added to Clojure CLI command (inserted before :cider/nrepl ) cider-clojure-cli-parameters Params to start an nREPL server via cider-jack-in . evaluated using format , with the first argument being the Clojure vector of middleware variables as a string. cider-shadow-cljs-command The command used to execute shadow-cljs. By default we favour the project-specific shadow-cljs over the system-wide. cider-shadow-cljs-global-options Command line options used to execute shadow-cljs (e.g. -v for verbose mode). cider-shadow-cljs-parameters Params passed to shadow-cljs to start an nREPL server via cider-jack-in . cider-gradle-command Command used to execute Gradle. cider-gradle-global-options Command line options used to execute Gradle (e.g.: -m for dry run). cider-gradle-parameters Params passed to gradle to start an nREPL server via cider-jack-in cider-jack-in-default (if (executable-find \"clojure\") 'clojure-cli 'lein) Default tool when cider-jack-in outside a project. The Clojure CLI is is the default. Fallback to Leiningen if Clojure CLI not available cider-preferred-build-tool Unless set, prompt when multiple project configuration files (deps.edn, project.clj, build.boot) cider-allow-jack-in-without-project 'warn 'warn prompt to confirm jack-in command when not in a Clojure project. t cider-jack-in' quietly continues. nil cider-jack-in fails. cider-known-endpoints nil List of connection endpoints for cider-connect eg. '((\\\"label\\\" \\\"host\\\" \\\"port\\\")) (label optional) cider-connected-hook nil List of functions to call when connected to Clojure nREPL server. cider-disconnected-hook nil List of functions to call when disconnected from the Clojure nREPL server cider-inject-dependencies-at-jack-in t nil do not inject REPL dependencies (i.e. nREPL middleware) for cider-jack-in cider-offer-to-open-cljs-app-in-browser t nil do not offer to open ClojureScript apps in a browser on connect cider-jack-in-auto-inject-clojure nil nil Clojure version not injected. latest inject cider-latest-clojure-version , minimal inject cider-minimum-clojure-version \"1.10.3\" explicit version. Using list, first element is artifact ID string, second element is version number cider-check-cljs-repl-requirements t Run requirement checks for the cljs REPLs. (only disable if experiencing a faulty check) cider-custom-cljs-repl-init-form nil Form to start custom ClojureScript REPL (becomes return value of cider-custom-cljs-repl-init-form function which prompts for init form). Use with .dir-locals.el where it doesn't make sense to register a new ClojureScript REPL type cider-default-cljs-repl nil ClojureScript REPL to start for cljs jack-in commands ( .dir-locals.el approach recommended) cider-edit-jack-in-command nil t allow the user to edit the cider-jack-in-* command line cider-infer-remote-nrepl-ports nil t cider will use ssh to try to infer nREPL ports on remote hosts apropos \u03bb\ufe0e Variables Default value Description cider-apropos-actions '((\"display-doc\" . cider-doc-lookup) Controls the actions to be applied on the symbol found by an apropos search scratch \u03bb\ufe0e Variables Default value Description cider-scratch-initial-message Initial message displayed in new scratch buffers ns \u03bb\ufe0e Variables Default value Description cider-ns-save-files-on-refresh 'prompt 'prompt user prompt to save modified files before refreshing. nil files not saved. t save modified files without confirmation. cider-ns-save-files-on-refresh-modes '(clojure-mode) List of modes to determine which modified files are saved before refreshing. A major mode derived from list of the modes. t all modified files on the classpath are saved. cider-ns-refresh-show-log-buffer nil nil log buffer will be written to but not displayed automatically (relevant info shown in mini-buffer t log buffer will be displayed every time cider-ns-refresh is called. cider-ns-refresh-before-fn nil Clojure namespace-qualified function of zero arity called by cider-ns-refresh before reloading. nil no function called before reloading. Any thrown exception will prevent reloading. cider-ns-refresh-after-fn nil Clojure namespace-qualified function of zero arity for cider-ns-refresh to call after reloading. nil no function invoked after reloading. macroexpansion \u03bb\ufe0e Variables Default value Description cider-macroexpansion-display-namespaces tidy Should full namespace be shown for vars in macroexpansion buffer 'tidy not shown for locally defined or referred vars, 'qualified fully qualified vars shown, 'none no namespace qualification cider-macroexpansion-print-metadata nil t include metadata in macroexpansion results test \u03bb\ufe0e Variables Default value Description cider-test-show-report-on-success nil Show *cider-test-report* buffer for successful tests, nil only generates report when tests fail and subsequent test runs cider-auto-select-test-report-buffer t Should *cider-test-report* buffer be active window when it appears cider-test-defining-forms '(\"deftest\" \"defspec\") Forms that define top level of individual unit tests cider-test-infer-test-ns 'cider-test-default-test-ns-fn infer test namespace. Defaults to -test postfix on the namespace name common \u03bb\ufe0e Variables Default value Description cider-prompt-for-symbol t always prompt, use symbol at point as default. nil use symbol at point, prompt if error. cider-special-mode-truncate-lines t CIDER special buffers are line-truncated cider-jump-to-pop-to-buffer-actions window cider-jump-to uses . If target file visible, reuse it. Otherwise open buffer in current window cider-path-translations nil alist of path prefixes to path prefixes. Example: Map project located at \\\"~/projects/foo\\\" with src directory of foo mounted at \\\"/src\\\" in docker container `((\\\"/src\\\" \\\"~/projects/foo/src\\\")) cider-prefer-local-resources nil Prefer local resources to remote (tramp) ones when both are available cider-doc.el \u03bb\ufe0e Variables Default value Description cider-doc-auto-select-buffer t auto-select the doc popup buffer cider-docview-fill-column fill-column Fill column for docstrings in doc buffer nrepl-client.el \u03bb\ufe0e Variables Default value Description nrepl-connected-hook nil List of functions to call when connecting to the nREPL server. nrepl-disconnected-hook nil List of functions to call when disconnected from the nREPL server. nrepl-force-ssh-for-remote-hosts nil If non-nil, do not attempt a direct connection for remote hosts. nrepl-use-ssh-fallback-for-remote-hosts nil If non-nil, attempt to connect via ssh to remote hosts when unable to connect directly. nrepl-sync-request-timeout 10 The number of seconds to wait for a sync response. Setting this to nil disables the timeout functionality. nrepl-hide-special-buffers nil In buffer switching commands, some special buffers like the server buffer will be hidden nrepl-log-messages nil t log protocol messages to nREPL messages buffer. During debug, allows inspection of communication between Emacs and nREPL server. Logging may impact performance nrepl-message-colors Colors used in the messages buffer. stacktrace \u03bb\ufe0e Variables Default value Description cider-stacktrace-fill-column t Fill column for error messages in stacktrace display. If nil, messages will not be wrapped. If truthy but non-numeric, `fill-column' will be used. cider-stacktrace-default-filters '(tooling dup) Frame types to omit from initial stacktrace display cider-stacktrace-suppressed-errors '() Errors that won't make the stacktrace buffer 'pop-over' your active window. The error types are represented as strings cider-eval.el \u03bb\ufe0e Variables Default value Description cider-show-error-buffer t popup behavior of cider stack traces. 'always , 'except-in-repl , 'only-in-repl , nil no stack trace shown. cider-error-buffer always generated in background cider-auto-jump-to-error t automatically jump to error location. 'errors-only don't jump to warnings cider-auto-select-error-buffer t auto-select the error popup buffer cider-auto-track-ns-form-changes t auto-evaluate ns form of source buffer when changed. nil no evaluation of ns forms cider-auto-inspect-after-eval t auto-update inspector buffer after eval when cider-inspect buffer is visible cider-save-file-on-load 'prompt prompt to save the file when loading a buffer. t save file without confirmation. nil files are not saved. cider-file-loaded-hook nil List of functions to call when a load file has completed cider-interactive-eval-output-destination 'repl-buffer destination for stdout and stderr produced from interactive evaluation cider-comment-prefix \";;=>\" prefix to insert before the first line of commented output cider-comment-continued-prefix \";;\" prefix to use on the second and subsequent lines of commented output cider-comment-postfix \"\" postfix to be appended after the final line of commented output cider-mode.el \u03bb\ufe0e Variables Default value Description cider-mode-line-show-connection t show REPL connection details in modeline cider-mode-line display current connection Mode line lighter to display cider status, nil disables status. variable is a mode line template as in mode-line-format . Info Node (elisp)Mode Line Format for mode line templates. cider-switch-to-repl-after-insert-p t Switch to REPL buffer after inserting form to the REPL cider-switch-to-repl-on-insert t Switch to REPL buffer when inserting form into the REPL cider-invert-insert-eval-p nil nil insert form in REPL buffer, t insert and eval form in REPL buffer cider-dynamic-indentation t Enhance clojure-mode indentation using runtime nformation, eg. \":style/indent\" metadata cider-font-lock-dynamically '(macro core deprecated) Apply syntax highlighting to vars defined in active nREPL connection, in addition to clojure-mode static font-lock. Value is list of symbols: macro any defined macro gets font-lock-keyword-face , function defined function gets the font-lock-function-face , var non-local var gets the font-lock-variable-name-face , deprecated deprecated var gets the cider-deprecated-face , core symbol from clojure.core (face depends on type), t font lock as much as possible cider-font-lock-reader-conditionals t Apply font-locking to unused reader conditional expressions depending on the buffer CIDER connection type cider-use-tooltips t t displays mouse-over tooltips and `help-echo' mechanism cider-connection.el \u03bb\ufe0e Variables Default value Description cider-session-name-template \"%J:%h:%p\" String format for session names - describe cider-format-connection-params for available formats cider-connection-message-fn #'cider-random-words-of-inspiration generate the message displayed on connect - nil no message, cider-random-tip random tip on using CIDER cider-redirect-server-output-to-repl t Should nREPL server output be redirected to the REPL buffer. t output sent to nrepl-server buffer and REPL buffer. n only nrepl-server buffer cider-auto-mode t Should all Clojure buffers be automatically set to cider major mode","title":"Cider configuration variables."},{"location":"reference/cider/configuration-variables/#cider-configuration-variables","text":"The following in non-authoritative list of configuration variables, created by searching for defcustom across the clojure-emacs/cider project. Variables are grouped by the files they are defined in throughout the clojure-emacs/cider project. CIDER Variables can be set via: .dir-locals.el files for project specific configuration (clojure :variables variable-name value) in .spacemacs layers list (setq variable-name value) in dotspacemacs/user-config section of .spacemacs","title":"Cider configuration variables."},{"location":"reference/cider/configuration-variables/#hintclojure-project-configuration","text":"Examples of using .dir-locals.el for Clojure projects are covered in the project level configuration page","title":"Hint::Clojure Project Configuration"},{"location":"reference/cider/configuration-variables/#completion","text":"Variables Default value Description cider-completion-use-context true - use context at point to improve completion suggestions cider-annotate-completion-candidates true - annotate completion candidates cider-annotate-completion-function function to format annotations for completion candidates - takes 2 arguments: abbreviation candidate type ( cider-completion-annotations-alist ) and candidate namespace cider-completion-annotations-alist Annotation abbreviation for completion candidates (TYPE . ABBREVIATION). TYPE is that returned from the completion backend.ABBREVIATION is a short form of that type. cider-completion-annotations-include-ns Pass namespace to cider-annotate-completion-function , 'always passed if namespace is available. 'unqualified only pass namespace if not namespace-qualified.","title":"Completion"},{"location":"reference/cider/configuration-variables/#client","text":"Variables Default value Description cider-eval-spinner-type 'progress-bar Type of evaluation spinner (describe-variable spinner-types) cider-show-eval-spinner t Show evaluation spinner in mode line cider-eval-spinner-delay 1 Time (seconds) elapsed before evaluation spinner shown (default: 1 ) cider-enhanced-cljs-completion-p t Enable dynamic cljs completions. Expressions at point evaluated, resulting value are used to compute completions cider-print-fn nil Pretty print function: 'pprint clojure.pprint, pr clojure.core/pr , fipp fast idiomatic pprint, puget serialised fipp , zprint zprint library, nil defer to REPL cider-print-options nil Options map passed to cider-print-fn , pprint example: '((\\\"length\\\" 50) (\\\"right-margin\\\" 70)) cider-print-quota (* 1024 1024) Hard limit on the number of bytes to return from any printing operation, nil for no limit cider-print-buffer-size (* 4 1024) Chunk size (bytes) for print streaming. Smaller chunks, faster feedback and smaller results (only single chunk result can be font-locked) cider-filtered-namespaces-regexps Filter var/symbol/namespace with list of Clojure regex patters (double backslashes as passed through CIDER middleware)","title":"Client"},{"location":"reference/cider/configuration-variables/#eldoc","text":"Variables Default value Description cider-eldoc-max-num-sexps-to-skip 30 Maximum number of sexps to skip while searching the beginning of current sexp cider-eldoc-ns-function #'identity Function returning a ns string to eldoc. Takes namespace name as argument. Convenience functions: cider-abbreviate-ns , and cider-last-ns-segment cider-eldoc-max-class-names-to-display 3 Maximum number of classes to display in eldoc string (Java interop forms may have several classes), with \"& x more\" suffix. nil - all classes are displayed cider-eldoc-display-for-symbol-at-point t t display eldoc for symbol at point. nil always display eldoc for first symbol of the sexp. cider-eldoc-display-context-dependent-info nil t display context dependent info in the eldoc. CIDER adds expected function arguments based on the current context","title":"eldoc"},{"location":"reference/cider/configuration-variables/#debug","text":"Variables Default value Description cider-debug-prompt 'overlay Position of debug key binding menu. overlay overlay above the current function. minibuffer in minibuffer with return value. t overlay and minibuffer. nil no menu cider-debug-use-overlays t Highlight debug information with overlays. Same values as cider-use-overlays cider-debug-display-locals nil t local variable display during debugging. Toggled with cider-debug-toggle-locals cider-debug-prompt-commands List of debugger command specs in the format (KEY COMMAND-NAME DISPLAY-NAME?). KEY is a character mapped to the command COMMAND-NAME which is a valid debug command to be passed to the cider-nrepl middleware DISPLAY-NAME is the string displayed in the debugger overlay. If DISPLAY-NAME is nil, that command is hidden from the overlay but still callable. The rest of the commands are displayed in the same order as this list.\"","title":"debug"},{"location":"reference/cider/configuration-variables/#overlays","text":"Variables Default value Description cider-result-use-clojure-font-lock t t interactive eval results are font-locked as Clojure code. cider-overlays-use-font-lock t t results overlays are font-locked as Clojure code. nil apply cider-result-overlay-face to the entire overlay instead cider-use-overlays 'both Display evaluation results with overlays. t overlays determined by cider-result-overlay-position . nil display on the echo area. both display on both places. cider-result-overlay-position 'at-eol Display result overlays for inline evaluation and the debugger. If 'at-eol display at the end of the line. 'at-point display at the end of the respective sexp. cider-eval-result-prefix \"=>\" Prefix displayed in minibuffer before a result value cider-eval-result-duration 'command Duration (seconds) of CIDER's eval-result overlays. nil overlays last indefinitely. command overlays erased after the next command. See `cider-use-overlays'. cider-use-fringe-indicators t Display evaluation indicators on the left fringe.","title":"Overlays"},{"location":"reference/cider/configuration-variables/#inspector","text":"Variables Default value Description cider-inspector-page-size 32 Results per page in paginated inspector view, s to interactively change cider-inspector-fill-frame nil t cider inspector window fills its frame cider-inspector-skip-uninteresting t skips values when navigating with `cider-inspector-*-inspectable-object' commands","title":"Inspector"},{"location":"reference/cider/configuration-variables/#repl-history","text":"Variables Default value Description cider-repl-history-display-style 'separated 'separated display cider-repl-history-separator between entries. 'one-line replace newlines with \"\\n\" cider-repl-history-quit-action 'quit-window Action when cider-repl-history-quit called. 'bury-buffer bury cider-repl-history buffer but keep window, 'bury-and-delete-window bury buffer and delete window if more than one window in frame. 'delete-and-restore restore window layout and kill cider-repl-history buffer. 'quit-window restore window layout and bury cider-repl-history . 'kill-and-delete-window kill the cider-repl-history buffer and delete the window on close. cider-repl-history-resize-window nil Resize the cider-repl-history window to fit its contents. t resize window (MAXIMUM . MINIMUM) for the size of the window. MAXIMUM defaults to the window size chosen by pop-to-buffer'; MINIMUM defaults to window-min-height'. cider-repl-history-separator \";;;;;;;;;;\" String separating entries in the separated style. See cider-repl-history-display-style cider-repl-history-recenter nil t always keep current entry at the top of the window cider-repl-history-highlight-current-entry nil t highlight currently selected command history entry cider-repl-history-highlight-inserted-item nil t temporarily highlight inserted command history entry. 'solid highlight inserted text for a fixed period of time. 'pulse fade out the highlight gradually. cider-repl-history-inserted-item-face face used for highlighting. cider-repl-history-separator-face 'bold Face to highlight cider-repl-history-separator cider-repl-history-current-entry-face 'highlight Face to highlight command history current entry cider-repl-history-inserted-item-face 'highlight Face to highlight inserted item cider-repl-history-maximum-display-length nil Limit the length of displayed items. Command history limited to number of characters. nil means no limit cider-repl-history-display-duplicates t t display duplicate items in the command history cider-repl-history-display-duplicate-highest t When cider-repl-history-display-duplicates is nil, display most recent duplicate items in command history cider-repl-history-text-properties nil If non-nil, maintain text properties of the command history items. cider-repl-history-hook nil List of functions to call after `cider-repl-history' cider-repl-history-show-preview nil t show preview of inserted text in REPL buffer using item under point where inserted","title":"REPL history"},{"location":"reference/cider/configuration-variables/#xref","text":"Variables Default value Description cider-xref-actions '((\"display-doc\" . cider-doc-lookup) Actions applied on symbol found by xref search. First action in list selected as default. If only one action function, its applied automatically","title":"xref"},{"location":"reference/cider/configuration-variables/#util","text":"Variables Default value Description cider-font-lock-max-length 10000 Maxiumum length of strings to fontify in cider-font-lock-as . nil removes the fontification restriction cider-doc-xref-regexp Regexp to search Clojure vars in doc buffers cider-jdk-src-paths '(\"/usr/lib/jvm/openjdk-8/src.zip\") Source code used by `cider-stacktrace-navigate'. Zip/jar file or extracted directory (recommended). Clojure sources: https://mvnrepository.com/artifact/org.clojure/clojure","title":"util"},{"location":"reference/cider/configuration-variables/#repl","text":"Variables Default value Description cider-repl-pop-to-buffer-on-connect t Display and Focus REPL buffer on connect. nil REPL buffer is created but not displayed. display-only REPL buffer displayed but not focused. cider-repl-display-in-current-window nil Display REPL buffer in the current window. cider-repl-use-pretty-printing t REPL buffer results pretty-printed. cider-toggle-pretty-printing interactively toggles. Specify printer function in cider-pprint-fn . cider-repl-use-content-types nil REPL results presented using content-type information. cider-repl-toggle-content-types interactively toggles cider-repl-auto-detect-type t Auto-detect REPL type using track-state information. cider-set-repl-type to manually change REPL between Clojure and ClojureScript REPL cider-repl-use-clojure-font-lock t t use Clojure mode font-locking for input and result. nil uses cider-repl-input-face and cider-repl-result-face cider-repl-require-ns-on-set nil Should the namespace be required before setting it in the REPL cider-repl-result-prefix \"\" Display prefix characters in the REPL before a result value, e.g. \"=>\" may make results stand out more cider-repl-tab-command 'cider-repl-indent-and-complete-symbol Command invoked by TAB key. Default option is cider-repl-indent-and-complete-symbol . indent-for-tab-command to use the default Emacs behavior. cider-repl-init-code (list (cdr (assoc 'clj cider-repl-require-repl-utils-code))) Clojure code evaluated when starting a REPL, evaluated with bindings for set! -able vars in place. cider-repl-display-help-banner t t help text will be displayed on REPL start cider-repl-prompt-function #'cider-repl-prompt-default Function takes a namespace name and returns a prompt string. Convenience functions: cider-repl-prompt-lastname , cider-repl-prompt-abbreviated and cider-repl-prompt-default cider-repl-image-margin 10 Margin applied to images in REPL buffer. Single number of pixels as symmetric margin, pair of numbers (x . y) for an arbitrary margin cider-locref-regexp-alist Regular expressions for inline location references. (NAME REGEXP HIGHLIGHT VAR FILE LINE), NAME identifier of the regexp, REGEXP regexp matching a location, HIGHLIGHT sub-expression matching region to highlight on mouse-over, VAR sub-expression giving Clojure VAR to look up. FILE only used when VAR is nil and must be full resource path cider-repl-wrap-history nil t to wrap history when the end is reached cider-repl-history-size 500 Maximum number of items to keep in the REPL history cider-repl-history-file nil File to save the persistent REPL history cider-repl-shortcut-dispatch-char ?\\, Character used to distinguish REPL commands from Lisp forms cider-repl-buffer-size-limit No default Auto-trimming: Remove older output in the REPL buffer once the set size is reached","title":"repl"},{"location":"reference/cider/configuration-variables/#ciderel","text":"Variables Default value Description cider-lein-command Command used to execute Leiningen cider-lein-global-options Command global options used to execute Leiningen (e.g. -o for offline). cider-lein-parameters Params passed to Leiningen to start an nREPL server via cider-jack-in . cider-boot-command Command used to execute Boot cider-boot-global-options Command global options used to execute Boot (e.g. -c for checkouts). cider-boot-parameters Params passed to boot to start an nREPL server via cider-jack-in . cider-clojure-cli-command Command execute Clojure CLI deps.edn. If clojure executable is not found on Windows, default to powershell cider-clojure-cli-global-options Command line options used to execute Clojure CLI - also see cider-clojure-cli-aliases cider-clojure-cli-aliases Aliases to be added to Clojure CLI command (inserted before :cider/nrepl ) cider-clojure-cli-parameters Params to start an nREPL server via cider-jack-in . evaluated using format , with the first argument being the Clojure vector of middleware variables as a string. cider-shadow-cljs-command The command used to execute shadow-cljs. By default we favour the project-specific shadow-cljs over the system-wide. cider-shadow-cljs-global-options Command line options used to execute shadow-cljs (e.g. -v for verbose mode). cider-shadow-cljs-parameters Params passed to shadow-cljs to start an nREPL server via cider-jack-in . cider-gradle-command Command used to execute Gradle. cider-gradle-global-options Command line options used to execute Gradle (e.g.: -m for dry run). cider-gradle-parameters Params passed to gradle to start an nREPL server via cider-jack-in cider-jack-in-default (if (executable-find \"clojure\") 'clojure-cli 'lein) Default tool when cider-jack-in outside a project. The Clojure CLI is is the default. Fallback to Leiningen if Clojure CLI not available cider-preferred-build-tool Unless set, prompt when multiple project configuration files (deps.edn, project.clj, build.boot) cider-allow-jack-in-without-project 'warn 'warn prompt to confirm jack-in command when not in a Clojure project. t cider-jack-in' quietly continues. nil cider-jack-in fails. cider-known-endpoints nil List of connection endpoints for cider-connect eg. '((\\\"label\\\" \\\"host\\\" \\\"port\\\")) (label optional) cider-connected-hook nil List of functions to call when connected to Clojure nREPL server. cider-disconnected-hook nil List of functions to call when disconnected from the Clojure nREPL server cider-inject-dependencies-at-jack-in t nil do not inject REPL dependencies (i.e. nREPL middleware) for cider-jack-in cider-offer-to-open-cljs-app-in-browser t nil do not offer to open ClojureScript apps in a browser on connect cider-jack-in-auto-inject-clojure nil nil Clojure version not injected. latest inject cider-latest-clojure-version , minimal inject cider-minimum-clojure-version \"1.10.3\" explicit version. Using list, first element is artifact ID string, second element is version number cider-check-cljs-repl-requirements t Run requirement checks for the cljs REPLs. (only disable if experiencing a faulty check) cider-custom-cljs-repl-init-form nil Form to start custom ClojureScript REPL (becomes return value of cider-custom-cljs-repl-init-form function which prompts for init form). Use with .dir-locals.el where it doesn't make sense to register a new ClojureScript REPL type cider-default-cljs-repl nil ClojureScript REPL to start for cljs jack-in commands ( .dir-locals.el approach recommended) cider-edit-jack-in-command nil t allow the user to edit the cider-jack-in-* command line cider-infer-remote-nrepl-ports nil t cider will use ssh to try to infer nREPL ports on remote hosts","title":"cider.el"},{"location":"reference/cider/configuration-variables/#apropos","text":"Variables Default value Description cider-apropos-actions '((\"display-doc\" . cider-doc-lookup) Controls the actions to be applied on the symbol found by an apropos search","title":"apropos"},{"location":"reference/cider/configuration-variables/#scratch","text":"Variables Default value Description cider-scratch-initial-message Initial message displayed in new scratch buffers","title":"scratch"},{"location":"reference/cider/configuration-variables/#ns","text":"Variables Default value Description cider-ns-save-files-on-refresh 'prompt 'prompt user prompt to save modified files before refreshing. nil files not saved. t save modified files without confirmation. cider-ns-save-files-on-refresh-modes '(clojure-mode) List of modes to determine which modified files are saved before refreshing. A major mode derived from list of the modes. t all modified files on the classpath are saved. cider-ns-refresh-show-log-buffer nil nil log buffer will be written to but not displayed automatically (relevant info shown in mini-buffer t log buffer will be displayed every time cider-ns-refresh is called. cider-ns-refresh-before-fn nil Clojure namespace-qualified function of zero arity called by cider-ns-refresh before reloading. nil no function called before reloading. Any thrown exception will prevent reloading. cider-ns-refresh-after-fn nil Clojure namespace-qualified function of zero arity for cider-ns-refresh to call after reloading. nil no function invoked after reloading.","title":"ns"},{"location":"reference/cider/configuration-variables/#macroexpansion","text":"Variables Default value Description cider-macroexpansion-display-namespaces tidy Should full namespace be shown for vars in macroexpansion buffer 'tidy not shown for locally defined or referred vars, 'qualified fully qualified vars shown, 'none no namespace qualification cider-macroexpansion-print-metadata nil t include metadata in macroexpansion results","title":"macroexpansion"},{"location":"reference/cider/configuration-variables/#test","text":"Variables Default value Description cider-test-show-report-on-success nil Show *cider-test-report* buffer for successful tests, nil only generates report when tests fail and subsequent test runs cider-auto-select-test-report-buffer t Should *cider-test-report* buffer be active window when it appears cider-test-defining-forms '(\"deftest\" \"defspec\") Forms that define top level of individual unit tests cider-test-infer-test-ns 'cider-test-default-test-ns-fn infer test namespace. Defaults to -test postfix on the namespace name","title":"test"},{"location":"reference/cider/configuration-variables/#common","text":"Variables Default value Description cider-prompt-for-symbol t always prompt, use symbol at point as default. nil use symbol at point, prompt if error. cider-special-mode-truncate-lines t CIDER special buffers are line-truncated cider-jump-to-pop-to-buffer-actions window cider-jump-to uses . If target file visible, reuse it. Otherwise open buffer in current window cider-path-translations nil alist of path prefixes to path prefixes. Example: Map project located at \\\"~/projects/foo\\\" with src directory of foo mounted at \\\"/src\\\" in docker container `((\\\"/src\\\" \\\"~/projects/foo/src\\\")) cider-prefer-local-resources nil Prefer local resources to remote (tramp) ones when both are available","title":"common"},{"location":"reference/cider/configuration-variables/#cider-docel","text":"Variables Default value Description cider-doc-auto-select-buffer t auto-select the doc popup buffer cider-docview-fill-column fill-column Fill column for docstrings in doc buffer","title":"cider-doc.el"},{"location":"reference/cider/configuration-variables/#nrepl-clientel","text":"Variables Default value Description nrepl-connected-hook nil List of functions to call when connecting to the nREPL server. nrepl-disconnected-hook nil List of functions to call when disconnected from the nREPL server. nrepl-force-ssh-for-remote-hosts nil If non-nil, do not attempt a direct connection for remote hosts. nrepl-use-ssh-fallback-for-remote-hosts nil If non-nil, attempt to connect via ssh to remote hosts when unable to connect directly. nrepl-sync-request-timeout 10 The number of seconds to wait for a sync response. Setting this to nil disables the timeout functionality. nrepl-hide-special-buffers nil In buffer switching commands, some special buffers like the server buffer will be hidden nrepl-log-messages nil t log protocol messages to nREPL messages buffer. During debug, allows inspection of communication between Emacs and nREPL server. Logging may impact performance nrepl-message-colors Colors used in the messages buffer.","title":"nrepl-client.el"},{"location":"reference/cider/configuration-variables/#stacktrace","text":"Variables Default value Description cider-stacktrace-fill-column t Fill column for error messages in stacktrace display. If nil, messages will not be wrapped. If truthy but non-numeric, `fill-column' will be used. cider-stacktrace-default-filters '(tooling dup) Frame types to omit from initial stacktrace display cider-stacktrace-suppressed-errors '() Errors that won't make the stacktrace buffer 'pop-over' your active window. The error types are represented as strings","title":"stacktrace"},{"location":"reference/cider/configuration-variables/#cider-evalel","text":"Variables Default value Description cider-show-error-buffer t popup behavior of cider stack traces. 'always , 'except-in-repl , 'only-in-repl , nil no stack trace shown. cider-error-buffer always generated in background cider-auto-jump-to-error t automatically jump to error location. 'errors-only don't jump to warnings cider-auto-select-error-buffer t auto-select the error popup buffer cider-auto-track-ns-form-changes t auto-evaluate ns form of source buffer when changed. nil no evaluation of ns forms cider-auto-inspect-after-eval t auto-update inspector buffer after eval when cider-inspect buffer is visible cider-save-file-on-load 'prompt prompt to save the file when loading a buffer. t save file without confirmation. nil files are not saved. cider-file-loaded-hook nil List of functions to call when a load file has completed cider-interactive-eval-output-destination 'repl-buffer destination for stdout and stderr produced from interactive evaluation cider-comment-prefix \";;=>\" prefix to insert before the first line of commented output cider-comment-continued-prefix \";;\" prefix to use on the second and subsequent lines of commented output cider-comment-postfix \"\" postfix to be appended after the final line of commented output","title":"cider-eval.el"},{"location":"reference/cider/configuration-variables/#cider-modeel","text":"Variables Default value Description cider-mode-line-show-connection t show REPL connection details in modeline cider-mode-line display current connection Mode line lighter to display cider status, nil disables status. variable is a mode line template as in mode-line-format . Info Node (elisp)Mode Line Format for mode line templates. cider-switch-to-repl-after-insert-p t Switch to REPL buffer after inserting form to the REPL cider-switch-to-repl-on-insert t Switch to REPL buffer when inserting form into the REPL cider-invert-insert-eval-p nil nil insert form in REPL buffer, t insert and eval form in REPL buffer cider-dynamic-indentation t Enhance clojure-mode indentation using runtime nformation, eg. \":style/indent\" metadata cider-font-lock-dynamically '(macro core deprecated) Apply syntax highlighting to vars defined in active nREPL connection, in addition to clojure-mode static font-lock. Value is list of symbols: macro any defined macro gets font-lock-keyword-face , function defined function gets the font-lock-function-face , var non-local var gets the font-lock-variable-name-face , deprecated deprecated var gets the cider-deprecated-face , core symbol from clojure.core (face depends on type), t font lock as much as possible cider-font-lock-reader-conditionals t Apply font-locking to unused reader conditional expressions depending on the buffer CIDER connection type cider-use-tooltips t t displays mouse-over tooltips and `help-echo' mechanism","title":"cider-mode.el"},{"location":"reference/cider/configuration-variables/#cider-connectionel","text":"Variables Default value Description cider-session-name-template \"%J:%h:%p\" String format for session names - describe cider-format-connection-params for available formats cider-connection-message-fn #'cider-random-words-of-inspiration generate the message displayed on connect - nil no message, cider-random-tip random tip on using CIDER cider-redirect-server-output-to-repl t Should nREPL server output be redirected to the REPL buffer. t output sent to nrepl-server buffer and REPL buffer. n only nrepl-server buffer cider-auto-mode t Should all Clojure buffers be automatically set to cider major mode","title":"cider-connection.el"},{"location":"reference/clojure/","text":"Clojure Reference \u03bb\ufe0e Clojure Syntax Example code idioms patterns (reducing functions, etc.) TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome","title":"Clojure Reference"},{"location":"reference/clojure/#clojure-reference","text":"Clojure Syntax Example code idioms patterns (reducing functions, etc.)","title":"Clojure Reference"},{"location":"reference/clojure/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"reference/clojure/control-flow/","text":"Control flow \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome","title":"Control flow"},{"location":"reference/clojure/control-flow/#control-flow","text":"","title":"Control flow"},{"location":"reference/clojure/control-flow/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"reference/clojure/data-structures/","text":"Data Structures \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome","title":"Data Structures"},{"location":"reference/clojure/data-structures/#data-structures","text":"","title":"Data Structures"},{"location":"reference/clojure/data-structures/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"reference/clojure/functions/","text":"Functions \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome","title":"Functions"},{"location":"reference/clojure/functions/#functions","text":"","title":"Functions"},{"location":"reference/clojure/functions/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"reference/clojure/maths/","text":"Maths \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome","title":"Maths"},{"location":"reference/clojure/maths/#maths","text":"","title":"Maths"},{"location":"reference/clojure/maths/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"reference/clojure/strings/","text":"Strings \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome","title":"Strings"},{"location":"reference/clojure/strings/#strings","text":"","title":"Strings"},{"location":"reference/clojure/strings/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"reference/clojure-lsp/","text":"Clojure LSP reference \u03bb\ufe0e LSP layer Variables and default values","title":"Clojure LSP reference"},{"location":"reference/clojure-lsp/#clojure-lsp-reference","text":"LSP layer Variables and default values","title":"Clojure LSP reference"},{"location":"reference/clojure-lsp/lsp-variables-reference/","text":"Reference: Variables of the LSP layer \u03bb\ufe0e A quick reference of the main variables that can be set in the Spacemacs LSP layer configuration LSP-mode \u03bb\ufe0e Variable default description lsp-enable-snippet t Enable LSP server built-in snippets and custom snippets lsp-enable-folding t lsp-semantic-tokens-enable nil lsp-enable-file-watchers t lsp-enable-links t lsp-enable-imenu t lsp-enable-dap-auto-configure t lsp-eldoc-enable-hover t lsp-completion-enable t Autocompletion pop-up lsp-enable-symbol-highlighting t Highlight matching symbol names in current buffer lsp-enable-xref t lsp-enable-indentation t Disable to use Clojure-mode (CIDER) formatting lsp-enable-on-type-formatting t Disable to use Clojure-mode (CIDER) formatting lsp-enable-text-document-color t lsp-modeline-code-actions-enable t lsp-modeline-diagnostics-enable t Show LSP error/warning count in modeline lsp-modeline-diagnostics-scope :workspace Diagnostics relevant to the current project only lsp-modeline-workspace-status-enable t lsp-headerline-breadcrumb-enable t lsp-lens-enable t lsp-enable-suggest-server-download t lsp-file-watch-threshold 1000 Maximum number of files to watch in a project lsp-log-io nil log all messages from language server to lsp-log buffer Related toggles \u03bb\ufe0e SPC SPC lsp-toggle-symbol-highlight toggles highlighting Symbol Highlight face Subtle highlighting color for doom-gruvbox-light theme is defined in dotspacemacs/user-init of practicalli/spacemacs.d LSP UI \u03bb\ufe0e variable default description lsp-ui-sideline-enable t Show sideline bar lsp-ui-doc-enable t disable all doc popups lsp-ui-doc-show-with-cursor nil doc popup for cursor lsp-ui-doc-show-with-mouse nil doc popup for mouse lsp-ui-doc-delay 2 delay in seconds for popup to display lsp-ui-doc-include-signature t include function signature lsp-ui-doc-position 'at-point top bottom at-point lsp-ui-doc-alignment 'window Position of doc popup - 'frame or 'window lsp-enable-text-document-color t Font lock text in doc popup lsp-lens-enable t display function call and unit test count next to function name Disable Sideline bar Practicalli recommends disabling the sideline bar to minimise distractions Add lsp-ui-sideline-enable nil to the lsp layer :variables in the Spacemacs configuration References \u03bb\ufe0e Configure Emacs as a Clojure IDE guide A guide on disabling/enabling lsp-mode features Emacs LSP UI website and emacs-lsp/lsp-ui repository","title":"LSP Variables"},{"location":"reference/clojure-lsp/lsp-variables-reference/#reference-variables-of-the-lsp-layer","text":"A quick reference of the main variables that can be set in the Spacemacs LSP layer configuration","title":"Reference: Variables of the LSP layer"},{"location":"reference/clojure-lsp/lsp-variables-reference/#lsp-mode","text":"Variable default description lsp-enable-snippet t Enable LSP server built-in snippets and custom snippets lsp-enable-folding t lsp-semantic-tokens-enable nil lsp-enable-file-watchers t lsp-enable-links t lsp-enable-imenu t lsp-enable-dap-auto-configure t lsp-eldoc-enable-hover t lsp-completion-enable t Autocompletion pop-up lsp-enable-symbol-highlighting t Highlight matching symbol names in current buffer lsp-enable-xref t lsp-enable-indentation t Disable to use Clojure-mode (CIDER) formatting lsp-enable-on-type-formatting t Disable to use Clojure-mode (CIDER) formatting lsp-enable-text-document-color t lsp-modeline-code-actions-enable t lsp-modeline-diagnostics-enable t Show LSP error/warning count in modeline lsp-modeline-diagnostics-scope :workspace Diagnostics relevant to the current project only lsp-modeline-workspace-status-enable t lsp-headerline-breadcrumb-enable t lsp-lens-enable t lsp-enable-suggest-server-download t lsp-file-watch-threshold 1000 Maximum number of files to watch in a project lsp-log-io nil log all messages from language server to lsp-log buffer","title":"LSP-mode"},{"location":"reference/clojure-lsp/lsp-variables-reference/#related-toggles","text":"SPC SPC lsp-toggle-symbol-highlight toggles highlighting Symbol Highlight face Subtle highlighting color for doom-gruvbox-light theme is defined in dotspacemacs/user-init of practicalli/spacemacs.d","title":"Related toggles"},{"location":"reference/clojure-lsp/lsp-variables-reference/#lsp-ui","text":"variable default description lsp-ui-sideline-enable t Show sideline bar lsp-ui-doc-enable t disable all doc popups lsp-ui-doc-show-with-cursor nil doc popup for cursor lsp-ui-doc-show-with-mouse nil doc popup for mouse lsp-ui-doc-delay 2 delay in seconds for popup to display lsp-ui-doc-include-signature t include function signature lsp-ui-doc-position 'at-point top bottom at-point lsp-ui-doc-alignment 'window Position of doc popup - 'frame or 'window lsp-enable-text-document-color t Font lock text in doc popup lsp-lens-enable t display function call and unit test count next to function name Disable Sideline bar Practicalli recommends disabling the sideline bar to minimise distractions Add lsp-ui-sideline-enable nil to the lsp layer :variables in the Spacemacs configuration","title":"LSP UI"},{"location":"reference/clojure-lsp/lsp-variables-reference/#references","text":"Configure Emacs as a Clojure IDE guide A guide on disabling/enabling lsp-mode features Emacs LSP UI website and emacs-lsp/lsp-ui repository","title":"References"},{"location":"reference/keybindings/","text":"Reference: Keybindings \u03bb\ufe0e Useful Spacemacs commands \u03bb\ufe0e SPC q q - quit SPC w / - split window vertically SPC w - - split window horizontally SPC 1 - switch to window 1 SPC 2 - switch to window 2 SPC w d - delete current window SPC TAB - switch to previous buffer SPC b b - switch buffers SPC f f - find a file SPC f s - save a file (:w also works) SPC p p - open project SPC p h - find a file in current project SPC b d - delete current buffer SPC b M - move buffer to another window SPC v - enter expand-region mode","title":"Reference: Keybindings"},{"location":"reference/keybindings/#reference-keybindings","text":"","title":"Reference: Keybindings"},{"location":"reference/keybindings/#useful-spacemacs-commands","text":"SPC q q - quit SPC w / - split window vertically SPC w - - split window horizontally SPC 1 - switch to window 1 SPC 2 - switch to window 2 SPC w d - delete current window SPC TAB - switch to previous buffer SPC b b - switch buffers SPC f f - find a file SPC f s - save a file (:w also works) SPC p p - open project SPC p h - find a file in current project SPC b d - delete current buffer SPC b M - move buffer to another window SPC v - enter expand-region mode","title":"Useful Spacemacs commands"},{"location":"reference/keybindings/cider-keybindings/","text":"Common CIDER default keybindings for Emacs \u03bb\ufe0e There are a number of Cider keyboard shortcuts (keybindings) already defined that also work alongside the Spacemacs keybindings. Hint::CIDER keybindings have more cognitive load \u03bb\ufe0e It is this authors opinion that the CIDER keybindings are harder to learn than the mnemonic keybindings of Spacemacs. C-c C-e - evaluates the previous form to the current position of the cursor and shows the result in the minibuffer and inline with the code (until you move the cursor away). So place your cursor after the closing parentheses ) of your expression or on the next line and hit the keybinding and see the result. C-c M-; - evaluates previous form and prints the result as a comment on the following line. The keybinding M-; is a universal comment in all modes. With C-c as a prefix it evaluate the previous function before creating a comment of the return value. C-c M-e - the same as above except the result is sent to the REPL C-c C-k - evaluate the whole buffer. So with the cursor in a Clojure source file, all the forms / expressions are evaluate as if the code was loaded in from scratch. C-c C-d d - show the documentation as you would with (doc function-name) . Place the cursor over a function name, hit the keybinding and see the documentation for that function. This also works inside the REPL buffer, so no need to use (doc) , which is not loaded by default. C-c M-n - switch to namespace of current Clojure buffer. So with the cursor in a Clojure source file, hit the keybinding and your REPL buffer will now be in the namespace for that Clojure code. Changing into a namespace does not automatically evaluate the code in that namespace, so evaluate the whole buffer C-c C-k or evaluate specific expressions (forms) C-c M-e . Once evaluated, you can evaluate that code in the REPL. M-> or M-x cider-jump-to-var prompts you for a var, a function (defn) or symbol name (def) and moves the cursor to its definition. If the cursor is already on a matching name the the cursor jumps straight to that definition. C-c C-q or M-x cider-quit - close the REPL and its associated buffer. There are many more things you can do within Clojure files and the REPL, so take a look at the Cider keyboard shortcuts (keybindings) once you have the basics mastered.","title":"Common CIDER default keybindings for Emacs"},{"location":"reference/keybindings/cider-keybindings/#common-cider-default-keybindings-for-emacs","text":"There are a number of Cider keyboard shortcuts (keybindings) already defined that also work alongside the Spacemacs keybindings.","title":"Common CIDER default keybindings for Emacs"},{"location":"reference/keybindings/cider-keybindings/#hintcider-keybindings-have-more-cognitive-load","text":"It is this authors opinion that the CIDER keybindings are harder to learn than the mnemonic keybindings of Spacemacs. C-c C-e - evaluates the previous form to the current position of the cursor and shows the result in the minibuffer and inline with the code (until you move the cursor away). So place your cursor after the closing parentheses ) of your expression or on the next line and hit the keybinding and see the result. C-c M-; - evaluates previous form and prints the result as a comment on the following line. The keybinding M-; is a universal comment in all modes. With C-c as a prefix it evaluate the previous function before creating a comment of the return value. C-c M-e - the same as above except the result is sent to the REPL C-c C-k - evaluate the whole buffer. So with the cursor in a Clojure source file, all the forms / expressions are evaluate as if the code was loaded in from scratch. C-c C-d d - show the documentation as you would with (doc function-name) . Place the cursor over a function name, hit the keybinding and see the documentation for that function. This also works inside the REPL buffer, so no need to use (doc) , which is not loaded by default. C-c M-n - switch to namespace of current Clojure buffer. So with the cursor in a Clojure source file, hit the keybinding and your REPL buffer will now be in the namespace for that Clojure code. Changing into a namespace does not automatically evaluate the code in that namespace, so evaluate the whole buffer C-c C-k or evaluate specific expressions (forms) C-c M-e . Once evaluated, you can evaluate that code in the REPL. M-> or M-x cider-jump-to-var prompts you for a var, a function (defn) or symbol name (def) and moves the cursor to its definition. If the cursor is already on a matching name the the cursor jumps straight to that definition. C-c C-q or M-x cider-quit - close the REPL and its associated buffer. There are many more things you can do within Clojure files and the REPL, so take a look at the Cider keyboard shortcuts (keybindings) once you have the basics mastered.","title":"Hint::CIDER keybindings have more cognitive load"},{"location":"reference/keybindings/vim-keybindings/","text":"Useful Vim key bindings \u03bb\ufe0e movement \u03bb\ufe0e 0 - beginning of line ^ - beginning of non-whitespace $ - end of line 9j - move down 9 lines w - move forward by word b - move backward by word gg - first line G - last line C-u - up half page C-d - down half page f/ - move forward to first \"/\" character t/ - move forward right before the first \"/\" character ; - repeat that command again H - head of the screen M - middle of the screen L - last of the screen } - move forward by paragraph or block { - move backwards by paragraph or block * - search for word under the cursor n - search again forward N - search again backwards # - search backwards for word under cursor / - search forward ? - search backward % - find matching brace, paren, etc ma - mark a line in a file with marker \"a\" `a - after moving around, go back to the exact position of marker \"a\" 'a - after moving around, go back to line of marker \"a\" :marks - view all the marks '' - go to the last place you were [{ - jump back to the \"{\" at the beginning of the current code block editing \u03bb\ufe0e x - delete char under cursor X - delete char before cursor A - add to end of line I - insert at the beginning of the line dd - delete line D - delete from cursor to end of line di' - delete text inside single quotes yy - copy line Y - copy from cursor to end of line cc - change line C - change from cursor to end of line cit - change text inside html tag ci' - change text inside single quotes ci{ - change text inside curly brackets. ci... - etc p - paste after cursor P = paste before cursor o - add line below O - add line above . = repeat last comment r - replace character R - replace. (overwrite) (good for columns of text) J - join line (cursor can be anywhere on line) visual mode \u03bb\ufe0e v - visual char mode V - visual line mode C-v - block visual mode v - visual char mode V - visual line mode C-v - block visual mode","title":"Useful Vim key bindings"},{"location":"reference/keybindings/vim-keybindings/#useful-vim-key-bindings","text":"","title":"Useful Vim key bindings"},{"location":"reference/keybindings/vim-keybindings/#movement","text":"0 - beginning of line ^ - beginning of non-whitespace $ - end of line 9j - move down 9 lines w - move forward by word b - move backward by word gg - first line G - last line C-u - up half page C-d - down half page f/ - move forward to first \"/\" character t/ - move forward right before the first \"/\" character ; - repeat that command again H - head of the screen M - middle of the screen L - last of the screen } - move forward by paragraph or block { - move backwards by paragraph or block * - search for word under the cursor n - search again forward N - search again backwards # - search backwards for word under cursor / - search forward ? - search backward % - find matching brace, paren, etc ma - mark a line in a file with marker \"a\" `a - after moving around, go back to the exact position of marker \"a\" 'a - after moving around, go back to line of marker \"a\" :marks - view all the marks '' - go to the last place you were [{ - jump back to the \"{\" at the beginning of the current code block","title":"movement"},{"location":"reference/keybindings/vim-keybindings/#editing","text":"x - delete char under cursor X - delete char before cursor A - add to end of line I - insert at the beginning of the line dd - delete line D - delete from cursor to end of line di' - delete text inside single quotes yy - copy line Y - copy from cursor to end of line cc - change line C - change from cursor to end of line cit - change text inside html tag ci' - change text inside single quotes ci{ - change text inside curly brackets. ci... - etc p - paste after cursor P = paste before cursor o - add line below O - add line above . = repeat last comment r - replace character R - replace. (overwrite) (good for columns of text) J - join line (cursor can be anywhere on line)","title":"editing"},{"location":"reference/keybindings/vim-keybindings/#visual-mode","text":"v - visual char mode V - visual line mode C-v - block visual mode v - visual char mode V - visual line mode C-v - block visual mode","title":"visual mode"},{"location":"reference/structural-editing/smartparens-cheatsheet/","text":"Smartparens cheatsheet \u03bb\ufe0e SPC SPC sp-cheat-sheet lists all the smartparens commands available Hint::Animated cheatsheet \u03bb\ufe0e Animated Smartparens cheatsheet - update to use Spacemacs keybindings TODO::Break out common commands into their own sections with examples \u03bb\ufe0e (sp-cheat-sheet &optional ARG) Generate a cheat sheet of all the smartparens interactive functions. Without a prefix argument, print only the short documentation and examples. With non-nil prefix argument ARG, show the full documentation for each function. You can follow the links to the function or variable help page. To get back to the full list, use [. You can use \u2018beginning-of-defun\u2019 and \u2018end-of-defun\u2019 to jump to the previous/next entry. Examples are fontified using the \u2018font-lock-string-face\u2019 for better orientation. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (sp-describe-system) Describe user\u2019s system. The output of this function can be used in bug reports. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (smartparens-strict-mode &optional ARG) Toggle the strict smartparens mode. When strict mode is active, \u2018delete-char\u2019, \u2018kill-word\u2019 and their backward variants will skip over the pair delimiters in order to keep the structure always valid (the same way as \u2018paredit-mode\u2019 does). This is accomplished by remapping them to \u2018sp-delete-char\u2019 and \u2018sp-kill-word\u2019. There is also function \u2018sp-kill-symbol\u2019 that deletes symbols instead of words, otherwise working exactly the same (it is not bound to any key by default). When strict mode is active, this is indicated with \"/s\" after the smartparens indicator in the mode list. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (smartparens-global-strict-mode &optional ARG) Toggle Smartparens-Strict mode in all buffers. With prefix ARG, enable Smartparens-Global-Strict mode if ARG is positive; otherwise, disable it. If called from Lisp, enable the mode if ARG is omitted or nil. Smartparens-Strict mode is enabled in all buffers where \u2018turn-on-smartparens-strict-mode\u2019 would do it. See \u2018smartparens-strict-mode\u2019 for more information on Smartparens-Strict mode. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (turn-on-smartparens-strict-mode) Turn on \u2018smartparens-strict-mode\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (turn-off-smartparens-strict-mode) Turn off \u2018smartparens-strict-mode\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-tag-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-tag-object &optional ARG) Read the command and invoke it on the next tag object. If you specify a regular emacs prefix argument this is passed to the executed command. Therefore, executing \"SPC u 2 M-x sp-prefix-tag-object M-x sp-forward-sexp\" will move two tag expressions forward, ignoring possible symbols or paired expressions in between. Tag object is anything delimited by sgml tag. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-pair-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-pair-object &optional ARG) Read the command and invoke it on the next pair object. If you specify a regular emacs prefix argument this is passed to the executed command. Therefore, executing \"SPC u 2 M-x sp-prefix-pair-object M-x sp-forward-sexp\" will move two paired expressions forward, ignoring possible symbols in between. Pair object is anything delimited by pairs from \u2018sp-pair-list\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-symbol-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-symbol-object &optional ARG) Read the command and invoke it on the next pair object. If you specify a regular emacs prefix argument this is passed to the executed command. Therefore, executing \"SPC u 2 M-x sp-prefix-symbol-object M-x sp-forward-sexp\" will move two symbols forward, ignoring any structure. Symbol is defined as a chunk of text recognized by \u2018sp-forward-symbol\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-save-excursion is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-save-excursion &optional ARG) Execute the command keeping the point fixed. If you specify a regular emacs prefix argument this is passed to the executed command. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-narrow-to-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-narrow-to-sexp ARG) Make text outside current balanced expression invisible. A numeric arg specifies to move up by that many enclosing expressions. See also \u2018narrow-to-region\u2019 and \u2018narrow-to-defun\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-sexp &optional ARG) |(foo bar baz) -> (foo bar baz)| (|foo bar baz) -> (foo| bar baz) (|foo bar baz) -> (foo bar| baz) ;; 2 (foo (bar baz|)) -> (foo (bar baz)|) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-sexp &optional ARG) (foo bar baz)| -> |(foo bar baz) (foo| bar baz) -> (|foo bar baz) (foo bar| baz) -> (|foo bar baz) ;; 2 (|(foo bar) baz) -> ((|foo bar) baz) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-next-sexp &optional ARG) ((foo) |bar (baz quux)) -> ((foo) bar |(baz quux)) ((foo) bar |(baz quux)) -> |((foo) bar (baz quux)) and with non-nil \u2018sp-navigate-interactive-always-progress-point\u2019 (f|oo bar) -> (foo |bar) ((fo|o) (bar)) -> ((foo) |(bar)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-previous-sexp &optional ARG) ((foo) bar| (baz quux)) -> ((foo)| bar (baz quux)) ((foo)| bar (baz quux)) -> ((foo) bar (baz quux))| and if \u2018sp-navigate-interactive-always-progress-point\u2019 is non-nil (foo b|ar baz) -> (foo| bar baz) (foo (b|ar baz)) -> (foo| (bar baz)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-parallel-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-parallel-sexp &optional ARG) Move forward across one balanced expressions at the same depth. If calling \u2018sp-forward-sexp\u2019 at point would result in raising a level up, loop back to the first expression at current level, that is the first child of the enclosing sexp as defined by \u2018sp-get-enclosing-sexp\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-parallel-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-parallel-sexp &optional ARG) Move backward across one balanced expressions at the same depth. If calling \u2018sp-backward-sexp\u2019 at point would result in raising a level up, loop back to the last expression at current level, that is the last child of the enclosing sexp as defined by \u2018sp-get-enclosing-sexp\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-down-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-down-sexp &optional ARG) |foo (bar (baz quux)) -> foo (|bar (baz quux)) |foo (bar (baz quux)) -> foo (bar (|baz quux)) ;; 2 |foo (bar (baz (quux) blab)) -> foo (bar (baz (|quux) blab)) ;; SPC u (foo (bar baz) |quux) -> (|foo (bar baz) quux) (blab foo |(bar baz) quux) -> (|blab foo (bar baz) quux) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-down-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-down-sexp &optional ARG) foo (bar (baz quux))| -> foo (bar (baz quux)|) (bar (baz quux)) foo| -> (bar (baz quux|)) foo ;; 2 foo (bar (baz (quux) blab))| -> foo (bar (baz (quux|) blab)) ;; SPC u (foo| (bar baz) quux) -> (foo (bar baz) quux|) (foo (bar baz) |quux blab) -> (foo (bar baz) quux blab|) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-beginning-of-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-beginning-of-sexp &optional ARG) (foo (bar baz) quux| (blab glob)) -> (|foo (bar baz) quux (blab glob)) (foo (bar baz|) quux (blab glob)) -> (foo (|bar baz) quux (blab glob)) (|foo) (bar) (baz quux) -> (foo) (bar) (|baz quux) ;; 3 (foo bar) (baz) (quux|) -> (|foo bar) (baz) (quux) ;; -3 ((foo bar) (baz |quux) blab) -> (|(foo bar) (baz quux) blab) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-end-of-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-end-of-sexp &optional ARG) (foo |(bar baz) quux (blab glob)) -> (foo (bar baz) quux (blab glob)|) (foo (|bar baz) quux (blab glob)) -> (foo (bar baz|) quux (blab glob)) (|foo) (bar) (baz quux) -> (foo) (bar) (baz quux|) ;; 3 (foo bar) (baz) (quux|) -> (foo bar|) (baz) (quux) ;; -3 ((foo |bar) (baz quux) blab) -> ((foo bar) (baz quux) blab|) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-beginning-of-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-beginning-of-next-sexp &optional ARG) (f|oo) (bar) (baz) -> (foo) (|bar) (baz) (f|oo) (bar) (baz) -> (foo) (bar) (|baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-beginning-of-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-beginning-of-previous-sexp &optional ARG) (foo) (b|ar) (baz) -> (|foo) (bar) (baz) (foo) (bar) (b|az) -> (|foo) (bar) (baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-end-of-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-end-of-next-sexp &optional ARG) (f|oo) (bar) (baz) -> (foo) (bar|) (baz) (f|oo) (bar) (baz) -> (foo) (bar) (baz|) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-end-of-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-end-of-previous-sexp &optional ARG) (foo) (b|ar) (baz) -> (foo|) (bar) (baz) (foo) (bar) (b|az) -> (foo|) (bar) (baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-up-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-up-sexp &optional ARG INTERACTIVE) (foo |(bar baz) quux blab) -> (foo (bar baz) quux blab)| (foo (bar |baz) quux blab) -> (foo (bar baz) quux blab)| ;; 2 (foo bar |baz -> (foo bar baz)| ;; re-indent the expression \u200b ) (foo |(bar baz) -> (foo)| (bar baz) ;; close unbalanced expr. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-up-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-up-sexp &optional ARG INTERACTIVE) (foo (bar baz) quux| blab) -> |(foo (bar baz) quux blab) (foo (bar |baz) quux blab) -> |(foo (bar baz) quux blab) ;; 2 ( -> |(foo bar baz) \u200b foo |bar baz) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp--kill-or-copy-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp--kill-or-copy-region BEG END &optional DONT-KILL) Kill or copy region between BEG and END according to DONT-KILL. If \u2018evil-mode\u2019 is active, copying a region will also add it to the 0 register. Additionally, if command was prefixed with a register, copy the region to that register. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-sexp &optional ARG DONT-KILL) (foo |(abc) bar) -> (foo | bar) ;; nil, defaults to 1 (foo (bar) | baz) -> | ;; 2 (foo |(bar) baz) -> | ;; SPC u SPC u (1 |2 3 4 5 6) -> (1|) ;; SPC u (1 |2 3 4 5 6) -> (1 | 5 6) ;; 3 (1 2 3 4 5| 6) -> (1 2 3 | 6) ;; -2 (1 2 3 4| 5 6) -> (|5 6) ;; - SPC u (1 2 | ) -> (1 2|) ;; SPC u, kill useless whitespace (1 2 3 |4 5 6) -> (|) ;; 0 Note: prefix argument is shown after the example in \"comment\". Assumes \u2018sp-navigate-consider-symbols\u2019 equal to t. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-kill-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-kill-sexp &optional ARG DONT-KILL) (foo (abc)| bar) -> (foo | bar) blab (foo (bar baz) quux)| -> blab | (1 2 3 |4 5 6) -> (|4 5 6) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-copy-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-copy-sexp &optional ARG) Copy the following ARG expressions to the kill-ring. This is exactly like calling \u2018sp-kill-sexp\u2019 with second argument t. All the special prefix arguments work the same way. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-copy-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-copy-sexp &optional ARG) Copy the previous ARG expressions to the kill-ring. This is exactly like calling \u2018sp-backward-kill-sexp\u2019 with second argument t. All the special prefix arguments work the same way. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-clone-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-clone-sexp) Clone sexp after or around point. If the form immediately after point is a sexp, clone it below the current one and put the point in front of it. Otherwise get the enclosing sexp and clone it below the current enclosing sexp. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-hybrid-sexp ARG) foo | bar baz -> foo | ;; nil foo (bar | baz) quux -> foo (bar |) quux ;; nil foo | bar (baz -> foo | ;; nil quux) foo \"bar |baz quux\" quack -> foo \"bar |\" quack ;; nil foo (bar baz) qu|ux (quack -> foo | hoo ;; SPC u SPC u zaq) hoo foo | (bar -> foo | ;; C-0 baz) baz) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-whole-line is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-whole-line) (progn (progn (some |long sexp)) -> |) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-transpose-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-transpose-sexp &optional ARG) foo |bar baz -> bar foo| baz foo |bar baz -> bar baz foo| ;; 2 (foo) |(bar baz) -> (bar baz) (foo)| (foo bar) -> (baz quux) ;; keeps the formatting \u200b |(baz quux) |(foo bar) foo bar baz| -> foo baz| bar ;; -1 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-transpose-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-transpose-hybrid-sexp &optional ARG) foo bar baz (quux |baz (quux -> quack) quack) foo bar\\n| [(foo) (bar) -> [(baz) |(baz)] (foo) (bar)|] foo bar baz -> quux flux |quux flux foo bar baz\\n| \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-push-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-push-hybrid-sexp) |x = big_function_call(a, |(a, b) b) = read_user_input() -> (a, x = big_function_call(a, b) = read_user_input() b) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-indent-adjust-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-indent-adjust-sexp) Add the hybrid sexp at line into previous sexp. All forms between the two are also inserted. Specifically, if the point is on empty line, move the closing delimiter there, so the next typed text will become the last item of the previous sexp. This acts similarly to \u2018sp-add-to-previous-sexp\u2019 but with special handling of empty lines. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-dedent-adjust-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-dedent-adjust-sexp) Remove the hybrid sexp at line from previous sexp. All sibling forms after it are also removed (not deleted, just placed outside of the enclosing list). Specifically, if the point is on empty line followed by closing delimiter of enclosing list, move the closing delimiter after the last item in the list. This acts similarly to \u2018sp-forward-barf-sexp\u2019 but with special handling of empty lines. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-slurp-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-slurp-hybrid-sexp) Add hybrid sexp following the current list in it by moving the closing delimiter. This is philosophically similar to \u2018sp-forward-slurp-sexp\u2019 but works better in \"line-based\" languages like C or Java. Because the structure is much looser in these languages, this command currently does not support all the prefix argument triggers that \u2018sp-forward-slurp-sexp\u2019 does. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-slurp-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to C-). (sp-forward-slurp-sexp &optional ARG) (foo |bar) baz -> (foo |bar baz) [(foo |bar)] baz -> [(foo |bar) baz] [(foo |bar) baz] -> [(foo |bar baz)] ((|foo) bar baz quux) -> ((|foo bar baz quux)) ;; with SPC u \"foo| bar\" \"baz quux\" -> \"foo| bar baz quux\" \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-slurp-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to C-(. (sp-backward-slurp-sexp &optional ARG) foo (bar| baz) -> (foo bar| baz) foo [(bar| baz)] -> [foo (bar| baz)] [foo (bar| baz)] -> [(foo bar| baz)] (foo bar baz (|quux)) -> ((foo bar baz |quux)) ;; with SPC u \"foo bar\" \"baz |quux\" -> \"foo bar baz |quux\" \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-add-to-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-add-to-previous-sexp &optional ARG) (foo bar) |baz quux -> (foo bar |baz) quux (foo bar) |baz quux -> (foo bar |baz quux) ;; 2 (blab (foo bar) |baz quux) -> (blab (foo bar |baz quux)) ;; SPC u (foo bar) (baz |quux) -> (foo bar (baz |quux)) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-add-to-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-add-to-next-sexp &optional ARG) foo bar| (baz quux) -> foo (bar| baz quux) foo bar| (baz quux) -> (foo bar| baz quux) ;; 2 (foo bar |(bar quux) blab) -> ((foo bar |bar quux) blab) ;; SPC u (foo |bar) (baz quux) -> ((foo |bar) baz quux) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-barf-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to M-). (sp-forward-barf-sexp &optional ARG) (foo bar| baz) -> (foo bar|) baz ;; nil (defaults to 1) (foo| [bar baz]) -> (foo|) [bar baz] ;; 1 (1 2 3| 4 5 6) -> (1 2 3|) 4 5 6 ;; SPC u (or numeric prefix 3) (foo bar| baz) -> foo (bar| baz) ;; -1 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-barf-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to M-(. (sp-backward-barf-sexp &optional ARG) (foo bar| baz) -> foo (bar| baz) ([foo bar] |baz) -> [foo bar] (|baz) (1 2 3 |4 5 6) -> 1 2 3 (|4 5 6) ;; SPC u (or 3) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-skip-forward-to-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-skip-forward-to-symbol &optional STOP-AT-STRING STOP-AFTER-STRING STOP-INSIDE-STRING) foo| bar -> foo |bar foo| [bar baz] -> foo |[bar baz] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-skip-backward-to-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-skip-backward-to-symbol &optional STOP-AT-STRING STOP-AFTER-STRING STOP-INSIDE-STRING) foo |bar -> foo| bar [bar baz] |foo -> [bar baz]| foo \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-symbol &optional ARG) |foo bar baz -> foo| bar baz |foo (bar (baz)) -> foo (bar| (baz)) ;; 2 |foo (bar (baz) quux) -> foo (bar (baz) quux|) ;; 4 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-symbol &optional ARG) foo bar| baz -> foo |bar baz ((foo bar) baz)| -> ((foo |bar) baz) ;; 2 (quux ((foo) bar) baz)| -> (|quux ((foo) bar) baz) ;; 4 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-rewrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-rewrap-sexp PAIR &optional KEEP-OLD) (foo |bar baz) -> [foo |bar baz] ;; [ (foo |bar baz) -> [(foo |bar baz)] ;; SPC u [ \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-swap-enclosing-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-swap-enclosing-sexp &optional ARG) (foo [|bar] baz) -> [foo (|bar) baz] ;; 1 (foo {bar [|baz] quux} quack) -> [foo {bar (|baz) quux} quack] ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-change-inner is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-change-inner) (f|oo [bar] baz) -> (foo [|] baz) {|\u2019foo\u2019: \u2019bar\u2019} -> {\u2019|\u2019: \u2019bar\u2019} \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-unwrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-unwrap-sexp &optional ARG) |(foo bar baz) -> |foo bar baz (foo bar| baz) -> foo bar| baz |(foo) (bar) (baz) -> |(foo) bar (baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-unwrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-unwrap-sexp &optional ARG) (foo bar baz)| -> foo bar baz| (foo bar)| (baz) -> foo bar| (baz) (foo) (bar) (baz)| -> foo (bar) (baz) ;; 3 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-splice-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-splice-sexp &optional ARG) (foo (bar| baz) quux) -> (foo bar| baz quux) (foo |(bar baz) quux) -> foo |(bar baz) quux (foo (bar| baz) quux) -> foo (bar| baz) quux ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-splice-sexp-killing-backward is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-splice-sexp-killing-backward &optional ARG) (foo (let ((x 5)) |(sqrt n)) bar) -> (foo |(sqrt n) bar) \u200b (when ok| |(perform-operation-1) \u200b (perform-operation-1) -> (perform-operation-2) \u200b (perform-operation-2)) \u200b (save-excursion -> |(awesome-stuff-happens) ;; 2 \u200b (unless (test) \u200b |(awesome-stuff-happens))) Note that to kill only the content and not the enclosing delimiters you can use SPC u M-x sp-backward-kill-sexp. See \u2018sp-backward-kill-sexp\u2019 for more information. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-splice-sexp-killing-forward is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-splice-sexp-killing-forward &optional ARG) (a (b c| d e) f) -> (a b c| f) (+ (x |y z) w) -> (+ x| w) Note that to kill only the content and not the enclosing delimiters you can use SPC u M-x sp-kill-sexp. See \u2018sp-kill-sexp\u2019 for more information. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-raise-sexp is an alias for \u2018sp-splice-sexp-killing-around\u2019 in \u2018smartparens.el\u2019. (sp-raise-sexp &optional ARG) (a b |(c d) e f) -> |(c d) ;; with arg = 1 (a b |c d e f) -> |c d ;; with arg = 2 (- (car x) |a 3) -> (car x)| ;; with arg = -1 (foo (bar |baz) quux) -> |(bar baz) ;; with arg = SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-convolute-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-convolute-sexp &optional ARG) We want to move the \u2018while\u2019 before the \u2018let\u2019. \u200b (let ((stuff 1) (while (we-are-good) \u200b (other 2)) (let ((stuff 1) \u200b (while (we-are-good) -> (other 2)) \u200b |(do-thing 1) |(do-thing 1) \u200b (do-thing 2) (do-thing 2) \u200b (do-thing 3))) (do-thing 3))) (forward-char (sp-get env |:op-l)) -> (sp-get env (forward-char |:op-l)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-absorb-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-absorb-sexp &optional ARG) \u200b (do-stuff 1) (save-excursion \u200b (save-excursion -> |(do-stuff 1) \u200b |(do-stuff 2)) (do-stuff 2)) foo bar (concat |baz quux) -> (concat |foo bar baz quux) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-emit-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-emit-sexp &optional ARG) \u200b (save-excursion \u200b(do-stuff 1) \u200b (do-stuff 1) (do-stuff 2) \u200b (do-stuff 2) -> (save-excursion \u200b |(do-stuff 3)) |(do-stuff 3)) \u200b (while not-done-yet (execute-only-once) \u200b (execute-only-once) -> (while not-done-yet ;; arg = 2 \u200b |(execute-in-loop)) |(execute-in-loop)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-extract-before-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-extract-before-sexp &optional ARG) Move the expression after point before the enclosing balanced expression. The point moves with the extracted expression. With ARG positive N, extract N expressions after point. With ARG negative -N, extract N expressions before point. With ARG being raw prefix argument SPC u, extract all the expressions up until the end of enclosing list. If the raw prefix is negative, this behaves as SPC u \u2018sp-backward-barf-sexp\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-extract-after-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-extract-after-sexp &optional ARG) Move the expression after point after the enclosing balanced expression. The point moves with the extracted expression. With ARG positive N, extract N expressions after point. With ARG negative -N, extract N expressions before point. With ARG being raw prefix argument SPC u, extract all the expressions up until the end of enclosing list. With ARG being negative raw prefix argument M-- SPC u, extract all the expressions up until the start of enclosing list. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-whitespace is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-whitespace &optional ARG) Skip forward past the whitespace characters. With non-nil ARG return number of characters skipped. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-whitespace is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-whitespace &optional ARG) Skip backward past the whitespace characters. With non-nil ARG return number of characters skipped. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-split-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to SPC j s, M-m j s. (sp-split-sexp ARG) (foo bar |baz quux) -> (foo bar) |(baz quux) \"foo bar |baz quux\" -> \"foo bar\" |\"baz quux\" ([foo |bar baz] quux) -> ([foo] |[bar baz] quux) (foo bar| baz quux) -> (foo) (bar|) (baz) (quux) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-join-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-join-sexp &optional ARG) (foo bar) |(baz) -> (foo bar |baz) (foo) |(bar) (baz) -> (foo |bar baz) ;; 2 [foo] [bar] |[baz] -> [foo bar |baz] ;; -2 (foo bar (baz)| (quux) (blob buzz)) -> (foo bar (baz| quux blob buzz)) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-next-thing is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-next-thing &optional ARG POINT) Set active region over next thing as recognized by \u2018sp-get-thing\u2019. If ARG is positive N, select N expressions forward. If ARG is negative -N, select N expressions backward. If ARG is a raw prefix SPC u select all the things up until the end of current expression. If ARG is a raw prefix SPC u SPC u select the current expression (as if doing \u2018sp-backward-up-sexp\u2019 followed by \u2018sp-select-next-thing\u2019). If ARG is number 0 (zero), select all the things inside the current expression. If POINT is non-nil, it is assumed it\u2019s a point inside the buffer from which the selection extends, either forward or backward, depending on the value of ARG. If the currently active region contains a balanced expression, following invocation of \u2018sp-select-next-thing\u2019 will select the inside of this expression . Therefore calling this function twice with no active region will select the inside of the next expression. If the point is right in front of the expression any potential prefix is ignored. For example, \u2019|(foo) would only select (foo) and not include \u2019 in the selection. If you wish to also select the prefix, you have to move the point backwards. With \u2018sp-navigate-consider-symbols\u2019 symbols and strings are also considered balanced expressions. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-previous-thing is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-previous-thing &optional ARG POINT) Set active region over ARG previous things as recognized by \u2018sp-get-thing\u2019. If ARG is negative -N, select that many expressions forward. With \u2018sp-navigate-consider-symbols\u2019 symbols and strings are also considered balanced expressions. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-next-thing-exchange is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-next-thing-exchange &optional ARG POINT) Just like \u2018sp-select-next-thing\u2019 but run \u2018exchange-point-and-mark\u2019 afterwards. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-previous-thing-exchange is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-previous-thing-exchange &optional ARG POINT) Just like \u2018sp-select-previous-thing\u2019 but run \u2018exchange-point-and-mark\u2019 afterwards. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-mark-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-mark-sexp &optional ARG ALLOW-EXTEND) Set mark ARG balanced expressions from point. The place mark goes is the same place M-x sp-forward-sexp would move to with the same argument. Interactively, if this command is repeated or (in Transient Mark mode) if the mark is active, it marks the next ARG sexps after the ones already marked. This command assumes point is not in a string or comment. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-char is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-char &optional ARG) (quu|x \"zot\") -> (quu| \"zot\") (quux |\"zot\") -> (quux \"|zot\") -> (quux \"|ot\") (foo (|) bar) -> (foo | bar) |(foo bar) -> (|foo bar) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-delete-char is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-delete-char &optional ARG) (\"zot\" q|uux) -> (\"zot\" |uux) (\"zot\"| quux) -> (\"zot|\" quux) -> (\"zo|\" quux) (foo (|) bar) -> (foo | bar) (foo bar)| -> (foo bar|) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-symbol &optional ARG WORD) Kill a symbol forward, skipping over any intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. See \u2018sp-forward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-word &optional ARG) Kill a word forward, skipping over intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-symbol &optional ARG WORD) Delete a symbol forward, skipping over any intervening delimiters. Deleted symbol does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. See \u2018sp-forward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-word &optional ARG) Delete a word forward, skipping over intervening delimiters. Deleted word does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-kill-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-kill-symbol &optional ARG WORD) Kill a symbol backward, skipping over any intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in forward direction. See \u2018sp-backward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-kill-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-kill-word &optional ARG) Kill a word backward, skipping over intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-delete-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-delete-symbol &optional ARG WORD) Delete a symbol backward, skipping over any intervening delimiters. Deleted symbol does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in forward direction. See \u2018sp-backward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-delete-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-delete-word &optional ARG) Delete a word backward, skipping over intervening delimiters. Deleted word does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-region BEG END) Delete the text between point and mark, like \u2018delete-region\u2019. BEG and END are the bounds of region to be deleted. If that text is unbalanced, signal an error instead. With a prefix argument, skip the balance check. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-region BEG END) Kill the text between point and mark, like \u2018kill-region\u2019. BEG and END are the bounds of region to be killed. If that text is unbalanced, signal an error instead. With a prefix argument, skip the balance check. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-indent-defun is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-indent-defun &optional ARG) Re-indent the current defun. If point is inside a string or comment, fill the current paragraph instead, and with ARG, justify as well. Otherwise, re-indent the current defun, and adjust the position of the point. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-region-ok-p is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-region-ok-p START END) Test if region between START and END is balanced. A balanced region is one where all opening delimiters are matched by closing delimiters. This function does not check that the delimiters are correctly ordered, that is [(]) is correct even though it is not logically properly balanced. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-newline is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to SPC j n, M-m j n. (sp-newline) Insert a newline and indent it. This is like \u2018newline-and-indent\u2019, but it not only indents the line that the point is on but also the S-expression following the point, if there is one. If in a string, just insert a literal newline. If in a comment and if followed by invalid structure, call \u2018indent-new-comment-line\u2019 to keep the invalid structure in a comment. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-comment is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-comment) Insert the comment character and adjust hanging sexps such that it doesn\u2019t break structure. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-show-enclosing-pair is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-show-enclosing-pair) Highlight the enclosing pair around point. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-highlight-current-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-highlight-current-sexp ARG) Highlight the expression returned by the next command, preserving point position. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015","title":"Smartparens cheatsheet"},{"location":"reference/structural-editing/smartparens-cheatsheet/#smartparens-cheatsheet","text":"SPC SPC sp-cheat-sheet lists all the smartparens commands available","title":"Smartparens cheatsheet"},{"location":"reference/structural-editing/smartparens-cheatsheet/#hintanimated-cheatsheet","text":"Animated Smartparens cheatsheet - update to use Spacemacs keybindings","title":"Hint::Animated cheatsheet"},{"location":"reference/structural-editing/smartparens-cheatsheet/#todobreak-out-common-commands-into-their-own-sections-with-examples","text":"(sp-cheat-sheet &optional ARG) Generate a cheat sheet of all the smartparens interactive functions. Without a prefix argument, print only the short documentation and examples. With non-nil prefix argument ARG, show the full documentation for each function. You can follow the links to the function or variable help page. To get back to the full list, use [. You can use \u2018beginning-of-defun\u2019 and \u2018end-of-defun\u2019 to jump to the previous/next entry. Examples are fontified using the \u2018font-lock-string-face\u2019 for better orientation. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (sp-describe-system) Describe user\u2019s system. The output of this function can be used in bug reports. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (smartparens-strict-mode &optional ARG) Toggle the strict smartparens mode. When strict mode is active, \u2018delete-char\u2019, \u2018kill-word\u2019 and their backward variants will skip over the pair delimiters in order to keep the structure always valid (the same way as \u2018paredit-mode\u2019 does). This is accomplished by remapping them to \u2018sp-delete-char\u2019 and \u2018sp-kill-word\u2019. There is also function \u2018sp-kill-symbol\u2019 that deletes symbols instead of words, otherwise working exactly the same (it is not bound to any key by default). When strict mode is active, this is indicated with \"/s\" after the smartparens indicator in the mode list. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (smartparens-global-strict-mode &optional ARG) Toggle Smartparens-Strict mode in all buffers. With prefix ARG, enable Smartparens-Global-Strict mode if ARG is positive; otherwise, disable it. If called from Lisp, enable the mode if ARG is omitted or nil. Smartparens-Strict mode is enabled in all buffers where \u2018turn-on-smartparens-strict-mode\u2019 would do it. See \u2018smartparens-strict-mode\u2019 for more information on Smartparens-Strict mode. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (turn-on-smartparens-strict-mode) Turn on \u2018smartparens-strict-mode\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 (turn-off-smartparens-strict-mode) Turn off \u2018smartparens-strict-mode\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-tag-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-tag-object &optional ARG) Read the command and invoke it on the next tag object. If you specify a regular emacs prefix argument this is passed to the executed command. Therefore, executing \"SPC u 2 M-x sp-prefix-tag-object M-x sp-forward-sexp\" will move two tag expressions forward, ignoring possible symbols or paired expressions in between. Tag object is anything delimited by sgml tag. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-pair-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-pair-object &optional ARG) Read the command and invoke it on the next pair object. If you specify a regular emacs prefix argument this is passed to the executed command. Therefore, executing \"SPC u 2 M-x sp-prefix-pair-object M-x sp-forward-sexp\" will move two paired expressions forward, ignoring possible symbols in between. Pair object is anything delimited by pairs from \u2018sp-pair-list\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-symbol-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-symbol-object &optional ARG) Read the command and invoke it on the next pair object. If you specify a regular emacs prefix argument this is passed to the executed command. Therefore, executing \"SPC u 2 M-x sp-prefix-symbol-object M-x sp-forward-sexp\" will move two symbols forward, ignoring any structure. Symbol is defined as a chunk of text recognized by \u2018sp-forward-symbol\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-prefix-save-excursion is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-prefix-save-excursion &optional ARG) Execute the command keeping the point fixed. If you specify a regular emacs prefix argument this is passed to the executed command. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-narrow-to-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-narrow-to-sexp ARG) Make text outside current balanced expression invisible. A numeric arg specifies to move up by that many enclosing expressions. See also \u2018narrow-to-region\u2019 and \u2018narrow-to-defun\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-sexp &optional ARG) |(foo bar baz) -> (foo bar baz)| (|foo bar baz) -> (foo| bar baz) (|foo bar baz) -> (foo bar| baz) ;; 2 (foo (bar baz|)) -> (foo (bar baz)|) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-sexp &optional ARG) (foo bar baz)| -> |(foo bar baz) (foo| bar baz) -> (|foo bar baz) (foo bar| baz) -> (|foo bar baz) ;; 2 (|(foo bar) baz) -> ((|foo bar) baz) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-next-sexp &optional ARG) ((foo) |bar (baz quux)) -> ((foo) bar |(baz quux)) ((foo) bar |(baz quux)) -> |((foo) bar (baz quux)) and with non-nil \u2018sp-navigate-interactive-always-progress-point\u2019 (f|oo bar) -> (foo |bar) ((fo|o) (bar)) -> ((foo) |(bar)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-previous-sexp &optional ARG) ((foo) bar| (baz quux)) -> ((foo)| bar (baz quux)) ((foo)| bar (baz quux)) -> ((foo) bar (baz quux))| and if \u2018sp-navigate-interactive-always-progress-point\u2019 is non-nil (foo b|ar baz) -> (foo| bar baz) (foo (b|ar baz)) -> (foo| (bar baz)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-parallel-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-parallel-sexp &optional ARG) Move forward across one balanced expressions at the same depth. If calling \u2018sp-forward-sexp\u2019 at point would result in raising a level up, loop back to the first expression at current level, that is the first child of the enclosing sexp as defined by \u2018sp-get-enclosing-sexp\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-parallel-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-parallel-sexp &optional ARG) Move backward across one balanced expressions at the same depth. If calling \u2018sp-backward-sexp\u2019 at point would result in raising a level up, loop back to the last expression at current level, that is the last child of the enclosing sexp as defined by \u2018sp-get-enclosing-sexp\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-down-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-down-sexp &optional ARG) |foo (bar (baz quux)) -> foo (|bar (baz quux)) |foo (bar (baz quux)) -> foo (bar (|baz quux)) ;; 2 |foo (bar (baz (quux) blab)) -> foo (bar (baz (|quux) blab)) ;; SPC u (foo (bar baz) |quux) -> (|foo (bar baz) quux) (blab foo |(bar baz) quux) -> (|blab foo (bar baz) quux) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-down-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-down-sexp &optional ARG) foo (bar (baz quux))| -> foo (bar (baz quux)|) (bar (baz quux)) foo| -> (bar (baz quux|)) foo ;; 2 foo (bar (baz (quux) blab))| -> foo (bar (baz (quux|) blab)) ;; SPC u (foo| (bar baz) quux) -> (foo (bar baz) quux|) (foo (bar baz) |quux blab) -> (foo (bar baz) quux blab|) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-beginning-of-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-beginning-of-sexp &optional ARG) (foo (bar baz) quux| (blab glob)) -> (|foo (bar baz) quux (blab glob)) (foo (bar baz|) quux (blab glob)) -> (foo (|bar baz) quux (blab glob)) (|foo) (bar) (baz quux) -> (foo) (bar) (|baz quux) ;; 3 (foo bar) (baz) (quux|) -> (|foo bar) (baz) (quux) ;; -3 ((foo bar) (baz |quux) blab) -> (|(foo bar) (baz quux) blab) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-end-of-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-end-of-sexp &optional ARG) (foo |(bar baz) quux (blab glob)) -> (foo (bar baz) quux (blab glob)|) (foo (|bar baz) quux (blab glob)) -> (foo (bar baz|) quux (blab glob)) (|foo) (bar) (baz quux) -> (foo) (bar) (baz quux|) ;; 3 (foo bar) (baz) (quux|) -> (foo bar|) (baz) (quux) ;; -3 ((foo |bar) (baz quux) blab) -> ((foo bar) (baz quux) blab|) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-beginning-of-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-beginning-of-next-sexp &optional ARG) (f|oo) (bar) (baz) -> (foo) (|bar) (baz) (f|oo) (bar) (baz) -> (foo) (bar) (|baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-beginning-of-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-beginning-of-previous-sexp &optional ARG) (foo) (b|ar) (baz) -> (|foo) (bar) (baz) (foo) (bar) (b|az) -> (|foo) (bar) (baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-end-of-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-end-of-next-sexp &optional ARG) (f|oo) (bar) (baz) -> (foo) (bar|) (baz) (f|oo) (bar) (baz) -> (foo) (bar) (baz|) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-end-of-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-end-of-previous-sexp &optional ARG) (foo) (b|ar) (baz) -> (foo|) (bar) (baz) (foo) (bar) (b|az) -> (foo|) (bar) (baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-up-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-up-sexp &optional ARG INTERACTIVE) (foo |(bar baz) quux blab) -> (foo (bar baz) quux blab)| (foo (bar |baz) quux blab) -> (foo (bar baz) quux blab)| ;; 2 (foo bar |baz -> (foo bar baz)| ;; re-indent the expression \u200b ) (foo |(bar baz) -> (foo)| (bar baz) ;; close unbalanced expr. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-up-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-up-sexp &optional ARG INTERACTIVE) (foo (bar baz) quux| blab) -> |(foo (bar baz) quux blab) (foo (bar |baz) quux blab) -> |(foo (bar baz) quux blab) ;; 2 ( -> |(foo bar baz) \u200b foo |bar baz) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp--kill-or-copy-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp--kill-or-copy-region BEG END &optional DONT-KILL) Kill or copy region between BEG and END according to DONT-KILL. If \u2018evil-mode\u2019 is active, copying a region will also add it to the 0 register. Additionally, if command was prefixed with a register, copy the region to that register. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-sexp &optional ARG DONT-KILL) (foo |(abc) bar) -> (foo | bar) ;; nil, defaults to 1 (foo (bar) | baz) -> | ;; 2 (foo |(bar) baz) -> | ;; SPC u SPC u (1 |2 3 4 5 6) -> (1|) ;; SPC u (1 |2 3 4 5 6) -> (1 | 5 6) ;; 3 (1 2 3 4 5| 6) -> (1 2 3 | 6) ;; -2 (1 2 3 4| 5 6) -> (|5 6) ;; - SPC u (1 2 | ) -> (1 2|) ;; SPC u, kill useless whitespace (1 2 3 |4 5 6) -> (|) ;; 0 Note: prefix argument is shown after the example in \"comment\". Assumes \u2018sp-navigate-consider-symbols\u2019 equal to t. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-kill-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-kill-sexp &optional ARG DONT-KILL) (foo (abc)| bar) -> (foo | bar) blab (foo (bar baz) quux)| -> blab | (1 2 3 |4 5 6) -> (|4 5 6) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-copy-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-copy-sexp &optional ARG) Copy the following ARG expressions to the kill-ring. This is exactly like calling \u2018sp-kill-sexp\u2019 with second argument t. All the special prefix arguments work the same way. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-copy-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-copy-sexp &optional ARG) Copy the previous ARG expressions to the kill-ring. This is exactly like calling \u2018sp-backward-kill-sexp\u2019 with second argument t. All the special prefix arguments work the same way. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-clone-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-clone-sexp) Clone sexp after or around point. If the form immediately after point is a sexp, clone it below the current one and put the point in front of it. Otherwise get the enclosing sexp and clone it below the current enclosing sexp. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-hybrid-sexp ARG) foo | bar baz -> foo | ;; nil foo (bar | baz) quux -> foo (bar |) quux ;; nil foo | bar (baz -> foo | ;; nil quux) foo \"bar |baz quux\" quack -> foo \"bar |\" quack ;; nil foo (bar baz) qu|ux (quack -> foo | hoo ;; SPC u SPC u zaq) hoo foo | (bar -> foo | ;; C-0 baz) baz) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-whole-line is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-whole-line) (progn (progn (some |long sexp)) -> |) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-transpose-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-transpose-sexp &optional ARG) foo |bar baz -> bar foo| baz foo |bar baz -> bar baz foo| ;; 2 (foo) |(bar baz) -> (bar baz) (foo)| (foo bar) -> (baz quux) ;; keeps the formatting \u200b |(baz quux) |(foo bar) foo bar baz| -> foo baz| bar ;; -1 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-transpose-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-transpose-hybrid-sexp &optional ARG) foo bar baz (quux |baz (quux -> quack) quack) foo bar\\n| [(foo) (bar) -> [(baz) |(baz)] (foo) (bar)|] foo bar baz -> quux flux |quux flux foo bar baz\\n| \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-push-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-push-hybrid-sexp) |x = big_function_call(a, |(a, b) b) = read_user_input() -> (a, x = big_function_call(a, b) = read_user_input() b) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-indent-adjust-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-indent-adjust-sexp) Add the hybrid sexp at line into previous sexp. All forms between the two are also inserted. Specifically, if the point is on empty line, move the closing delimiter there, so the next typed text will become the last item of the previous sexp. This acts similarly to \u2018sp-add-to-previous-sexp\u2019 but with special handling of empty lines. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-dedent-adjust-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-dedent-adjust-sexp) Remove the hybrid sexp at line from previous sexp. All sibling forms after it are also removed (not deleted, just placed outside of the enclosing list). Specifically, if the point is on empty line followed by closing delimiter of enclosing list, move the closing delimiter after the last item in the list. This acts similarly to \u2018sp-forward-barf-sexp\u2019 but with special handling of empty lines. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-slurp-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-slurp-hybrid-sexp) Add hybrid sexp following the current list in it by moving the closing delimiter. This is philosophically similar to \u2018sp-forward-slurp-sexp\u2019 but works better in \"line-based\" languages like C or Java. Because the structure is much looser in these languages, this command currently does not support all the prefix argument triggers that \u2018sp-forward-slurp-sexp\u2019 does. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-slurp-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to C-). (sp-forward-slurp-sexp &optional ARG) (foo |bar) baz -> (foo |bar baz) [(foo |bar)] baz -> [(foo |bar) baz] [(foo |bar) baz] -> [(foo |bar baz)] ((|foo) bar baz quux) -> ((|foo bar baz quux)) ;; with SPC u \"foo| bar\" \"baz quux\" -> \"foo| bar baz quux\" \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-slurp-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to C-(. (sp-backward-slurp-sexp &optional ARG) foo (bar| baz) -> (foo bar| baz) foo [(bar| baz)] -> [foo (bar| baz)] [foo (bar| baz)] -> [(foo bar| baz)] (foo bar baz (|quux)) -> ((foo bar baz |quux)) ;; with SPC u \"foo bar\" \"baz |quux\" -> \"foo bar baz |quux\" \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-add-to-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-add-to-previous-sexp &optional ARG) (foo bar) |baz quux -> (foo bar |baz) quux (foo bar) |baz quux -> (foo bar |baz quux) ;; 2 (blab (foo bar) |baz quux) -> (blab (foo bar |baz quux)) ;; SPC u (foo bar) (baz |quux) -> (foo bar (baz |quux)) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-add-to-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-add-to-next-sexp &optional ARG) foo bar| (baz quux) -> foo (bar| baz quux) foo bar| (baz quux) -> (foo bar| baz quux) ;; 2 (foo bar |(bar quux) blab) -> ((foo bar |bar quux) blab) ;; SPC u (foo |bar) (baz quux) -> ((foo |bar) baz quux) ;; SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-barf-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to M-). (sp-forward-barf-sexp &optional ARG) (foo bar| baz) -> (foo bar|) baz ;; nil (defaults to 1) (foo| [bar baz]) -> (foo|) [bar baz] ;; 1 (1 2 3| 4 5 6) -> (1 2 3|) 4 5 6 ;; SPC u (or numeric prefix 3) (foo bar| baz) -> foo (bar| baz) ;; -1 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-barf-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to M-(. (sp-backward-barf-sexp &optional ARG) (foo bar| baz) -> foo (bar| baz) ([foo bar] |baz) -> [foo bar] (|baz) (1 2 3 |4 5 6) -> 1 2 3 (|4 5 6) ;; SPC u (or 3) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-skip-forward-to-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-skip-forward-to-symbol &optional STOP-AT-STRING STOP-AFTER-STRING STOP-INSIDE-STRING) foo| bar -> foo |bar foo| [bar baz] -> foo |[bar baz] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-skip-backward-to-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-skip-backward-to-symbol &optional STOP-AT-STRING STOP-AFTER-STRING STOP-INSIDE-STRING) foo |bar -> foo| bar [bar baz] |foo -> [bar baz]| foo \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-symbol &optional ARG) |foo bar baz -> foo| bar baz |foo (bar (baz)) -> foo (bar| (baz)) ;; 2 |foo (bar (baz) quux) -> foo (bar (baz) quux|) ;; 4 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-symbol &optional ARG) foo bar| baz -> foo |bar baz ((foo bar) baz)| -> ((foo |bar) baz) ;; 2 (quux ((foo) bar) baz)| -> (|quux ((foo) bar) baz) ;; 4 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-rewrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-rewrap-sexp PAIR &optional KEEP-OLD) (foo |bar baz) -> [foo |bar baz] ;; [ (foo |bar baz) -> [(foo |bar baz)] ;; SPC u [ \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-swap-enclosing-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-swap-enclosing-sexp &optional ARG) (foo [|bar] baz) -> [foo (|bar) baz] ;; 1 (foo {bar [|baz] quux} quack) -> [foo {bar (|baz) quux} quack] ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-change-inner is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-change-inner) (f|oo [bar] baz) -> (foo [|] baz) {|\u2019foo\u2019: \u2019bar\u2019} -> {\u2019|\u2019: \u2019bar\u2019} \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-unwrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-unwrap-sexp &optional ARG) |(foo bar baz) -> |foo bar baz (foo bar| baz) -> foo bar| baz |(foo) (bar) (baz) -> |(foo) bar (baz) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-unwrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-unwrap-sexp &optional ARG) (foo bar baz)| -> foo bar baz| (foo bar)| (baz) -> foo bar| (baz) (foo) (bar) (baz)| -> foo (bar) (baz) ;; 3 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-splice-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-splice-sexp &optional ARG) (foo (bar| baz) quux) -> (foo bar| baz quux) (foo |(bar baz) quux) -> foo |(bar baz) quux (foo (bar| baz) quux) -> foo (bar| baz) quux ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-splice-sexp-killing-backward is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-splice-sexp-killing-backward &optional ARG) (foo (let ((x 5)) |(sqrt n)) bar) -> (foo |(sqrt n) bar) \u200b (when ok| |(perform-operation-1) \u200b (perform-operation-1) -> (perform-operation-2) \u200b (perform-operation-2)) \u200b (save-excursion -> |(awesome-stuff-happens) ;; 2 \u200b (unless (test) \u200b |(awesome-stuff-happens))) Note that to kill only the content and not the enclosing delimiters you can use SPC u M-x sp-backward-kill-sexp. See \u2018sp-backward-kill-sexp\u2019 for more information. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-splice-sexp-killing-forward is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-splice-sexp-killing-forward &optional ARG) (a (b c| d e) f) -> (a b c| f) (+ (x |y z) w) -> (+ x| w) Note that to kill only the content and not the enclosing delimiters you can use SPC u M-x sp-kill-sexp. See \u2018sp-kill-sexp\u2019 for more information. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-raise-sexp is an alias for \u2018sp-splice-sexp-killing-around\u2019 in \u2018smartparens.el\u2019. (sp-raise-sexp &optional ARG) (a b |(c d) e f) -> |(c d) ;; with arg = 1 (a b |c d e f) -> |c d ;; with arg = 2 (- (car x) |a 3) -> (car x)| ;; with arg = -1 (foo (bar |baz) quux) -> |(bar baz) ;; with arg = SPC u SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-convolute-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-convolute-sexp &optional ARG) We want to move the \u2018while\u2019 before the \u2018let\u2019. \u200b (let ((stuff 1) (while (we-are-good) \u200b (other 2)) (let ((stuff 1) \u200b (while (we-are-good) -> (other 2)) \u200b |(do-thing 1) |(do-thing 1) \u200b (do-thing 2) (do-thing 2) \u200b (do-thing 3))) (do-thing 3))) (forward-char (sp-get env |:op-l)) -> (sp-get env (forward-char |:op-l)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-absorb-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-absorb-sexp &optional ARG) \u200b (do-stuff 1) (save-excursion \u200b (save-excursion -> |(do-stuff 1) \u200b |(do-stuff 2)) (do-stuff 2)) foo bar (concat |baz quux) -> (concat |foo bar baz quux) ;; 2 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-emit-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-emit-sexp &optional ARG) \u200b (save-excursion \u200b(do-stuff 1) \u200b (do-stuff 1) (do-stuff 2) \u200b (do-stuff 2) -> (save-excursion \u200b |(do-stuff 3)) |(do-stuff 3)) \u200b (while not-done-yet (execute-only-once) \u200b (execute-only-once) -> (while not-done-yet ;; arg = 2 \u200b |(execute-in-loop)) |(execute-in-loop)) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-extract-before-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-extract-before-sexp &optional ARG) Move the expression after point before the enclosing balanced expression. The point moves with the extracted expression. With ARG positive N, extract N expressions after point. With ARG negative -N, extract N expressions before point. With ARG being raw prefix argument SPC u, extract all the expressions up until the end of enclosing list. If the raw prefix is negative, this behaves as SPC u \u2018sp-backward-barf-sexp\u2019. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-extract-after-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-extract-after-sexp &optional ARG) Move the expression after point after the enclosing balanced expression. The point moves with the extracted expression. With ARG positive N, extract N expressions after point. With ARG negative -N, extract N expressions before point. With ARG being raw prefix argument SPC u, extract all the expressions up until the end of enclosing list. With ARG being negative raw prefix argument M-- SPC u, extract all the expressions up until the start of enclosing list. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-forward-whitespace is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-forward-whitespace &optional ARG) Skip forward past the whitespace characters. With non-nil ARG return number of characters skipped. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-whitespace is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-whitespace &optional ARG) Skip backward past the whitespace characters. With non-nil ARG return number of characters skipped. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-split-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to SPC j s, M-m j s. (sp-split-sexp ARG) (foo bar |baz quux) -> (foo bar) |(baz quux) \"foo bar |baz quux\" -> \"foo bar\" |\"baz quux\" ([foo |bar baz] quux) -> ([foo] |[bar baz] quux) (foo bar| baz quux) -> (foo) (bar|) (baz) (quux) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-join-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-join-sexp &optional ARG) (foo bar) |(baz) -> (foo bar |baz) (foo) |(bar) (baz) -> (foo |bar baz) ;; 2 [foo] [bar] |[baz] -> [foo bar |baz] ;; -2 (foo bar (baz)| (quux) (blob buzz)) -> (foo bar (baz| quux blob buzz)) ;; SPC u \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-next-thing is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-next-thing &optional ARG POINT) Set active region over next thing as recognized by \u2018sp-get-thing\u2019. If ARG is positive N, select N expressions forward. If ARG is negative -N, select N expressions backward. If ARG is a raw prefix SPC u select all the things up until the end of current expression. If ARG is a raw prefix SPC u SPC u select the current expression (as if doing \u2018sp-backward-up-sexp\u2019 followed by \u2018sp-select-next-thing\u2019). If ARG is number 0 (zero), select all the things inside the current expression. If POINT is non-nil, it is assumed it\u2019s a point inside the buffer from which the selection extends, either forward or backward, depending on the value of ARG. If the currently active region contains a balanced expression, following invocation of \u2018sp-select-next-thing\u2019 will select the inside of this expression . Therefore calling this function twice with no active region will select the inside of the next expression. If the point is right in front of the expression any potential prefix is ignored. For example, \u2019|(foo) would only select (foo) and not include \u2019 in the selection. If you wish to also select the prefix, you have to move the point backwards. With \u2018sp-navigate-consider-symbols\u2019 symbols and strings are also considered balanced expressions. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-previous-thing is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-previous-thing &optional ARG POINT) Set active region over ARG previous things as recognized by \u2018sp-get-thing\u2019. If ARG is negative -N, select that many expressions forward. With \u2018sp-navigate-consider-symbols\u2019 symbols and strings are also considered balanced expressions. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-next-thing-exchange is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-next-thing-exchange &optional ARG POINT) Just like \u2018sp-select-next-thing\u2019 but run \u2018exchange-point-and-mark\u2019 afterwards. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-select-previous-thing-exchange is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-select-previous-thing-exchange &optional ARG POINT) Just like \u2018sp-select-previous-thing\u2019 but run \u2018exchange-point-and-mark\u2019 afterwards. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-mark-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-mark-sexp &optional ARG ALLOW-EXTEND) Set mark ARG balanced expressions from point. The place mark goes is the same place M-x sp-forward-sexp would move to with the same argument. Interactively, if this command is repeated or (in Transient Mark mode) if the mark is active, it marks the next ARG sexps after the ones already marked. This command assumes point is not in a string or comment. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-char is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-char &optional ARG) (quu|x \"zot\") -> (quu| \"zot\") (quux |\"zot\") -> (quux \"|zot\") -> (quux \"|ot\") (foo (|) bar) -> (foo | bar) |(foo bar) -> (|foo bar) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-delete-char is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-delete-char &optional ARG) (\"zot\" q|uux) -> (\"zot\" |uux) (\"zot\"| quux) -> (\"zot|\" quux) -> (\"zo|\" quux) (foo (|) bar) -> (foo | bar) (foo bar)| -> (foo bar|) \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-symbol &optional ARG WORD) Kill a symbol forward, skipping over any intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. See \u2018sp-forward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-word &optional ARG) Kill a word forward, skipping over intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-symbol &optional ARG WORD) Delete a symbol forward, skipping over any intervening delimiters. Deleted symbol does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. See \u2018sp-forward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-word &optional ARG) Delete a word forward, skipping over intervening delimiters. Deleted word does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-kill-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-kill-symbol &optional ARG WORD) Kill a symbol backward, skipping over any intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in forward direction. See \u2018sp-backward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-kill-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-kill-word &optional ARG) Kill a word backward, skipping over intervening delimiters. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-delete-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-delete-symbol &optional ARG WORD) Delete a symbol backward, skipping over any intervening delimiters. Deleted symbol does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in forward direction. See \u2018sp-backward-symbol\u2019 for what constitutes a symbol. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-backward-delete-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-backward-delete-word &optional ARG) Delete a word backward, skipping over intervening delimiters. Deleted word does not go to the clipboard or kill ring. With ARG being positive number N, repeat that many times. With ARG being Negative number -N, repeat that many times in backward direction. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-delete-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-delete-region BEG END) Delete the text between point and mark, like \u2018delete-region\u2019. BEG and END are the bounds of region to be deleted. If that text is unbalanced, signal an error instead. With a prefix argument, skip the balance check. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-kill-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-kill-region BEG END) Kill the text between point and mark, like \u2018kill-region\u2019. BEG and END are the bounds of region to be killed. If that text is unbalanced, signal an error instead. With a prefix argument, skip the balance check. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-indent-defun is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-indent-defun &optional ARG) Re-indent the current defun. If point is inside a string or comment, fill the current paragraph instead, and with ARG, justify as well. Otherwise, re-indent the current defun, and adjust the position of the point. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-region-ok-p is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-region-ok-p START END) Test if region between START and END is balanced. A balanced region is one where all opening delimiters are matched by closing delimiters. This function does not check that the delimiters are correctly ordered, that is [(]) is correct even though it is not logically properly balanced. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-newline is an interactive compiled Lisp function in \u2018smartparens.el\u2019. It is bound to SPC j n, M-m j n. (sp-newline) Insert a newline and indent it. This is like \u2018newline-and-indent\u2019, but it not only indents the line that the point is on but also the S-expression following the point, if there is one. If in a string, just insert a literal newline. If in a comment and if followed by invalid structure, call \u2018indent-new-comment-line\u2019 to keep the invalid structure in a comment. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-comment is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-comment) Insert the comment character and adjust hanging sexps such that it doesn\u2019t break structure. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-show-enclosing-pair is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-show-enclosing-pair) Highlight the enclosing pair around point. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 sp-highlight-current-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019. (sp-highlight-current-sexp ARG) Highlight the expression returned by the next command, preserving point position. \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015","title":"TODO::Break out common commands into their own sections with examples"},{"location":"reference/vim/getting-comfortable/","text":"Vim - Getting Comfortable \u03bb\ufe0e Getting comfortable with the Vim approach to text manipulation can take a little while. The quickest approach is to force yourself to use Vim and stick at it until you finally go faster than you were before you started. This can take a few days of slowness, but it is worth it, so find a few days when you are not as busy and have time to practice. Start with the built in Emacs EVil Tutor - SPC h T Helpful websites for Vim commands and keybindings \u03bb\ufe0e https://vim-adventures.com/ http://www.openvim.com/ https://www.shortcutfoo.com/ http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ http://www.vimgenius.com/ https://www.labnol.org/internet/learning-vim-for-beginners/28820/ http://codecondo.com/vim-commands/ https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide Basic Movement \u03bb\ufe0e Keys in Evil Normal mode for moving the cursor around the buffer. Keybinding Action w move to start of next word b move to start of previous word e move to end of current word j move one line down k move one line up l move one character right h move one character left gg jump to top of buffer G jump to bottom of buffer $ jump to end of line ^ or 0 jump to start of line C-v page down buffer (visual block selection in Spacemacs) C-u page up buffer f jump to next instance of Hint:: \u03bb\ufe0e Use avy for jumping anywhere in your buffers Avy commands are in the jump/join/split menu - SPC j Hint:: \u03bb\ufe0e $ and ^ for jumping to end and beginning of line is the same syntax as regex Insert \u03bb\ufe0e Return to Normal mode using ESC or fd pressed in rapid succession Keybinding Action i Enter insert mode o Move to line below > Insert mode O Move to line above > Insert mode Delete text \u03bb\ufe0e Keybindings Actions x Cut current character dw delete current word dd delete current line d$ or dD delete from current position to end of line di\" delete inside \"\" diw delete inside current word dt\" delete to next \" (can delete to any character) dT\" delete to previous \" (can delete to any character) dit [html-mode] delete contents of an html tag Manipulate text \u03bb\ufe0e Keybinding Action C-j Split line at cursor S-j Join next line to end of current line dd or C-k Delete current line M-; Insert comment characters (based on buffer mode) Visual Mode - selecting text \u03bb\ufe0e Enter visual mode using v or C-SPC S-v - visual mode line by line C-v - visual mode in region Keybinding Action y copy (yank) on to kill ring edit-multiple-lines (visual mode) \u03bb\ufe0e TODO: refactor v shift-i type your comment Enter (puts the comment at the start of the line) multi-highlight (visual mode) v / name of text you want to highlight Enter n Replace \u03bb\ufe0e The following allow you to replace text Keybinding Action r replace character ~ Uppercase current character cw change current word cc change line C-a i/d - increasing/decreasing a number Vim commands \u03bb\ufe0e :explore :registers - shows the recent actions that you have done","title":"Vim - Getting Comfortable"},{"location":"reference/vim/getting-comfortable/#vim-getting-comfortable","text":"Getting comfortable with the Vim approach to text manipulation can take a little while. The quickest approach is to force yourself to use Vim and stick at it until you finally go faster than you were before you started. This can take a few days of slowness, but it is worth it, so find a few days when you are not as busy and have time to practice. Start with the built in Emacs EVil Tutor - SPC h T","title":"Vim - Getting Comfortable"},{"location":"reference/vim/getting-comfortable/#helpful-websites-for-vim-commands-and-keybindings","text":"https://vim-adventures.com/ http://www.openvim.com/ https://www.shortcutfoo.com/ http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/ http://www.vimgenius.com/ https://www.labnol.org/internet/learning-vim-for-beginners/28820/ http://codecondo.com/vim-commands/ https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide","title":"Helpful websites for Vim commands and keybindings"},{"location":"reference/vim/getting-comfortable/#basic-movement","text":"Keys in Evil Normal mode for moving the cursor around the buffer. Keybinding Action w move to start of next word b move to start of previous word e move to end of current word j move one line down k move one line up l move one character right h move one character left gg jump to top of buffer G jump to bottom of buffer $ jump to end of line ^ or 0 jump to start of line C-v page down buffer (visual block selection in Spacemacs) C-u page up buffer f jump to next instance of","title":"Basic Movement"},{"location":"reference/vim/getting-comfortable/#hint","text":"Use avy for jumping anywhere in your buffers Avy commands are in the jump/join/split menu - SPC j","title":"Hint::"},{"location":"reference/vim/getting-comfortable/#hint_1","text":"$ and ^ for jumping to end and beginning of line is the same syntax as regex","title":"Hint::"},{"location":"reference/vim/getting-comfortable/#insert","text":"Return to Normal mode using ESC or fd pressed in rapid succession Keybinding Action i Enter insert mode o Move to line below > Insert mode O Move to line above > Insert mode","title":"Insert"},{"location":"reference/vim/getting-comfortable/#delete-text","text":"Keybindings Actions x Cut current character dw delete current word dd delete current line d$ or dD delete from current position to end of line di\" delete inside \"\" diw delete inside current word dt\" delete to next \" (can delete to any character) dT\" delete to previous \" (can delete to any character) dit [html-mode] delete contents of an html tag","title":"Delete text"},{"location":"reference/vim/getting-comfortable/#manipulate-text","text":"Keybinding Action C-j Split line at cursor S-j Join next line to end of current line dd or C-k Delete current line M-; Insert comment characters (based on buffer mode)","title":"Manipulate text"},{"location":"reference/vim/getting-comfortable/#visual-mode-selecting-text","text":"Enter visual mode using v or C-SPC S-v - visual mode line by line C-v - visual mode in region Keybinding Action y copy (yank) on to kill ring","title":"Visual Mode - selecting text"},{"location":"reference/vim/getting-comfortable/#edit-multiple-lines-visual-mode","text":"TODO: refactor v shift-i type your comment Enter (puts the comment at the start of the line) multi-highlight (visual mode) v / name of text you want to highlight Enter n","title":"edit-multiple-lines (visual mode)"},{"location":"reference/vim/getting-comfortable/#replace","text":"The following allow you to replace text Keybinding Action r replace character ~ Uppercase current character cw change current word cc change line C-a i/d - increasing/decreasing a number","title":"Replace"},{"location":"reference/vim/getting-comfortable/#vim-commands","text":":explore :registers - shows the recent actions that you have done","title":"Vim commands"},{"location":"reference/vim/key-bindings/","text":"Evil Key Bindings Reference \u03bb\ufe0e Key bindings scrapped from the Evil and Evil-collection repositories Normal mode magic \u03bb\ufe0e # toggle case of character under point / visually selected region r replace current character or selected region with next character Tip: redact a password or sensitive text by selecting all the characters and using r* Into insert mode \u03bb\ufe0e a append - insert mode after current point i insert - insert mode before current point o open new line - insert mode on new line after current O open new line - insert mode on new line after current Visual Select \u03bb\ufe0e v - enter visual select mode - hjkl to select vb - select backward by word Moving around \u03bb\ufe0e 5l 7h for rough jumping along a line f / F jump forward/backward to next character on current line. e.g f, jumps to next comma Word boundaries Jumping word boundaries wraps to next line w start of next word b back to start of current word (or previous word if at start of current word) e end of current word (or end of next word, if at end of current word) Evil \u03bb\ufe0e Evil-keybindings-el \u03bb\ufe0e dird \u03bb\ufe0e Normal mode key bindings \"J\" 'dired-goto-file ; \"j\" \"K\" 'dired-do-kill-lines ; \"k\" \"r\" 'dired-do-redisplay ; \"l\" ;; \":d\", \":v\", \":s\", \":e\" \";\" (lookup-key dired-mode-map \":\")))) (evil-add-hjkl-bindings Info-mode-map 'motion \"0\" 'evil-beginning-of-line (kbd \"\\M-h\") 'Info-help ; \"h\" \"\\C-t\" 'Info-history-back ; \"l\" \"\\C-o\" 'Info-history-back \" \" 'Info-scroll-up \"\\C-]\" 'Info-follow-nearest-node (kbd \"DEL\") 'Info-scroll-down) (evil-add-hjkl-bindings speedbar-key-map 'motion \"h\" 'backward-char \"j\" 'speedbar-next \"k\" 'speedbar-prev \"l\" 'forward-char \"i\" 'speedbar-item-info \"r\" 'speedbar-refresh \"u\" 'speedbar-up-directory \"o\" 'speedbar-toggle-line-expansion (kbd \"RET\") 'speedbar-edit-line) (eval-after-load 'ibuffer '(progn (defvar ibuffer-mode-map) (evil-make-overriding-map ibuffer-mode-map 'normal) (evil-define-key 'normal ibuffer-mode-map \"j\" 'evil-next-line \"k\" 'evil-previous-line \"RET\" 'ibuffer-visit-buffer))) (eval-after-load 'ag '(progn (defvar ag-mode-map) (add-to-list 'evil-motion-state-modes 'ag-mode) (evil-add-hjkl-bindings ag-mode-map 'motion))) ;;; ELP (eval-after-load 'elp '(defadvice elp-results (after evil activate) (evil-motion-state)))","title":"Evil Key Bindings Reference"},{"location":"reference/vim/key-bindings/#evil-key-bindings-reference","text":"Key bindings scrapped from the Evil and Evil-collection repositories","title":"Evil Key Bindings Reference"},{"location":"reference/vim/key-bindings/#normal-mode-magic","text":"# toggle case of character under point / visually selected region r replace current character or selected region with next character Tip: redact a password or sensitive text by selecting all the characters and using r*","title":"Normal mode magic"},{"location":"reference/vim/key-bindings/#into-insert-mode","text":"a append - insert mode after current point i insert - insert mode before current point o open new line - insert mode on new line after current O open new line - insert mode on new line after current","title":"Into insert mode"},{"location":"reference/vim/key-bindings/#visual-select","text":"v - enter visual select mode - hjkl to select vb - select backward by word","title":"Visual Select"},{"location":"reference/vim/key-bindings/#moving-around","text":"5l 7h for rough jumping along a line f / F jump forward/backward to next character on current line. e.g f, jumps to next comma Word boundaries Jumping word boundaries wraps to next line w start of next word b back to start of current word (or previous word if at start of current word) e end of current word (or end of next word, if at end of current word)","title":"Moving around"},{"location":"reference/vim/key-bindings/#evil","text":"","title":"Evil"},{"location":"reference/vim/key-bindings/#evil-keybindings-el","text":"","title":"Evil-keybindings-el"},{"location":"reference/vim/key-bindings/#dird","text":"Normal mode key bindings \"J\" 'dired-goto-file ; \"j\" \"K\" 'dired-do-kill-lines ; \"k\" \"r\" 'dired-do-redisplay ; \"l\" ;; \":d\", \":v\", \":s\", \":e\" \";\" (lookup-key dired-mode-map \":\")))) (evil-add-hjkl-bindings Info-mode-map 'motion \"0\" 'evil-beginning-of-line (kbd \"\\M-h\") 'Info-help ; \"h\" \"\\C-t\" 'Info-history-back ; \"l\" \"\\C-o\" 'Info-history-back \" \" 'Info-scroll-up \"\\C-]\" 'Info-follow-nearest-node (kbd \"DEL\") 'Info-scroll-down) (evil-add-hjkl-bindings speedbar-key-map 'motion \"h\" 'backward-char \"j\" 'speedbar-next \"k\" 'speedbar-prev \"l\" 'forward-char \"i\" 'speedbar-item-info \"r\" 'speedbar-refresh \"u\" 'speedbar-up-directory \"o\" 'speedbar-toggle-line-expansion (kbd \"RET\") 'speedbar-edit-line) (eval-after-load 'ibuffer '(progn (defvar ibuffer-mode-map) (evil-make-overriding-map ibuffer-mode-map 'normal) (evil-define-key 'normal ibuffer-mode-map \"j\" 'evil-next-line \"k\" 'evil-previous-line \"RET\" 'ibuffer-visit-buffer))) (eval-after-load 'ag '(progn (defvar ag-mode-map) (add-to-list 'evil-motion-state-modes 'ag-mode) (evil-add-hjkl-bindings ag-mode-map 'motion))) ;;; ELP (eval-after-load 'elp '(defadvice elp-results (after evil activate) (evil-motion-state)))","title":"dird"},{"location":"snippets/","text":"Snippets - Common code templates \u03bb\ufe0e Snippets are names that expand to code or documentation, to minimise typing commonly used code pattern and can serve as a reminder of common Clojure forms. The content of a snippet can be anything, from a simple piece of text or a more involved code structure with placeholders for tab stops. Practicalli also uses snippets for rich code blocks, documentation and helping organise code in a namespace. Snippets can include code which is evaluated, allowing the snippet to tap into all the features of Emacs (Yasnippets) or Clojure (Clojure LSP). Emacs Yasnippets \u03bb\ufe0e YASnippets uses plain text templates and so are very easy to learn and write. Snippets are specific to an Emacs major mode. They include tab stops, placoders with default values and markers to ensure correct indentation. M-/ expands the text under the point by any of the methods registered with hippie-expand. Yasnippets is one of the methods registered. TAB will jump through the expanded snippet if it contains markers. For example, defn is a snippet that expands into the full function definition form, tab stops jump the cursor through the snippet to add specific values to quickly complete the specifics of that function definition. Yasnippets can also execute Elisp code, opening up a large number of Emacs functions to use within a snippet. Spacemacs automatically includes snippets for many programming languages and text formats , including snippets for Clojure . Hint::Start REPL for autocomplete menu entries \u03bb\ufe0e Private snippets only appear in the auto-completion popup once the REPL process has started. Clojure LSP snippets \u03bb\ufe0e Clojure LSP snippets are editor agnostic (although the editor needs to support Clojure LSP). Snippets support tab stops, placeholders with default values and can pull in a following form ( $current-form ). Built-in snippets appear in the completion menu when typing. Custom snippets are defined in the Clojure LSP configuration using the :additional-snipets key.","title":"Snippets - Common code templates"},{"location":"snippets/#snippets-common-code-templates","text":"Snippets are names that expand to code or documentation, to minimise typing commonly used code pattern and can serve as a reminder of common Clojure forms. The content of a snippet can be anything, from a simple piece of text or a more involved code structure with placeholders for tab stops. Practicalli also uses snippets for rich code blocks, documentation and helping organise code in a namespace. Snippets can include code which is evaluated, allowing the snippet to tap into all the features of Emacs (Yasnippets) or Clojure (Clojure LSP).","title":"Snippets - Common code templates"},{"location":"snippets/#emacs-yasnippets","text":"YASnippets uses plain text templates and so are very easy to learn and write. Snippets are specific to an Emacs major mode. They include tab stops, placoders with default values and markers to ensure correct indentation. M-/ expands the text under the point by any of the methods registered with hippie-expand. Yasnippets is one of the methods registered. TAB will jump through the expanded snippet if it contains markers. For example, defn is a snippet that expands into the full function definition form, tab stops jump the cursor through the snippet to add specific values to quickly complete the specifics of that function definition. Yasnippets can also execute Elisp code, opening up a large number of Emacs functions to use within a snippet. Spacemacs automatically includes snippets for many programming languages and text formats , including snippets for Clojure .","title":"Emacs Yasnippets"},{"location":"snippets/#hintstart-repl-for-autocomplete-menu-entries","text":"Private snippets only appear in the auto-completion popup once the REPL process has started.","title":"Hint::Start REPL for autocomplete menu entries"},{"location":"snippets/#clojure-lsp-snippets","text":"Clojure LSP snippets are editor agnostic (although the editor needs to support Clojure LSP). Snippets support tab stops, placeholders with default values and can pull in a following form ( $current-form ). Built-in snippets appear in the completion menu when typing. Custom snippets are defined in the Clojure LSP configuration using the :additional-snipets key.","title":"Clojure LSP snippets"},{"location":"snippets/clojure-lsp/","text":"Clojure LSP Snippets \u03bb\ufe0e Type the name of the snippet and press TAB to expand. Clojure LSP snippets appear in the completion popup, in the same way as Clojure functions and other symbols. Clojure LSP snippets are editor agnostic, usable in any editor that supports clojure-lsp , making them more useful that editor specific snippets. Clojure LSP snippets are defined using the EDN syntax and supports tab stops, placeholders with default values and can pull in a following form ( $current-form ). Built-in snippets are defined in the clojure-lsp.feature.completion-snippet namespace . WARNING::Snippets only show inside an existing form \u03bb\ufe0e Clojure LSP snippets will work at the top level (not just inside a form) in the next release of Clojure LSP, after 2022.01.22-01.31.09 Checking available snippets \u03bb\ufe0e lsp-clojure-server-info function prints the Clojure LSP configuration to the message buffer, The :additional-snippets top level key contains the user configuration. :additional-snippets [{ :name \"def-docstring\" , :detail \"def with docstring\" , :snippet \"(def \\\"$1\\\" $0)\" } { :name \"deftest\" , :detail \"deftest clojure.test\" , :snippet \"(deftest ${1:name}-test\\n (testing \\\"${2:Context of the test assertions}\\\"\\n (is (= ${3:assertion-values}))$4))\\n $0\" }] :project-settings contain snippets defined in the project .lsp/config.edn file :project-settings { :additional-snippets [{ :name \"def-docstring\" , :detail \"def with docstring\" , :snippet \"(def \\\"$1\\\" $0)\" }]}","title":"Clojure LSP Snippets"},{"location":"snippets/clojure-lsp/#clojure-lsp-snippets","text":"Type the name of the snippet and press TAB to expand. Clojure LSP snippets appear in the completion popup, in the same way as Clojure functions and other symbols. Clojure LSP snippets are editor agnostic, usable in any editor that supports clojure-lsp , making them more useful that editor specific snippets. Clojure LSP snippets are defined using the EDN syntax and supports tab stops, placeholders with default values and can pull in a following form ( $current-form ). Built-in snippets are defined in the clojure-lsp.feature.completion-snippet namespace .","title":"Clojure LSP Snippets"},{"location":"snippets/clojure-lsp/#warningsnippets-only-show-inside-an-existing-form","text":"Clojure LSP snippets will work at the top level (not just inside a form) in the next release of Clojure LSP, after 2022.01.22-01.31.09","title":"WARNING::Snippets only show inside an existing form"},{"location":"snippets/clojure-lsp/#checking-available-snippets","text":"lsp-clojure-server-info function prints the Clojure LSP configuration to the message buffer, The :additional-snippets top level key contains the user configuration. :additional-snippets [{ :name \"def-docstring\" , :detail \"def with docstring\" , :snippet \"(def \\\"$1\\\" $0)\" } { :name \"deftest\" , :detail \"deftest clojure.test\" , :snippet \"(deftest ${1:name}-test\\n (testing \\\"${2:Context of the test assertions}\\\"\\n (is (= ${3:assertion-values}))$4))\\n $0\" }] :project-settings contain snippets defined in the project .lsp/config.edn file :project-settings { :additional-snippets [{ :name \"def-docstring\" , :detail \"def with docstring\" , :snippet \"(def \\\"$1\\\" $0)\" }]}","title":"Checking available snippets"},{"location":"snippets/clojure-lsp/custom-snippets/","text":"Custom snippets for Clojure LSP \u03bb\ufe0e Custom snippets are defined in the Clojure LSP EDN configuration using the :additional-snipets key. The snippet body uses the same tab stop and placeholder syntax as Yasnipets, although the body is contained within a string. Built-in snippets can include Clojure code for generating the text of the snippet when expanded. Custom snippets do not currently support evaluation of code in the snippet. Hint::Clojuse LSP Configuration locations \u03bb\ufe0e Project specific configuration resides in .lsp/config.edn User level configuration is either $XDG_CONFIG_HOME/clojure-lsp/config.edn or $HOME/.lsp/config Snippet definition \u03bb\ufe0e The :additional-snippets key is associated with a vector or hash-maps, [{}{},,,] with each hash-map defining a snippet using the keys: :name - name of the snippet, typed into the editor for completion :detail - a meaningful description of the snippet :snippet - the definition of the snippet, with tab stops and current-form syntax The :snippet can be any text, ideally with syntax that is correct for the particular language Snippet Tab Stops \u03bb\ufe0e Include $ with a number, e.g. $1 , $2 , $3 , to include tab stops in the snippet. Once the snippet code has been generated, TAB key jumps through the tab stops in sequence, allowing customisation of a generic snippet. $0 marks the final position of the cursor, after which TAB has no more positions in the snippet to jump to. Snippet current-form \u03bb\ufe0e When a Clojure LSP snipped includes $current-form then typing a snippet name in front of an existing Clojure form includes that form in the generated code. { :additional-snippets [{ :name \"wrap-let-sexpr\" :detail \"Wrap current sexpr in let\" :snippet \"(let [$1 $current-form] $0)\" }]} WARNING::Limited scope with current-form \u03bb\ufe0e A Snippet including $current-form is only active when typed in front of an existing expression. A snippet is not recognised when typed at the top level. Placeholders \u03bb\ufe0e Tab Stops can also include default values or text used as hint on what each tab stop value is for. These are referred to as placeholders. ${1:default-value} is the form of a placeholder for tab stop 1. When the cursor tabs to tab stop 1, the default-value text is highlighted and replaces as soon as characters are typed. Placeholder text is not replaced for $0 tab-stop, as the snippet interaction is effectively over at this point. The deftest custom snippet shows examples of placeholders for three tab stops. { :name \"deftest\" :detail \"deftest clojure.test\" :snippet \"(deftest ${1:name}-test (testing \\\"${2:Context of the test assertions}\\\" (is (= ${3:assertion-values}))$4)) $0\" } Hint::Escape string quotes in snippet body \u03bb\ufe0e Use \\ character before the open and closing \" character of any string that is part of the snippet body. For example, doc-strings in function definitions or the string in testing function. Clojure code driven snippet - built-in snippets only \u03bb\ufe0e The built-in defn snippet uses Clojure code to help generate the snippet. %s is a substitution point within a snippet, used by the standard Clojure format command, used to included either defn ^:private or defn- , depending on the value returned from the if expression. :use-metadata-for-privacy? is a key from the Clojure LSP configuration { :label \"defn-\" :detail \"Create private function\" :insert-text ( format \"(defn%s ${1:name} [$2]\\n ${0:body})\" ( if ( :use-metadata-for-privacy? settings ) \" ^:private\" \"-\" ))} The syntax for built-in snippets is slightly different that the :additional-syntax form. The internal form uses :label for :name and :insert-text for :snippet . Hint:: \u03bb\ufe0e Clojure code only works for built-in snippets and not for :additional-snippets . Clojure LSP is compiled by Graal to a native binary, including the built-in snippets. To include Clojure code in a snippet then consider submitting a pull request to the Clojure LSP project to add a built-in snippet.","title":"Custom snippets for Clojure LSP"},{"location":"snippets/clojure-lsp/custom-snippets/#custom-snippets-for-clojure-lsp","text":"Custom snippets are defined in the Clojure LSP EDN configuration using the :additional-snipets key. The snippet body uses the same tab stop and placeholder syntax as Yasnipets, although the body is contained within a string. Built-in snippets can include Clojure code for generating the text of the snippet when expanded. Custom snippets do not currently support evaluation of code in the snippet.","title":"Custom snippets for Clojure LSP"},{"location":"snippets/clojure-lsp/custom-snippets/#hintclojuse-lsp-configuration-locations","text":"Project specific configuration resides in .lsp/config.edn User level configuration is either $XDG_CONFIG_HOME/clojure-lsp/config.edn or $HOME/.lsp/config","title":"Hint::Clojuse LSP Configuration locations"},{"location":"snippets/clojure-lsp/custom-snippets/#snippet-definition","text":"The :additional-snippets key is associated with a vector or hash-maps, [{}{},,,] with each hash-map defining a snippet using the keys: :name - name of the snippet, typed into the editor for completion :detail - a meaningful description of the snippet :snippet - the definition of the snippet, with tab stops and current-form syntax The :snippet can be any text, ideally with syntax that is correct for the particular language","title":"Snippet definition"},{"location":"snippets/clojure-lsp/custom-snippets/#snippet-tab-stops","text":"Include $ with a number, e.g. $1 , $2 , $3 , to include tab stops in the snippet. Once the snippet code has been generated, TAB key jumps through the tab stops in sequence, allowing customisation of a generic snippet. $0 marks the final position of the cursor, after which TAB has no more positions in the snippet to jump to.","title":"Snippet Tab Stops"},{"location":"snippets/clojure-lsp/custom-snippets/#snippet-current-form","text":"When a Clojure LSP snipped includes $current-form then typing a snippet name in front of an existing Clojure form includes that form in the generated code. { :additional-snippets [{ :name \"wrap-let-sexpr\" :detail \"Wrap current sexpr in let\" :snippet \"(let [$1 $current-form] $0)\" }]}","title":"Snippet current-form"},{"location":"snippets/clojure-lsp/custom-snippets/#warninglimited-scope-with-current-form","text":"A Snippet including $current-form is only active when typed in front of an existing expression. A snippet is not recognised when typed at the top level.","title":"WARNING::Limited scope with current-form"},{"location":"snippets/clojure-lsp/custom-snippets/#placeholders","text":"Tab Stops can also include default values or text used as hint on what each tab stop value is for. These are referred to as placeholders. ${1:default-value} is the form of a placeholder for tab stop 1. When the cursor tabs to tab stop 1, the default-value text is highlighted and replaces as soon as characters are typed. Placeholder text is not replaced for $0 tab-stop, as the snippet interaction is effectively over at this point. The deftest custom snippet shows examples of placeholders for three tab stops. { :name \"deftest\" :detail \"deftest clojure.test\" :snippet \"(deftest ${1:name}-test (testing \\\"${2:Context of the test assertions}\\\" (is (= ${3:assertion-values}))$4)) $0\" }","title":"Placeholders"},{"location":"snippets/clojure-lsp/custom-snippets/#hintescape-string-quotes-in-snippet-body","text":"Use \\ character before the open and closing \" character of any string that is part of the snippet body. For example, doc-strings in function definitions or the string in testing function.","title":"Hint::Escape string quotes in snippet body"},{"location":"snippets/clojure-lsp/custom-snippets/#clojure-code-driven-snippet-built-in-snippets-only","text":"The built-in defn snippet uses Clojure code to help generate the snippet. %s is a substitution point within a snippet, used by the standard Clojure format command, used to included either defn ^:private or defn- , depending on the value returned from the if expression. :use-metadata-for-privacy? is a key from the Clojure LSP configuration { :label \"defn-\" :detail \"Create private function\" :insert-text ( format \"(defn%s ${1:name} [$2]\\n ${0:body})\" ( if ( :use-metadata-for-privacy? settings ) \" ^:private\" \"-\" ))} The syntax for built-in snippets is slightly different that the :additional-syntax form. The internal form uses :label for :name and :insert-text for :snippet .","title":"Clojure code driven snippet - built-in snippets only"},{"location":"snippets/clojure-lsp/custom-snippets/#hint","text":"Clojure code only works for built-in snippets and not for :additional-snippets . Clojure LSP is compiled by Graal to a native binary, including the built-in snippets. To include Clojure code in a snippet then consider submitting a pull request to the Clojure LSP project to add a built-in snippet.","title":"Hint::"},{"location":"snippets/clojure-lsp/practicalli-snippets/","text":"Practicalli Snippets for Clojure LSP \u03bb\ufe0e Custom snippets created by Practicalli and added via the :additional-snippets key in the Clojure LSP configuration ( .lsp/config.edn or user level configuration). Snippets are defined as a vector of hash-maps { :additional-snippets [{} {} {} ,,, ]} Hint::Install Practicalli Custom Snippets \u03bb\ufe0e Install practicalli/clojure-lsp-snippets guide Documentation \u03bb\ufe0e A comment heading to describe the purpose and important information about the current namesapce. { :name \"comment-heading\" :detail \"Comment Header\" :snippet \";; --------------------------------------------------------- ;; ${1:Heading summary title} ;; ;; ${2:Brief description}\\n;; ---------------------------------------------------------\\n\\n$0\" } A comment separator for marking logical sections within a namespace, useful for navigating code and identifying opportunities to refactor a namespace into multiple namespaces. { :name \"comment-separator\" :detail \"Comment Separator\" :snippet \";; ---------------------------------------------------------\\n;; ${1:Section title}\\n\\n$0\" } A comment section with start and end titles for marking logical sections within a namespace, again for navigation and identifying opportunities to refactor a namespace. { :name \"comment-section\" :detail \"Comment Section\" :snippet \";; ---------------------------------------------------------\\n;; ${1:Section title}\\n\\n$0\\n\\n ;; End of $1\\n;; ---------------------------------------------------------\\n\\n\" } REPL Driven Development \u03bb\ufe0e A rich comment block typically used to hold function calls to show how to make use of the important aspects of the current namespace. For example, calls to start , restart , stop functions in a namespace that defines the service life-cycle. This provides a live executable guide to using the namespace, without being called if the whole namespace is evaluated. A commented expression is placed before the closing paren to ensure that closing paren is not folded up into the previous line. This makes it easier to add further code to the rich comment block. { :name \"rich-comment\" :detail \"Create rich comment\" :snippet \"(comment $0 #_()) ;; End of rich comment\" } A modified rich comment block with clj-kondo configuration to suppress warnings for duplicate function definition names, supporting alternative function implementations as part of a REPL driven development workflow. { :name \"rich-comment-rdd\" :detail \"Create comment block\" :snippet \"#_{:clj-kondo/ignore [:redefined-var]} (comment $0 #_()) ;; End of rich comment\" } Wrap an existing form in a rich comment { :name \"wrap-rich-comment\" :detail \"Wrap current expression with rich comment form\" :snippet \"(comment $current-form $0 #_()) ;; End of rich comment\" } Comment an existing form with the Clojure Comment macro, _# { :name \"wrap-reader-comment\" :detail \"Wrap current expression with Comment Reader macro\" :snippet \"#_$current-form\" } Hot loading library dependencies \u03bb\ufe0e Clojure CLI projects can hotload library dependencies into a running Clojure REPL using the tools.deps library . This requires starting a REPL with the clojure.tools.deps.alpha library as a dependency which can be done by including the :lib/hotload alias from practicalli/clojure-deps-edn . Note this library is alpha and the API could change in future. Create a rich comment block that requires the clojure.tools.deps.alpha namespace and an add-libs expression to hotload one or more libraries in a hash-map. Tab stops with placeholders are included for adding the first library to hotload. { :name \"rich-comment-hotload\" :detail \"Rich comment library hotload\" :snippet \"#_{:clj-kondo/ignore [:redefined-var]} (comment ;; Add-lib library for hot-loading (require '[clojure.tools.deps.alpha.repl :refer [add-libs]]) (add-libs '{${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$3}) $0 #_()) ;; End of rich comment block\" } Core functions \u03bb\ufe0e Create a public var using a def form with a doc-string, with placeholders for name and value. { :name \"def\" :detail \"def with docstring\" :snippet \"(def ${1:name}\\n \\\"${2:docstring}\\\"\\n $0)\" } Create a private var using a def form with ^:private meta data and a doc-string, with placeholders for name and value. { :name \"def-\" :detail \"def private\" :snippet \"(def ^:private ${1:name}\\n \\\"${2:doc-string}\\\"\\n $0)\" } A defn form with name, doc-string and args tab-stops { :name \"defn\" :detail \"Create public function\" :snippet \"(defn ${1:name}\\n \\\"${2:docstring}\\\"\\n [${3:args}]\\n $0)\" } A defn form with private metatdata. Including name, doc-string and args tab-stops { :name \"defn-\" :detail \"Create public function\" :snippet \"(defn ^:private ${1:name}\\n \\\"${2:docstring}\\\"\\n [${3:args}]\\n $0)\" } A namespace form with name, doc-string and require tab-stop. { :name \"ns\" :detail \"Create ns\" :snippet \"(ns ${1:name}\\n \\\"${2:docstring}\\\"\\n ${3:require})\" } Clojure CLI aliases and library dependencies \u03bb\ufe0e Add Clojure CLI alias to deps.edn , with an :extra-paths and :extra-deps section { :name \"deps-alias\" :detail \"deps.edn alias with extra path & deps\" :snippet \":${1:category/name} {:extra-paths [\\\"${2:path}\\\"] :extra-deps {${3:deps-maven or deps-git}}}$0\" } Add a Maven style dependency to a Clojure CLI deps.edn project. { :name \"deps-maven\" :detail \"deps.edn Maven dependency\" :snippet \"${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$0\" } Add a dependency from a Git repository, where the library is named after the remote Git repository, i.e io.github.user|org/library-name for the GitHub repository https://github.com/user|org/library-name . The :git/sha defines a specific commit to use for the dependency. { :name \"deps-git\" :detail \"deps.edn Git dependency\" :snippet \"${1:domain/library-name} {:git/sha \\\"${2:git-sha-value}\\\"}$0\" } Additionally a Git tag can be specified, enabling the use of the short SHA value for :git/sha (short sha is the first 7 characters of the 40 character SHA-1 value). A Git client can obtain the short form of a SHA from a Git repository git rev-parse --short 1e872b59013425b7c404a91d16119e8452b983f2 { :name \"deps-git-tag\" :detail \"Git dependency\" :snippet \"${1:domain/library-name} {:git/tag \\\"${2:git-tag-value}\\\" :git/sha \\\"${3:git-sha-value}\\\"}$0\" } If a library is not named after the domain of the Git repository, the URL of the Git repository must be specified using the :git/url key. { :name \"deps-git-url\" :detail \"Git URL dependency\" :snippet \"${1:domain/library-name} {:git/url \\\"https://github.com/$1\\\" :git/sha \\\"${2:git-sha-value}\\\"}$0\" } Add a library dependency that is a local Clojure project. { :name \"deps-local\" :detail \"deps.edn Maven dependency\" :snippet \"${1:domain/library-name} {:local/root \\\"${2:/path/to/project/root}\\\"}$0\" } Require Library Dependencies \u03bb\ufe0e Require a library when using REPL driven development in a rich comment block, adding a (require ,,,) form when evaluating the use of a library without forcing it to be loaded when loading the namespace. { :name \"require-rdd\" :detail \"require for rich comment experiments\" :snippet \"(require '[${1:namespace} :as ${2:alias}]$3)$0\" } A basic :require expression for an ns form. { :name \"require\" :detail \"ns require\" :snippet \"(:require [${1:namespace}])$0\" } A :require expression for an ns form, including a :as directive to define an alias for the required namespace. { :name \"require-as\" :detail \"ns require with :as alias\" :snippet \"(:require [${1:namespace} :as ${2:alias}]$3)$0\" } A :require expression for an ns form, including a :refer directive to include specific function definitions and vars by name. { :name \"require-refer\" :detail \"ns require with :refer\" :snippet \"(:require [${1:namespace} :refer [$2]]$3)$0\" } It is idiomatic to use require with refer to pull in specific functions and vars from another namespace. The use function is not recommended as it can easily pull more transitive dependencies into the current namespace, causing unexpected results { :name \"use\" :detail \"require refer preferred over use\" :snippet \"(:require [${1:namespace} :refer [$2]])$0\" } Clojure.test snippets \u03bb\ufe0e When writing a deftest , a new assertion written may be better in a new group. The testing snippet will create a new testing form and pull in the following assertion. { :name \"deftest\" :detail \"deftest clojure.test\" :snippet \"(deftest ${1:name}-test (testing \\\"${2:Context of the test assertions}\\\" (is (= ${3:assertion-values}))$4)) $0\" } Create a new assertion group using the clojure.test/testing form. Using testing before an assertion form pull that assertion into the group { :name \"testing\" :detail \"testing clojure.test\" :snippet \"(testing \\\"${1:description-of-assertion-group}\\\"\\n $0)\" } Define an is assertion for a deftest { :name \"is\" :detail \"assertion for clojure.test\" :snippet \"(is (= ${1:function call} ${2:expected result}))$0\" }","title":"Practicalli Snippets for Clojure LSP"},{"location":"snippets/clojure-lsp/practicalli-snippets/#practicalli-snippets-for-clojure-lsp","text":"Custom snippets created by Practicalli and added via the :additional-snippets key in the Clojure LSP configuration ( .lsp/config.edn or user level configuration). Snippets are defined as a vector of hash-maps { :additional-snippets [{} {} {} ,,, ]}","title":"Practicalli Snippets for Clojure LSP"},{"location":"snippets/clojure-lsp/practicalli-snippets/#hintinstall-practicalli-custom-snippets","text":"Install practicalli/clojure-lsp-snippets guide","title":"Hint::Install Practicalli Custom Snippets"},{"location":"snippets/clojure-lsp/practicalli-snippets/#documentation","text":"A comment heading to describe the purpose and important information about the current namesapce. { :name \"comment-heading\" :detail \"Comment Header\" :snippet \";; --------------------------------------------------------- ;; ${1:Heading summary title} ;; ;; ${2:Brief description}\\n;; ---------------------------------------------------------\\n\\n$0\" } A comment separator for marking logical sections within a namespace, useful for navigating code and identifying opportunities to refactor a namespace into multiple namespaces. { :name \"comment-separator\" :detail \"Comment Separator\" :snippet \";; ---------------------------------------------------------\\n;; ${1:Section title}\\n\\n$0\" } A comment section with start and end titles for marking logical sections within a namespace, again for navigation and identifying opportunities to refactor a namespace. { :name \"comment-section\" :detail \"Comment Section\" :snippet \";; ---------------------------------------------------------\\n;; ${1:Section title}\\n\\n$0\\n\\n ;; End of $1\\n;; ---------------------------------------------------------\\n\\n\" }","title":"Documentation"},{"location":"snippets/clojure-lsp/practicalli-snippets/#repl-driven-development","text":"A rich comment block typically used to hold function calls to show how to make use of the important aspects of the current namespace. For example, calls to start , restart , stop functions in a namespace that defines the service life-cycle. This provides a live executable guide to using the namespace, without being called if the whole namespace is evaluated. A commented expression is placed before the closing paren to ensure that closing paren is not folded up into the previous line. This makes it easier to add further code to the rich comment block. { :name \"rich-comment\" :detail \"Create rich comment\" :snippet \"(comment $0 #_()) ;; End of rich comment\" } A modified rich comment block with clj-kondo configuration to suppress warnings for duplicate function definition names, supporting alternative function implementations as part of a REPL driven development workflow. { :name \"rich-comment-rdd\" :detail \"Create comment block\" :snippet \"#_{:clj-kondo/ignore [:redefined-var]} (comment $0 #_()) ;; End of rich comment\" } Wrap an existing form in a rich comment { :name \"wrap-rich-comment\" :detail \"Wrap current expression with rich comment form\" :snippet \"(comment $current-form $0 #_()) ;; End of rich comment\" } Comment an existing form with the Clojure Comment macro, _# { :name \"wrap-reader-comment\" :detail \"Wrap current expression with Comment Reader macro\" :snippet \"#_$current-form\" }","title":"REPL Driven Development"},{"location":"snippets/clojure-lsp/practicalli-snippets/#hot-loading-library-dependencies","text":"Clojure CLI projects can hotload library dependencies into a running Clojure REPL using the tools.deps library . This requires starting a REPL with the clojure.tools.deps.alpha library as a dependency which can be done by including the :lib/hotload alias from practicalli/clojure-deps-edn . Note this library is alpha and the API could change in future. Create a rich comment block that requires the clojure.tools.deps.alpha namespace and an add-libs expression to hotload one or more libraries in a hash-map. Tab stops with placeholders are included for adding the first library to hotload. { :name \"rich-comment-hotload\" :detail \"Rich comment library hotload\" :snippet \"#_{:clj-kondo/ignore [:redefined-var]} (comment ;; Add-lib library for hot-loading (require '[clojure.tools.deps.alpha.repl :refer [add-libs]]) (add-libs '{${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$3}) $0 #_()) ;; End of rich comment block\" }","title":"Hot loading library dependencies"},{"location":"snippets/clojure-lsp/practicalli-snippets/#core-functions","text":"Create a public var using a def form with a doc-string, with placeholders for name and value. { :name \"def\" :detail \"def with docstring\" :snippet \"(def ${1:name}\\n \\\"${2:docstring}\\\"\\n $0)\" } Create a private var using a def form with ^:private meta data and a doc-string, with placeholders for name and value. { :name \"def-\" :detail \"def private\" :snippet \"(def ^:private ${1:name}\\n \\\"${2:doc-string}\\\"\\n $0)\" } A defn form with name, doc-string and args tab-stops { :name \"defn\" :detail \"Create public function\" :snippet \"(defn ${1:name}\\n \\\"${2:docstring}\\\"\\n [${3:args}]\\n $0)\" } A defn form with private metatdata. Including name, doc-string and args tab-stops { :name \"defn-\" :detail \"Create public function\" :snippet \"(defn ^:private ${1:name}\\n \\\"${2:docstring}\\\"\\n [${3:args}]\\n $0)\" } A namespace form with name, doc-string and require tab-stop. { :name \"ns\" :detail \"Create ns\" :snippet \"(ns ${1:name}\\n \\\"${2:docstring}\\\"\\n ${3:require})\" }","title":"Core functions"},{"location":"snippets/clojure-lsp/practicalli-snippets/#clojure-cli-aliases-and-library-dependencies","text":"Add Clojure CLI alias to deps.edn , with an :extra-paths and :extra-deps section { :name \"deps-alias\" :detail \"deps.edn alias with extra path & deps\" :snippet \":${1:category/name} {:extra-paths [\\\"${2:path}\\\"] :extra-deps {${3:deps-maven or deps-git}}}$0\" } Add a Maven style dependency to a Clojure CLI deps.edn project. { :name \"deps-maven\" :detail \"deps.edn Maven dependency\" :snippet \"${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$0\" } Add a dependency from a Git repository, where the library is named after the remote Git repository, i.e io.github.user|org/library-name for the GitHub repository https://github.com/user|org/library-name . The :git/sha defines a specific commit to use for the dependency. { :name \"deps-git\" :detail \"deps.edn Git dependency\" :snippet \"${1:domain/library-name} {:git/sha \\\"${2:git-sha-value}\\\"}$0\" } Additionally a Git tag can be specified, enabling the use of the short SHA value for :git/sha (short sha is the first 7 characters of the 40 character SHA-1 value). A Git client can obtain the short form of a SHA from a Git repository git rev-parse --short 1e872b59013425b7c404a91d16119e8452b983f2 { :name \"deps-git-tag\" :detail \"Git dependency\" :snippet \"${1:domain/library-name} {:git/tag \\\"${2:git-tag-value}\\\" :git/sha \\\"${3:git-sha-value}\\\"}$0\" } If a library is not named after the domain of the Git repository, the URL of the Git repository must be specified using the :git/url key. { :name \"deps-git-url\" :detail \"Git URL dependency\" :snippet \"${1:domain/library-name} {:git/url \\\"https://github.com/$1\\\" :git/sha \\\"${2:git-sha-value}\\\"}$0\" } Add a library dependency that is a local Clojure project. { :name \"deps-local\" :detail \"deps.edn Maven dependency\" :snippet \"${1:domain/library-name} {:local/root \\\"${2:/path/to/project/root}\\\"}$0\" }","title":"Clojure CLI aliases and library dependencies"},{"location":"snippets/clojure-lsp/practicalli-snippets/#require-library-dependencies","text":"Require a library when using REPL driven development in a rich comment block, adding a (require ,,,) form when evaluating the use of a library without forcing it to be loaded when loading the namespace. { :name \"require-rdd\" :detail \"require for rich comment experiments\" :snippet \"(require '[${1:namespace} :as ${2:alias}]$3)$0\" } A basic :require expression for an ns form. { :name \"require\" :detail \"ns require\" :snippet \"(:require [${1:namespace}])$0\" } A :require expression for an ns form, including a :as directive to define an alias for the required namespace. { :name \"require-as\" :detail \"ns require with :as alias\" :snippet \"(:require [${1:namespace} :as ${2:alias}]$3)$0\" } A :require expression for an ns form, including a :refer directive to include specific function definitions and vars by name. { :name \"require-refer\" :detail \"ns require with :refer\" :snippet \"(:require [${1:namespace} :refer [$2]]$3)$0\" } It is idiomatic to use require with refer to pull in specific functions and vars from another namespace. The use function is not recommended as it can easily pull more transitive dependencies into the current namespace, causing unexpected results { :name \"use\" :detail \"require refer preferred over use\" :snippet \"(:require [${1:namespace} :refer [$2]])$0\" }","title":"Require Library Dependencies"},{"location":"snippets/clojure-lsp/practicalli-snippets/#clojuretest-snippets","text":"When writing a deftest , a new assertion written may be better in a new group. The testing snippet will create a new testing form and pull in the following assertion. { :name \"deftest\" :detail \"deftest clojure.test\" :snippet \"(deftest ${1:name}-test (testing \\\"${2:Context of the test assertions}\\\" (is (= ${3:assertion-values}))$4)) $0\" } Create a new assertion group using the clojure.test/testing form. Using testing before an assertion form pull that assertion into the group { :name \"testing\" :detail \"testing clojure.test\" :snippet \"(testing \\\"${1:description-of-assertion-group}\\\"\\n $0)\" } Define an is assertion for a deftest { :name \"is\" :detail \"assertion for clojure.test\" :snippet \"(is (= ${1:function call} ${2:expected result}))$0\" }","title":"Clojure.test snippets"},{"location":"snippets/yasnippets/","text":"Yasnippets \u03bb\ufe0e YASnippets uses plain text templates and so are very easy to learn and write. Snippets are specific to an Emacs major mode. They include tab stops, placoders with default values and markers to ensure correct indentation. Yasnippets can also execute Elisp code, opening up a large number of Emacs functions to use within a snippet. Spacemacs automatically includes snippets for many programming languages and text formats , including snippets for Clojure . Take a look at how to write your own snippets and the custom snippets created by Practicalli Configure yasnippet \u03bb\ufe0e The auto-completion layer adds yasnippet and the official snippet collection, yasnippet-snippets. Add auto-completion to the dotspacemacs-configuration-layers list in .spacemacs The clojure layer providing additional snippet templates from the clojure-snippets package. Hint:: practicalli/spacemacs.d includes this configuration \u03bb\ufe0e Snippets in Auto-completion popups \u03bb\ufe0e Snippets can be included in the auto-complete pop-up menu. TAB to navigate through the list of menu items. RET to select the snippet and add the template to the buffer. Add the layer variable auto-completion-enable-snippets-in-popup t to the auto-completion layer in .spacemacs . Practicalli also recommends adding auto-completion-enable-sort-by-usage t to show the most commonly used snippets at the top of the auto-completion pop-up menu. ( auto-completion :variables auto-completion-enable-help-tooltip t auto-completion-enable-snippets-in-popup t auto-completion-enable-sort-by-usage t ) Snippet save locations \u03bb\ufe0e Snippets are saved in ~/.emacs.d/private/snippets/ . When ~/.spacemacs.d is used for the Spacemacs configuration, snippets are saved in ~/.spacemacs.d/snippets/ directory. Each snippet is saved in its own file, named after the alias of the snippet. The snippet file is located in a directory named after the Emacs major mode it belongs to. A snippet called wip for Clojure has a file name wip and is in saved in directory named clojure . Resources \u03bb\ufe0e How to make better use of Yasnippet in my Emacs workflow - Sacha Chua","title":"Index"},{"location":"snippets/yasnippets/#yasnippets","text":"YASnippets uses plain text templates and so are very easy to learn and write. Snippets are specific to an Emacs major mode. They include tab stops, placoders with default values and markers to ensure correct indentation. Yasnippets can also execute Elisp code, opening up a large number of Emacs functions to use within a snippet. Spacemacs automatically includes snippets for many programming languages and text formats , including snippets for Clojure . Take a look at how to write your own snippets and the custom snippets created by Practicalli","title":"Yasnippets"},{"location":"snippets/yasnippets/#configure-yasnippet","text":"The auto-completion layer adds yasnippet and the official snippet collection, yasnippet-snippets. Add auto-completion to the dotspacemacs-configuration-layers list in .spacemacs The clojure layer providing additional snippet templates from the clojure-snippets package.","title":"Configure yasnippet"},{"location":"snippets/yasnippets/#hintpracticallispacemacsd-includes-this-configuration","text":"","title":"Hint::practicalli/spacemacs.d includes this configuration"},{"location":"snippets/yasnippets/#snippets-in-auto-completion-popups","text":"Snippets can be included in the auto-complete pop-up menu. TAB to navigate through the list of menu items. RET to select the snippet and add the template to the buffer. Add the layer variable auto-completion-enable-snippets-in-popup t to the auto-completion layer in .spacemacs . Practicalli also recommends adding auto-completion-enable-sort-by-usage t to show the most commonly used snippets at the top of the auto-completion pop-up menu. ( auto-completion :variables auto-completion-enable-help-tooltip t auto-completion-enable-snippets-in-popup t auto-completion-enable-sort-by-usage t )","title":"Snippets in Auto-completion popups"},{"location":"snippets/yasnippets/#snippet-save-locations","text":"Snippets are saved in ~/.emacs.d/private/snippets/ . When ~/.spacemacs.d is used for the Spacemacs configuration, snippets are saved in ~/.spacemacs.d/snippets/ directory. Each snippet is saved in its own file, named after the alias of the snippet. The snippet file is located in a directory named after the Emacs major mode it belongs to. A snippet called wip for Clojure has a file name wip and is in saved in directory named clojure .","title":"Snippet save locations"},{"location":"snippets/yasnippets/#resources","text":"How to make better use of Yasnippet in my Emacs workflow - Sacha Chua","title":"Resources"},{"location":"snippets/yasnippets/built-in-snippets/","text":"Yasnippet Built-in Snippets \u03bb\ufe0e Yasnippet official snippet collection contains Emacs mode specific snippets that are automatically included in Spacemacs. Web-mode HTML Link \u03bb\ufe0e In web major mode, typing link and pressing M-/ expands to <link rel=\"stylesheet\" href=\"url\" type=\"text/css\" media=\"screen\" /> placing the cursor on stylesheet . TAB moves the cursor to url to change the name of the CSS file. TAB again until the end marker is reached. Clojure mode snippets \u03bb\ufe0e There are numerous snippets that provide short-cuts for the minimal amount of common code structure in Clojure. defn M-/ will expand to a function definition expression with the cursor in the position for the function name. TAB will jump to the argument list, docstring and body of the function definition in turn. With snippets added to the auto-completion tooltip, typing def show the matching snippets and function names. Where a menu item as an -> it denotes a snippet, e.g. def -> def and defn -> defn . Common Clojure snippets include \u03bb\ufe0e Snippet Description Tab Stops defn defn function definition name, docstring, args, body for for iterative macro condition, body if if conditional expression condition, body ifl if-let - if true, bind local name binding, body let let - bind a local name to value name, value, body map.lambda map with anonymous function #() fn, body ns ns - current namespace inserted automatically N/A reduce reduce - reduce expression with an anonymous function args, body require :require expression with library and alias library, alias test deftest expression test description, value/expected See the Clojure Snippets for a complete reference Hint::Write your own snippets \u03bb\ufe0e Its easy to write your own snippets for Clojure or any other language you use with Spacemacs / Emacs Clojure namespace snippet \u03bb\ufe0e The ns snippet adds a namespace expression with the namespace of the current file, this requires a running REPL. SPC f f to create a new file, using underscores in the file name to separate words. Any underscores in the file name are converted into dashes in the ns definition Type ns and then M-/ to expand the snippet, which included the namespace of the current file. If using snippets with auto-completion tool-tips, TAB or arrow keys to select ns -> ns snippet, RET to insert snippet using the buffer file name","title":"Built in snippets"},{"location":"snippets/yasnippets/built-in-snippets/#yasnippet-built-in-snippets","text":"Yasnippet official snippet collection contains Emacs mode specific snippets that are automatically included in Spacemacs.","title":"Yasnippet Built-in Snippets"},{"location":"snippets/yasnippets/built-in-snippets/#web-mode-html-link","text":"In web major mode, typing link and pressing M-/ expands to <link rel=\"stylesheet\" href=\"url\" type=\"text/css\" media=\"screen\" /> placing the cursor on stylesheet . TAB moves the cursor to url to change the name of the CSS file. TAB again until the end marker is reached.","title":"Web-mode HTML Link"},{"location":"snippets/yasnippets/built-in-snippets/#clojure-mode-snippets","text":"There are numerous snippets that provide short-cuts for the minimal amount of common code structure in Clojure. defn M-/ will expand to a function definition expression with the cursor in the position for the function name. TAB will jump to the argument list, docstring and body of the function definition in turn. With snippets added to the auto-completion tooltip, typing def show the matching snippets and function names. Where a menu item as an -> it denotes a snippet, e.g. def -> def and defn -> defn .","title":"Clojure mode snippets"},{"location":"snippets/yasnippets/built-in-snippets/#common-clojure-snippets-include","text":"Snippet Description Tab Stops defn defn function definition name, docstring, args, body for for iterative macro condition, body if if conditional expression condition, body ifl if-let - if true, bind local name binding, body let let - bind a local name to value name, value, body map.lambda map with anonymous function #() fn, body ns ns - current namespace inserted automatically N/A reduce reduce - reduce expression with an anonymous function args, body require :require expression with library and alias library, alias test deftest expression test description, value/expected See the Clojure Snippets for a complete reference","title":"Common Clojure snippets include"},{"location":"snippets/yasnippets/built-in-snippets/#hintwrite-your-own-snippets","text":"Its easy to write your own snippets for Clojure or any other language you use with Spacemacs / Emacs","title":"Hint::Write your own snippets"},{"location":"snippets/yasnippets/built-in-snippets/#clojure-namespace-snippet","text":"The ns snippet adds a namespace expression with the namespace of the current file, this requires a running REPL. SPC f f to create a new file, using underscores in the file name to separate words. Any underscores in the file name are converted into dashes in the ns definition Type ns and then M-/ to expand the snippet, which included the namespace of the current file. If using snippets with auto-completion tool-tips, TAB or arrow keys to select ns -> ns snippet, RET to insert snippet using the buffer file name","title":"Clojure namespace snippet"},{"location":"snippets/yasnippets/clojure-snippets-reference/","text":"Clojure snippets reference \u03bb\ufe0e Spacemacs includes the yasnippet official snippets repository and clojure-snippets package , providing an extensive collection of snippets for Clojure. Datomic snippets package contains specific snippets for Cognitect Datomic database mpenet/clojure-snippets has several additional Clojure snippets (although not included in Spacemacs by default) Hint::deftest snippet is called test \u03bb\ufe0e test may expand when typing the deftest name, which typically ends with -test . Add a space after the -test name to ensure its not expanded to another deftest expression when pressing TAB Snippet Description Tab Stops bench benchmark an expression, using the time function body bp deprecated: was break point in swank def def expression N/A defm defmacro expression, with name, doc-string, arguments & body tabstops name, docstring, args, body defn defn expression, with name, doc-string, arguments & body tabstops name, docstring, args, body defr defrecord docstring, object, args, body deft deftype docstring, object, args, body doseq doseq name, body fn fn - anonymous function name, body for for condition, body if if condition, body ifl if-let - if true, bind a local name binding, body import import java library library name is is - clojure test assertion value, expected let let - bind a local name to a value name, value, body map map fn, col, col map.lambda map with anonymous function #() fn, body mdoc metadata docstring docstring ns ns - expression with the current namespace inserted automatically N/A opts destructuring a map with :keys , :or for default values, :as for entire vector :key binding, or defaults, :as binding pr prn - print function string/value print println - print function string/value reduce reduce - reduce expression with an anonymous function args, body require :require expression with library and alias library, alias test deftest expression test description, value/expected try try & catch expression try expression, exception name, body use depreciated: use require instead when when when expression, body whenl when-let - local binding on when condition binding, body","title":"Clojure snippets reference"},{"location":"snippets/yasnippets/clojure-snippets-reference/#clojure-snippets-reference","text":"Spacemacs includes the yasnippet official snippets repository and clojure-snippets package , providing an extensive collection of snippets for Clojure. Datomic snippets package contains specific snippets for Cognitect Datomic database mpenet/clojure-snippets has several additional Clojure snippets (although not included in Spacemacs by default)","title":"Clojure snippets reference"},{"location":"snippets/yasnippets/clojure-snippets-reference/#hintdeftest-snippet-is-called-test","text":"test may expand when typing the deftest name, which typically ends with -test . Add a space after the -test name to ensure its not expanded to another deftest expression when pressing TAB Snippet Description Tab Stops bench benchmark an expression, using the time function body bp deprecated: was break point in swank def def expression N/A defm defmacro expression, with name, doc-string, arguments & body tabstops name, docstring, args, body defn defn expression, with name, doc-string, arguments & body tabstops name, docstring, args, body defr defrecord docstring, object, args, body deft deftype docstring, object, args, body doseq doseq name, body fn fn - anonymous function name, body for for condition, body if if condition, body ifl if-let - if true, bind a local name binding, body import import java library library name is is - clojure test assertion value, expected let let - bind a local name to a value name, value, body map map fn, col, col map.lambda map with anonymous function #() fn, body mdoc metadata docstring docstring ns ns - expression with the current namespace inserted automatically N/A opts destructuring a map with :keys , :or for default values, :as for entire vector :key binding, or defaults, :as binding pr prn - print function string/value print println - print function string/value reduce reduce - reduce expression with an anonymous function args, body require :require expression with library and alias library, alias test deftest expression test description, value/expected try try & catch expression try expression, exception name, body use depreciated: use require instead when when when expression, body whenl when-let - local binding on when condition binding, body","title":"Hint::deftest snippet is called test"},{"location":"snippets/yasnippets/create-snippets/","text":"Create snippets from existing text \u03bb\ufe0e helm-yas-create-snippet-on-region is an effective way to create snippets from existing text. {% youtube %} https://youtu.be/51as0UrssLM Select a code block that you often create and using the yasnippets tools to create your own generic template v for visual select and highlight the text for the snippet. Or use SPC v and grow the selected region SPC SPC helm-yas-create-snippet-on-region creates a new snippet Enter the name you wish to refer to this snippet Select the major mode you want to add the snippet too (eg. clojure, markdown, html) Edit the text and delete any text that is not required Add tab points in the snippet if relevant $1 initial cursor position, $2 next cursor position on tab, $0 end cursor position. C-c C-t calls yas-tryout-snippet to test the snippet has the right behaviour `C-c C-c calls yas-load-snippet-buffer-and-close to load the snippet into the specified major mode and closes the snippet buffer Edit an existing snippet \u03bb\ufe0e SPC SPC yas/visit-snippet-file displays a helm popup listing snippets. Enter a pattern to narrow the list or C-j and C-k to navigate the snippets. RET to select the snippet. Edit the snippet and SPC f s to save file C-c C-c calls the function yas-load-snippet-buffer-and-close which loads the snippet into Spacemacs and closes the buffer. C-c C-t calls yas-tryout-snippet to test the snippet and check the placement of your tab stops.","title":"Create snippets from existing text"},{"location":"snippets/yasnippets/create-snippets/#create-snippets-from-existing-text","text":"helm-yas-create-snippet-on-region is an effective way to create snippets from existing text. {% youtube %} https://youtu.be/51as0UrssLM Select a code block that you often create and using the yasnippets tools to create your own generic template v for visual select and highlight the text for the snippet. Or use SPC v and grow the selected region SPC SPC helm-yas-create-snippet-on-region creates a new snippet Enter the name you wish to refer to this snippet Select the major mode you want to add the snippet too (eg. clojure, markdown, html) Edit the text and delete any text that is not required Add tab points in the snippet if relevant $1 initial cursor position, $2 next cursor position on tab, $0 end cursor position. C-c C-t calls yas-tryout-snippet to test the snippet has the right behaviour `C-c C-c calls yas-load-snippet-buffer-and-close to load the snippet into the specified major mode and closes the snippet buffer","title":"Create snippets from existing text"},{"location":"snippets/yasnippets/create-snippets/#edit-an-existing-snippet","text":"SPC SPC yas/visit-snippet-file displays a helm popup listing snippets. Enter a pattern to narrow the list or C-j and C-k to navigate the snippets. RET to select the snippet. Edit the snippet and SPC f s to save file C-c C-c calls the function yas-load-snippet-buffer-and-close which loads the snippet into Spacemacs and closes the buffer. C-c C-t calls yas-tryout-snippet to test the snippet and check the placement of your tab stops.","title":"Edit an existing snippet"},{"location":"snippets/yasnippets/practicalli-snippets/","text":"Practicalli Clojure mode Yasnippets \u03bb\ufe0e Practicalli Snippets for Yasnippet . Clojure.core \u03bb\ufe0e Add a def form including a doc-string # -*- mode: snippet -*- # name : def with doc-string # key : def # contributor : practicalli # -- (def ${1:name} \"${2:doc-string}\" ${3:value}) $0 # -*- mode: snippet -*- # name : def private with doc-string # key : def- # contributor : practicalli # -- (def ^:private ${1:name} \"${2:doc-string}\" ${3:value}) $0 Documentation \u03bb\ufe0e Creative Commons Licence name, used to update the license in a Leiningen project.clj file and for README.md files to describe a project. # -*- mode: snippet -*- # name : cc-license-name # key : cc-license-name # contributor : practicalli # -- \"Creative Commons Attribution Share-Alike 4.0 International\" Creative Commons Licence URL to complement the Creative Commons Licence name snippet. # -*- mode: snippet -*- # name : cc-license-url # key : cc-license-url # contributor : practicalli # -- \"https://creativecommons.org/\" Documentation \u03bb\ufe0e A comment heading to describe the purpose and important information about the current namesapce. # -*- mode: snippet -*- # name : Comment header for namespace # key : comment-header # contributor : practicalli # -- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ${1:Namespace summary title} ;; ;; ${2:Brief description} ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; $0 A comment separator for marking logical sections within a namespace, useful for navigating code and identifying opportunities to refactor a namespace into multiple namespaces. # -*- mode: snippet -*- # name : Comment separator for namespace # key : comment-separator # contributor : practicalli # -- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ${1:Namespace summary title} A rich comment block typically used to hold function calls to show how to make use of the important aspects of the current namespace. For example, calls to start, restart, stop functions in a namespace that defines the service life-cycle. This provides a live executable guide to using the namespace, without being called if the whole namespace is evaluated. A commented expression is placed before the closing paren to ensure that closing paren is not folded up into the previous line. This makes it easier to add further code to the rich comment block. # -*- mode: snippet -*- # name : Rich comment # key : rich-comment # contributor : practicalli # -- (comment ${0:body} #_()) ;; End of rich comment A modified rich comment block with clj-kondo configuration to suppress warnings for duplicate function definition names, supporting alternative function implementations as part of a REPL driven development workflow. # -*- mode: snippet -*- # name : Rich comment with clj-kondo ignore # key : rich-comment-ignore # contributor : practicalli # -- #_{:clj-kondo/ignore [:redefined-var]} (comment ${0:body} #_()) ;; End of rich comment Hotload libraries into the REPL \u03bb\ufe0e Clojure CLI projects can hotload library dependencies into a running Clojure REPL using the tools.deps library . This requires starting a REPL with the clojure.tools.deps.alpha library as a dependency which can be done by including the :lib/hotload alias from practicalli/clojure-deps-edn . Note this library is alpha and the API could change in future. Create a rich comment block that requires the clojure.tools.deps.alpha namespace and an add-libs expression to hotload one or more libraries in a hash-map. Tab stops with placeholders are included for adding the first library to hotload. # -*- mode: snippet -*- # name : Hotload libraries using clojure.tools.deps.alpha # key : rich-comment-hotload # contributor : practicalli # -- ;; Rich comment block with redefined vars ignored #_{:clj-kondo/ignore [:redefined-var]} (comment ;; Add-lib library for hot-loading (require '[clojure.tools.deps.alpha.repl :refer [add-libs]]) (add-libs '{${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"}$3}) ) ;; End of rich comment block Clojure.test \u03bb\ufe0e A deftest snippet with a testing form to group assertions with and # -*- mode: snippet -*- # name: deftest clojure.test function # key: deftest # contributor: practicalli # -- (deftest ${1:name}-test (testing \"${2:Context of the test assertions}\"$> (is (= ${3:assertion-values}))$4))$> $0 Library Dependencies \u03bb\ufe0e Add a Maven style dependency to a Clojure CLI deps.edn project. # -*- mode: snippet -*- # name : Clojure CLI maven dependency # key : deps-maven # contributor : practicalli # -- ${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"} Add a dependency from a Git repository, where the library is named after the remote Git repository, i.e io.github.user|org/library-name for the GitHub repository https://github.com/user|org/library-name . The :git/sha defines a specific commit to use for the dependency. # -*- mode: snippet -*- # name : deps.edn Git # key : deps-git # contributor : practicalli # -- ${1:domain/library-name} {:git/sha \"${2:git-sha-value}\"}$0 Additionally a Git tag can be specified, enabling the use of the short SHA value for :git/sha (short sha is the first 7 characters of the 40 character SHA-1 value). A Git client can obtain the short form of a SHA from a Git repository git rev-parse --short 1e872b59013425b7c404a91d16119e8452b983f2 # -*- mode: snippet -*- # name : deps.edn Git tag # key : deps-git-tag # contributor : practicalli # -- ${1:domain/library-name} {:git/tag \"${1:git-tag-value}\" :git/sha \"${2:git-sha-value}\"}$0 If a library is not named after the domain of the Git repository, the URL of the Git repository must be specified using the :git/url key. # -*- mode: snippet -*- # name : deps.edn Git url # key : deps-git-url # contributor : practicalli # -- ${1:domain/library-name} {:git/url \"https://github.com/${1:}\" :git/sha \"${1:git-sha-value}\"}$0 Add a library dependency that is a local Clojure project. # -*- mode: snippet -*- # name : deps.edn local project dependency # key : deps-local # contributor : practicalli # -- ${1:domain/library-name} {:local/root \"${2:/path/to/project/root}\"}$0","title":"Practicalli Clojure mode Yasnippets"},{"location":"snippets/yasnippets/practicalli-snippets/#practicalli-clojure-mode-yasnippets","text":"Practicalli Snippets for Yasnippet .","title":"Practicalli Clojure mode Yasnippets"},{"location":"snippets/yasnippets/practicalli-snippets/#clojurecore","text":"Add a def form including a doc-string # -*- mode: snippet -*- # name : def with doc-string # key : def # contributor : practicalli # -- (def ${1:name} \"${2:doc-string}\" ${3:value}) $0 # -*- mode: snippet -*- # name : def private with doc-string # key : def- # contributor : practicalli # -- (def ^:private ${1:name} \"${2:doc-string}\" ${3:value}) $0","title":"Clojure.core"},{"location":"snippets/yasnippets/practicalli-snippets/#documentation","text":"Creative Commons Licence name, used to update the license in a Leiningen project.clj file and for README.md files to describe a project. # -*- mode: snippet -*- # name : cc-license-name # key : cc-license-name # contributor : practicalli # -- \"Creative Commons Attribution Share-Alike 4.0 International\" Creative Commons Licence URL to complement the Creative Commons Licence name snippet. # -*- mode: snippet -*- # name : cc-license-url # key : cc-license-url # contributor : practicalli # -- \"https://creativecommons.org/\"","title":"Documentation"},{"location":"snippets/yasnippets/practicalli-snippets/#documentation_1","text":"A comment heading to describe the purpose and important information about the current namesapce. # -*- mode: snippet -*- # name : Comment header for namespace # key : comment-header # contributor : practicalli # -- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ${1:Namespace summary title} ;; ;; ${2:Brief description} ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; $0 A comment separator for marking logical sections within a namespace, useful for navigating code and identifying opportunities to refactor a namespace into multiple namespaces. # -*- mode: snippet -*- # name : Comment separator for namespace # key : comment-separator # contributor : practicalli # -- ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;; ${1:Namespace summary title} A rich comment block typically used to hold function calls to show how to make use of the important aspects of the current namespace. For example, calls to start, restart, stop functions in a namespace that defines the service life-cycle. This provides a live executable guide to using the namespace, without being called if the whole namespace is evaluated. A commented expression is placed before the closing paren to ensure that closing paren is not folded up into the previous line. This makes it easier to add further code to the rich comment block. # -*- mode: snippet -*- # name : Rich comment # key : rich-comment # contributor : practicalli # -- (comment ${0:body} #_()) ;; End of rich comment A modified rich comment block with clj-kondo configuration to suppress warnings for duplicate function definition names, supporting alternative function implementations as part of a REPL driven development workflow. # -*- mode: snippet -*- # name : Rich comment with clj-kondo ignore # key : rich-comment-ignore # contributor : practicalli # -- #_{:clj-kondo/ignore [:redefined-var]} (comment ${0:body} #_()) ;; End of rich comment","title":"Documentation"},{"location":"snippets/yasnippets/practicalli-snippets/#hotload-libraries-into-the-repl","text":"Clojure CLI projects can hotload library dependencies into a running Clojure REPL using the tools.deps library . This requires starting a REPL with the clojure.tools.deps.alpha library as a dependency which can be done by including the :lib/hotload alias from practicalli/clojure-deps-edn . Note this library is alpha and the API could change in future. Create a rich comment block that requires the clojure.tools.deps.alpha namespace and an add-libs expression to hotload one or more libraries in a hash-map. Tab stops with placeholders are included for adding the first library to hotload. # -*- mode: snippet -*- # name : Hotload libraries using clojure.tools.deps.alpha # key : rich-comment-hotload # contributor : practicalli # -- ;; Rich comment block with redefined vars ignored #_{:clj-kondo/ignore [:redefined-var]} (comment ;; Add-lib library for hot-loading (require '[clojure.tools.deps.alpha.repl :refer [add-libs]]) (add-libs '{${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"}$3}) ) ;; End of rich comment block","title":"Hotload libraries into the REPL"},{"location":"snippets/yasnippets/practicalli-snippets/#clojuretest","text":"A deftest snippet with a testing form to group assertions with and # -*- mode: snippet -*- # name: deftest clojure.test function # key: deftest # contributor: practicalli # -- (deftest ${1:name}-test (testing \"${2:Context of the test assertions}\"$> (is (= ${3:assertion-values}))$4))$> $0","title":"Clojure.test"},{"location":"snippets/yasnippets/practicalli-snippets/#library-dependencies","text":"Add a Maven style dependency to a Clojure CLI deps.edn project. # -*- mode: snippet -*- # name : Clojure CLI maven dependency # key : deps-maven # contributor : practicalli # -- ${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"} Add a dependency from a Git repository, where the library is named after the remote Git repository, i.e io.github.user|org/library-name for the GitHub repository https://github.com/user|org/library-name . The :git/sha defines a specific commit to use for the dependency. # -*- mode: snippet -*- # name : deps.edn Git # key : deps-git # contributor : practicalli # -- ${1:domain/library-name} {:git/sha \"${2:git-sha-value}\"}$0 Additionally a Git tag can be specified, enabling the use of the short SHA value for :git/sha (short sha is the first 7 characters of the 40 character SHA-1 value). A Git client can obtain the short form of a SHA from a Git repository git rev-parse --short 1e872b59013425b7c404a91d16119e8452b983f2 # -*- mode: snippet -*- # name : deps.edn Git tag # key : deps-git-tag # contributor : practicalli # -- ${1:domain/library-name} {:git/tag \"${1:git-tag-value}\" :git/sha \"${2:git-sha-value}\"}$0 If a library is not named after the domain of the Git repository, the URL of the Git repository must be specified using the :git/url key. # -*- mode: snippet -*- # name : deps.edn Git url # key : deps-git-url # contributor : practicalli # -- ${1:domain/library-name} {:git/url \"https://github.com/${1:}\" :git/sha \"${1:git-sha-value}\"}$0 Add a library dependency that is a local Clojure project. # -*- mode: snippet -*- # name : deps.edn local project dependency # key : deps-local # contributor : practicalli # -- ${1:domain/library-name} {:local/root \"${2:/path/to/project/root}\"}$0","title":"Library Dependencies"},{"location":"snippets/yasnippets/writing-snippets/","text":"Yasnippets Custom Snippets \u03bb\ufe0e Yasnippets are written in plain text, so are easy to write. They support tab stops $1 , placeholders ${1:defaultvalue} and ensure indentation rules are applied $< How to write a snippet \u03bb\ufe0e The content can be anything, simple text or more usefully a code structure with placeholders The basic structure of a snippet template is: # key : short-form-name (text that expands to snippet body) # name : FullNameOfSnippet (shows in autocompletion menu after key ) # contributor: Practicalli # -- ;; ${1:Title placeholder text} ;; License: ${2:name of licence} Copyright Practicalli $0 Example: Simple text replacement \u03bb\ufe0e As Practicalli develops the book content its useful to highlight sections which are still work in progress. Rather than type the same message over again, a simple snippet called wip is created. # key : wip # name : Work In Progress # contributor: Practicalli <info@practical.li> # -- > **Fixme** work in progress When you expand this snippet with M-/ then the snippet name is replaced by the content. Example: Using tab stops \u03bb\ufe0e Yasnippets official snippets repository contains a snippet called form in the html-mode . This expands into a html form and jumps from method, id, action and content. # key : form # contributor : Practicalli <info@practical.li> # name :<form method=\"...\" id=\"...\" action=\"...\"></form> # -- <form method=\"$1\" id=\"$2\" action=\"$3\"> $0 </form> When the snippet is expanded, the snippet name is replaced by the content as usual but the cursor is placed at the first tab stop $1 . Each time you press TAB you move to the next tab stop. $0 is our exit point from the snippet, so pressing TAB reverts to the usual behaviour outside of YASnippet. Further examples are covered in the Emacs YASnippet video tutorial or Adding YASnippets snippets & Snippet expansion with YASnippet Testing your snippets \u03bb\ufe0e M-x yas-tryout-snippet opens a new empty buffer in the appropriate major mode and inserts the snippet so you can then test it with M-/ . M-x yas-load-snippet-buffer to load the new snippet into the correct major mode. M-x yas-load-snippet-buffer-and-close also loads the new snippet into the correct major mode and kills the snippet buffer (prompting to save first if necessary). Todo::PR for yasnippet key bindings \u03bb\ufe0e SPC x s key bindings for yasnippet commands in Spacemacs. SPC x s e to edit an existing snippet ( yas/visit-snippet-file ). SPC x s c to create a snippet. SPC x s t to try a snippet. SPC x s l to load a snippet. SPC x s L to load a snippet and close the snippet buffer","title":"Yasnippets Custom Snippets"},{"location":"snippets/yasnippets/writing-snippets/#yasnippets-custom-snippets","text":"Yasnippets are written in plain text, so are easy to write. They support tab stops $1 , placeholders ${1:defaultvalue} and ensure indentation rules are applied $<","title":"Yasnippets Custom Snippets"},{"location":"snippets/yasnippets/writing-snippets/#how-to-write-a-snippet","text":"The content can be anything, simple text or more usefully a code structure with placeholders The basic structure of a snippet template is: # key : short-form-name (text that expands to snippet body) # name : FullNameOfSnippet (shows in autocompletion menu after key ) # contributor: Practicalli # -- ;; ${1:Title placeholder text} ;; License: ${2:name of licence} Copyright Practicalli $0","title":"How to write a snippet"},{"location":"snippets/yasnippets/writing-snippets/#example-simple-text-replacement","text":"As Practicalli develops the book content its useful to highlight sections which are still work in progress. Rather than type the same message over again, a simple snippet called wip is created. # key : wip # name : Work In Progress # contributor: Practicalli <info@practical.li> # -- > **Fixme** work in progress When you expand this snippet with M-/ then the snippet name is replaced by the content.","title":"Example: Simple text replacement"},{"location":"snippets/yasnippets/writing-snippets/#example-using-tab-stops","text":"Yasnippets official snippets repository contains a snippet called form in the html-mode . This expands into a html form and jumps from method, id, action and content. # key : form # contributor : Practicalli <info@practical.li> # name :<form method=\"...\" id=\"...\" action=\"...\"></form> # -- <form method=\"$1\" id=\"$2\" action=\"$3\"> $0 </form> When the snippet is expanded, the snippet name is replaced by the content as usual but the cursor is placed at the first tab stop $1 . Each time you press TAB you move to the next tab stop. $0 is our exit point from the snippet, so pressing TAB reverts to the usual behaviour outside of YASnippet. Further examples are covered in the Emacs YASnippet video tutorial or Adding YASnippets snippets & Snippet expansion with YASnippet","title":"Example: Using tab stops"},{"location":"snippets/yasnippets/writing-snippets/#testing-your-snippets","text":"M-x yas-tryout-snippet opens a new empty buffer in the appropriate major mode and inserts the snippet so you can then test it with M-/ . M-x yas-load-snippet-buffer to load the new snippet into the correct major mode. M-x yas-load-snippet-buffer-and-close also loads the new snippet into the correct major mode and kills the snippet buffer (prompting to save first if necessary).","title":"Testing your snippets"},{"location":"snippets/yasnippets/writing-snippets/#todopr-for-yasnippet-key-bindings","text":"SPC x s key bindings for yasnippet commands in Spacemacs. SPC x s e to edit an existing snippet ( yas/visit-snippet-file ). SPC x s c to create a snippet. SPC x s t to try a snippet. SPC x s l to load a snippet. SPC x s L to load a snippet and close the snippet buffer","title":"Todo::PR for yasnippet key bindings"},{"location":"source-control/","text":"Source Control Introduction \u03bb\ufe0e Source control in Spacemacs supports Git repositories and services including GitHub, GitLab and Perforce. Magit is a graphical Git client in Spacemacs that provides all the features of the Git command line client. Highlight changes in file buffers and the local Git repository can be shown in the fringe. Configure Spacemacs for Source Control \u03bb\ufe0e GitHub layer deprecated The Spacemacs github layer has been marked as deprecated as all the working packages are provided by the git layer.","title":"Source Control Introduction"},{"location":"source-control/#source-control-introduction","text":"Source control in Spacemacs supports Git repositories and services including GitHub, GitLab and Perforce. Magit is a graphical Git client in Spacemacs that provides all the features of the Git command line client. Highlight changes in file buffers and the local Git repository can be shown in the fringe.","title":"Source Control Introduction"},{"location":"source-control/#configure-spacemacs-for-source-control","text":"GitHub layer deprecated The Spacemacs github layer has been marked as deprecated as all the working packages are provided by the git layer.","title":"Configure Spacemacs for Source Control"},{"location":"source-control/configure-layers/","text":"Configure Source control layers \u03bb\ufe0e Recommended layers to add source control support: git - provides Magit, a feature rich git client that is easy to use github - access GitHub / GitLab APIs to access and create issues, pull requests, etc. version-control - general features including diff highlights in the window fringe Add an SSH key when using SSH URLs to connect to GitHub / GitLab. Git should be configured for Magit , Magit Forge configured to access for issues and pull requests and optionally github-clone configured to search GitHub for repositories by name. Add layers to .spacemacs configuration \u03bb\ufe0e SPC f e d opens the .spacemacs configuration file ( M-m f e d Emacs state) Use SPC s s and start typing configuration-layers to search for the dotspacemacs-configuration-layers section. RTN to jump to the highlighted line, C-j to move down the matching lines, C-k to move up. Add the following configuration to provide the recommended setup. ( git :variables git-magit-status-fullscreen t magit-diff-refine-hunk t git-enable-magit-todos-plugin t ) github ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t ) The layers and variables are explained in their own sections below. git layer \u03bb\ufe0e git provides the Magit, a rich Git client that does everything a command line client can do. git-magit-status-fullscreen opens Magit status ( SPC g s ) in a full frame window, q restores previous window layout. Fullscreen is easier to read the diff of a commit will plenty of space to enter a commit messages. magit-diff-refine-hunk configures diffs show the specific word changes when a hunk is active, making it easier to spot the exact changes. git-enable-magit-todos-plugin lists matching TODO lines from the current project in the Magit Status buffer, helping work and issues be tracked ( git :variables git-magit-status-fullscreen t magit-diff-refine-hunk t git-enable-magit-todos-plugin t ) Ensure you follow the Git Configuration steps required for this layer. github layer \u03bb\ufe0e github provided Magit forge for API access to remote repository services , i.e. GitHub / GitLab. github-clone is also provided, although there are security concerns when configuring this service . Layer variables are not set for this layer github Ensure you follow the GitHub Configuration steps required for this layer. version-control layer \u03bb\ufe0e version-control layer highlights changes in the fringe of a buffer and a vcs transient state to quickly navigate through changes (hunks). version-control-diff-tool uses diff-hl to highlight file change against local commits, with markers appearing in the fringe. version-control-global-margin enables highlighting changes in all buffers automatically. ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t )","title":"Configure Source control layers"},{"location":"source-control/configure-layers/#configure-source-control-layers","text":"Recommended layers to add source control support: git - provides Magit, a feature rich git client that is easy to use github - access GitHub / GitLab APIs to access and create issues, pull requests, etc. version-control - general features including diff highlights in the window fringe Add an SSH key when using SSH URLs to connect to GitHub / GitLab. Git should be configured for Magit , Magit Forge configured to access for issues and pull requests and optionally github-clone configured to search GitHub for repositories by name.","title":"Configure Source control layers"},{"location":"source-control/configure-layers/#add-layers-to-spacemacs-configuration","text":"SPC f e d opens the .spacemacs configuration file ( M-m f e d Emacs state) Use SPC s s and start typing configuration-layers to search for the dotspacemacs-configuration-layers section. RTN to jump to the highlighted line, C-j to move down the matching lines, C-k to move up. Add the following configuration to provide the recommended setup. ( git :variables git-magit-status-fullscreen t magit-diff-refine-hunk t git-enable-magit-todos-plugin t ) github ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t ) The layers and variables are explained in their own sections below.","title":"Add layers to .spacemacs configuration"},{"location":"source-control/configure-layers/#git-layer","text":"git provides the Magit, a rich Git client that does everything a command line client can do. git-magit-status-fullscreen opens Magit status ( SPC g s ) in a full frame window, q restores previous window layout. Fullscreen is easier to read the diff of a commit will plenty of space to enter a commit messages. magit-diff-refine-hunk configures diffs show the specific word changes when a hunk is active, making it easier to spot the exact changes. git-enable-magit-todos-plugin lists matching TODO lines from the current project in the Magit Status buffer, helping work and issues be tracked ( git :variables git-magit-status-fullscreen t magit-diff-refine-hunk t git-enable-magit-todos-plugin t ) Ensure you follow the Git Configuration steps required for this layer.","title":"git layer"},{"location":"source-control/configure-layers/#github-layer","text":"github provided Magit forge for API access to remote repository services , i.e. GitHub / GitLab. github-clone is also provided, although there are security concerns when configuring this service . Layer variables are not set for this layer github Ensure you follow the GitHub Configuration steps required for this layer.","title":"github layer"},{"location":"source-control/configure-layers/#version-control-layer","text":"version-control layer highlights changes in the fringe of a buffer and a vcs transient state to quickly navigate through changes (hunks). version-control-diff-tool uses diff-hl to highlight file change against local commits, with markers appearing in the fringe. version-control-global-margin enables highlighting changes in all buffers automatically. ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t )","title":"version-control layer"},{"location":"source-control/forge-configuration/","text":"Magit Forge \u03bb\ufe0e Magit can retrieve issues and pull request for a project and even create a new pull request, when connect to services provided by GitHub, GitLab and your own hosted environments. Magit uses Forge to talk to these services and refers to these services collectively as forges. Configure Git identity and create a GPG key first Configure a Git identity to repositories on these services before configuring Forge Create a gpg key (Pretty Good Privacy) to encrypt your GitHub/GitLab personal access token in a file called .authinfo.gpg . Set username for the Forge service \u03bb\ufe0e Add your Forge username to your ~/.gitconfig file for your operating system account. For example, if your username on GitHub is practicalli , then run this command in a terminal: git config --global github.user practicalli If using GitLab, replace github.user with gitlab.user in the above command. Generating a token for API access \u03bb\ufe0e A personal access token is used to authenticate your identify with the forge. The respective services provide a means to generate that token: GitHub personal access tokens should be created with repo , user and read:org permissions. GitLab personal access tokens should be created with api permissions. Personal Access tokens can be revoked and recreated at any time, so are a safer approach than using a password. Some services will prevent authentication via password, so a token is the only option. GitHub fine-grained tokens not supported GitHub are introducing fine-grained developer tokens, although they are not supported for accessing the GitHub GraphQL API which Forge uses for Issues and Pull Requests. Create a so-called classic developer token. Encrypted forge connection in .authinfo.gpg \u03bb\ufe0e SPC f f to open a file called ~/.authinfo . If the file does not exist it will be created when saving the file. Add the Auth Source line to the file, using your GitHub or GitLab name and associated personal access token. For example, the GitHub account name is practicalli and the personal access token is the password (this is not a real token or account, do not share your token publicly) machine api.github.com login practicalli^forge password 01personal02access03token SPC a Y e to call epa-encrypt-file Select recipients for encryption prompt, so select a PGP key to encrypt the file with. j and k to navigate to line with existing PGP key m to toggle mark the key to use (should show a star next to the key) RET with cursor over the [ok] text menu in the pop-up A new encrypted file is created using the original name with .gpg postfixed to the end, creating the ~/.authinfo.gpg file. SPC f f and open ~/.authinfo.gpg to check Emacs can decrypt the file. A plain text version of the file will open and a message appears in the mini-buffer saying the file is being decrypted. Finally, delete the ~/.authinfo file, so the token is no longer stored as plain text. Without a PGP key When the recipients for encryption prompt appears, select OK if no keys have been created. At the next prompt, enter the password to encrypt the file. Encrypt and decrypt via terminal CLI \u03bb\ufe0e Open a terminal and encrypt the .authinfo file using the following command, specifying the email address of the key to use for the encryption gpg --output ~/.authinfo.gpg --encrypt --recipient email-name@domain.tld ~/.authinfo Decrypt the .authinfo.gpg file using: gpg --output ~/.authinfo --decrypt ~/.authinfo.gpg Configure Spacemacs to use authentication \u03bb\ufe0e Add the preferred file in which to store your token, by default this is .authinfo . It is recommended to store this in ~/.authinfo.gpg Add auth-sources to specify the location of the encrypted token file in the dotspacemacs/user-config section of your .spacemacs file ;; Set the files that are searched for writing tokens ;; by default ~/.authinfo will be used ( setq auth-sources ' ( \"~/.authinfo.gpg\" )) If using XDG_CONFIG_HOME for the location of the authinfo.gpg file. The default location in HOME can also be included and the first file found will be used. ( setq auth-sources ( list ( concat ( getenv \"XDG_CONFIG_HOME\" ) \"/authinfo.gpg\" ) \"~/.authinfo.gpg\" )) ; (1)! practicalli/spacemacs.d configuration contains the auth-sources setting. Configure the number of open and closed topics shown in forge \u03bb\ufe0e A topic is an issue or pull request and the list of each can be configured to display a number of open and closed items. The configuration will show 100 open topics and never show any closed topics, for both issues and pull requests. ( setq forge-topic-list-limit ' ( 100 . 0 )) ; (1)! practicalli/spacemacs.d configuration contains the forge list limit settings. To occasionally show closed topics, set the closed value to a negative number to the number of closed items wanted to be displayed. SPC SPC forge-toggle-closed-visibility to toggle the view of closed topics in each list ( setq forge-topic-list-limit ' ( 100 . -10 )) ; (1)! practicalli/spacemacs.d configuration contains the forge list limit settings. The first number is the open items to be displayed, the second number is the closed items to display. 0 means no items will be displayed.","title":"Magit Forge"},{"location":"source-control/forge-configuration/#magit-forge","text":"Magit can retrieve issues and pull request for a project and even create a new pull request, when connect to services provided by GitHub, GitLab and your own hosted environments. Magit uses Forge to talk to these services and refers to these services collectively as forges. Configure Git identity and create a GPG key first Configure a Git identity to repositories on these services before configuring Forge Create a gpg key (Pretty Good Privacy) to encrypt your GitHub/GitLab personal access token in a file called .authinfo.gpg .","title":"Magit Forge"},{"location":"source-control/forge-configuration/#set-username-for-the-forge-service","text":"Add your Forge username to your ~/.gitconfig file for your operating system account. For example, if your username on GitHub is practicalli , then run this command in a terminal: git config --global github.user practicalli If using GitLab, replace github.user with gitlab.user in the above command.","title":"Set username for the Forge service"},{"location":"source-control/forge-configuration/#generating-a-token-for-api-access","text":"A personal access token is used to authenticate your identify with the forge. The respective services provide a means to generate that token: GitHub personal access tokens should be created with repo , user and read:org permissions. GitLab personal access tokens should be created with api permissions. Personal Access tokens can be revoked and recreated at any time, so are a safer approach than using a password. Some services will prevent authentication via password, so a token is the only option. GitHub fine-grained tokens not supported GitHub are introducing fine-grained developer tokens, although they are not supported for accessing the GitHub GraphQL API which Forge uses for Issues and Pull Requests. Create a so-called classic developer token.","title":"Generating a token for API access"},{"location":"source-control/forge-configuration/#encrypted-forge-connection-in-authinfogpg","text":"SPC f f to open a file called ~/.authinfo . If the file does not exist it will be created when saving the file. Add the Auth Source line to the file, using your GitHub or GitLab name and associated personal access token. For example, the GitHub account name is practicalli and the personal access token is the password (this is not a real token or account, do not share your token publicly) machine api.github.com login practicalli^forge password 01personal02access03token SPC a Y e to call epa-encrypt-file Select recipients for encryption prompt, so select a PGP key to encrypt the file with. j and k to navigate to line with existing PGP key m to toggle mark the key to use (should show a star next to the key) RET with cursor over the [ok] text menu in the pop-up A new encrypted file is created using the original name with .gpg postfixed to the end, creating the ~/.authinfo.gpg file. SPC f f and open ~/.authinfo.gpg to check Emacs can decrypt the file. A plain text version of the file will open and a message appears in the mini-buffer saying the file is being decrypted. Finally, delete the ~/.authinfo file, so the token is no longer stored as plain text. Without a PGP key When the recipients for encryption prompt appears, select OK if no keys have been created. At the next prompt, enter the password to encrypt the file.","title":"Encrypted forge connection in .authinfo.gpg"},{"location":"source-control/forge-configuration/#encrypt-and-decrypt-via-terminal-cli","text":"Open a terminal and encrypt the .authinfo file using the following command, specifying the email address of the key to use for the encryption gpg --output ~/.authinfo.gpg --encrypt --recipient email-name@domain.tld ~/.authinfo Decrypt the .authinfo.gpg file using: gpg --output ~/.authinfo --decrypt ~/.authinfo.gpg","title":"Encrypt and decrypt via terminal CLI"},{"location":"source-control/forge-configuration/#configure-spacemacs-to-use-authentication","text":"Add the preferred file in which to store your token, by default this is .authinfo . It is recommended to store this in ~/.authinfo.gpg Add auth-sources to specify the location of the encrypted token file in the dotspacemacs/user-config section of your .spacemacs file ;; Set the files that are searched for writing tokens ;; by default ~/.authinfo will be used ( setq auth-sources ' ( \"~/.authinfo.gpg\" )) If using XDG_CONFIG_HOME for the location of the authinfo.gpg file. The default location in HOME can also be included and the first file found will be used. ( setq auth-sources ( list ( concat ( getenv \"XDG_CONFIG_HOME\" ) \"/authinfo.gpg\" ) \"~/.authinfo.gpg\" )) ; (1)! practicalli/spacemacs.d configuration contains the auth-sources setting.","title":"Configure Spacemacs to use authentication"},{"location":"source-control/forge-configuration/#configure-the-number-of-open-and-closed-topics-shown-in-forge","text":"A topic is an issue or pull request and the list of each can be configured to display a number of open and closed items. The configuration will show 100 open topics and never show any closed topics, for both issues and pull requests. ( setq forge-topic-list-limit ' ( 100 . 0 )) ; (1)! practicalli/spacemacs.d configuration contains the forge list limit settings. To occasionally show closed topics, set the closed value to a negative number to the number of closed items wanted to be displayed. SPC SPC forge-toggle-closed-visibility to toggle the view of closed topics in each list ( setq forge-topic-list-limit ' ( 100 . -10 )) ; (1)! practicalli/spacemacs.d configuration contains the forge list limit settings. The first number is the open items to be displayed, the second number is the closed items to display. 0 means no items will be displayed.","title":"Configure the number of open and closed topics shown in forge"},{"location":"source-control/forge-self-hosted-configuration/","text":"Configure Magit Forge for hosted environments \u03bb\ufe0e If you are using GitHub enterprise or GitLab self-hosted service, then you need to specify the user and API Forge should used for the service ( HOST ) For example, if the API is available at https://practical.li/api/v3 Set your username for the specific service in the ~/.gitconfig file: git config --global github.example.com/api/v3.user EMPLOYEE Add the API location to the local configuration of every repository that will use that service cd /path/to/repo git config github.host example.com/api/v3 * Using magit GitHub Enterprise - Jorge Dias","title":"Configure Magit Forge for hosted environments"},{"location":"source-control/forge-self-hosted-configuration/#configure-magit-forge-for-hosted-environments","text":"If you are using GitHub enterprise or GitLab self-hosted service, then you need to specify the user and API Forge should used for the service ( HOST ) For example, if the API is available at https://practical.li/api/v3 Set your username for the specific service in the ~/.gitconfig file: git config --global github.example.com/api/v3.user EMPLOYEE Add the API location to the local configuration of every repository that will use that service cd /path/to/repo git config github.host example.com/api/v3 * Using magit GitHub Enterprise - Jorge Dias","title":"Configure Magit Forge for hosted environments"},{"location":"source-control/git-configuration/","text":"Git Configuration \u03bb\ufe0e Git uses either XDG_CONFIG_HOME/git/config or $HOME/.gitconfig configuration file for user level settings. An identity is required when sharing commits via services such as GitHub/GitLab and so that each commit you make is associated to you. Add an identity to Git configuration \u03bb\ufe0e Define your git identity using the following commands in a terminal window git config --global user.name \"practicalli\" git config --global user.email ***+github-account@noreploy.github.com These commands update the [user] section of the Git configuration file, automatically creating that file if it does not exist. Using a private email address \u03bb\ufe0e To avoid sharing your real email address (to minimise spam), consider using a private email address In your GitHub account, visit the email settings and tick Keep my email addresses private . A new email of the form 250870+practicalli-john@users.noreply.github.com is created which must be set as your user email address git config --global user.email \"******+practicalli-john@users.noreply.github.com\" For additional security, select the option Block command line pushes that expose my email to prevent commits being pushed to GitHub using your public email address. Accessing remote repositories \u03bb\ufe0e GitHub repositories can be accessed via HTTPS or SSH URL. SSH approach is typically more secure, especially as the files holding your keys on disk are encrypted. SSH connections can be tunnelled through HTTPS if connecting to a remote repository via a very restricted firewall. HTTPS is more widely supported in firewalls as it goes through the HTTPS port. A personal access token is typically required (GitHub blocks access via password), although it must be saved in a plain text file, e.g. ~/.github . Should a token be compromised, it does not give access to the account on the remote repository, so the token can be deleted easily. SSH URLs with SSH Key \u03bb\ufe0e When using SSH URLs for remote repository access, generate an SSH key and add it to your GitHub account . The SSH key removes the need to enter GitHub credentials each time a command is used that accesses a remote repository (push, pull, clone, etc.). SSH Key Passphrase \u03bb\ufe0e Practicalli recommends setting a passphrase when generating an SSH key. Unix systems (Linux / MacOSX) should have the ssh-keygen command. -t specifies the type of encryption, RSA recommended -C to add your GitHub email address to the SSH key ssh-keygen -t rsa -C \"654321+practicalli-john@users.noreply.github.com\" Accept the default file or enter a preferred file name Enter a passphrase. A 12 character or greater passphrase should provide adequate security. Repeat the passphrase The key has now been created, with an id_rsa.pub public key that should be added to you GitHub account. Saving SSH Key to Key Ring \u03bb\ufe0e A key-ring tool for the Operating System can be used to securely store the passphrase. Ubuntu desktop has a key-ring tool which will display a pop-up dialog to save the passphrase to the key-ring the first time the SSH key is used. Once saved, the key is unlocked when login into the desktop. HTTPS URLs and personal access token \u03bb\ufe0e When using HTTPS URLs for remote repository access, a personal access token is required. Visit the remote repository service and generate a personal access token with at least repo permission. GitHub personal access token documentation GitLab personal access token documentation Whilst the token could be added to the ~/.gitconfig , as this file is plain text it is not particularly secure (especially if committed into a dotfiles repository and shared). git config --global oauth.token \"tokens-in-plain-text-files-are-not-very-secure\" To provide greater security when using the token, consider using the Git Credential Manager . It is not known if this approach will work with magit (let Practicalli know if it does). Hint::Magit Forge also uses personal access token \u03bb\ufe0e Magit Forge also requires a personal access token , although this can be saved in the encrypted file ~/.authinfo.pgg for greater security. The Magit Forge token includes permissions required to access remote repositories over HTTPS For greater security, use separate tokens if placing the HTTPS tokein in a plain text file). Diff 3 Support \u03bb\ufe0e Diff 3 standard included the parent of two changes in conflict, providing additional context when deciding which change should take precedence git config --global merge.conflictstyle diff3 This command adds a conflictstyle entry in the [merge] section of the Git configuration file. [merge] # Include common parent when merge conflicts arise conflictstyle = diff3 Magit supports the Diff3 standard, so a common parent will be shown when this feature is enabled.","title":"Git Configuration"},{"location":"source-control/git-configuration/#git-configuration","text":"Git uses either XDG_CONFIG_HOME/git/config or $HOME/.gitconfig configuration file for user level settings. An identity is required when sharing commits via services such as GitHub/GitLab and so that each commit you make is associated to you.","title":"Git Configuration"},{"location":"source-control/git-configuration/#add-an-identity-to-git-configuration","text":"Define your git identity using the following commands in a terminal window git config --global user.name \"practicalli\" git config --global user.email ***+github-account@noreploy.github.com These commands update the [user] section of the Git configuration file, automatically creating that file if it does not exist.","title":"Add an identity to Git configuration"},{"location":"source-control/git-configuration/#using-a-private-email-address","text":"To avoid sharing your real email address (to minimise spam), consider using a private email address In your GitHub account, visit the email settings and tick Keep my email addresses private . A new email of the form 250870+practicalli-john@users.noreply.github.com is created which must be set as your user email address git config --global user.email \"******+practicalli-john@users.noreply.github.com\" For additional security, select the option Block command line pushes that expose my email to prevent commits being pushed to GitHub using your public email address.","title":"Using a private email address"},{"location":"source-control/git-configuration/#accessing-remote-repositories","text":"GitHub repositories can be accessed via HTTPS or SSH URL. SSH approach is typically more secure, especially as the files holding your keys on disk are encrypted. SSH connections can be tunnelled through HTTPS if connecting to a remote repository via a very restricted firewall. HTTPS is more widely supported in firewalls as it goes through the HTTPS port. A personal access token is typically required (GitHub blocks access via password), although it must be saved in a plain text file, e.g. ~/.github . Should a token be compromised, it does not give access to the account on the remote repository, so the token can be deleted easily.","title":"Accessing remote repositories"},{"location":"source-control/git-configuration/#ssh-urls-with-ssh-key","text":"When using SSH URLs for remote repository access, generate an SSH key and add it to your GitHub account . The SSH key removes the need to enter GitHub credentials each time a command is used that accesses a remote repository (push, pull, clone, etc.).","title":"SSH URLs with SSH Key"},{"location":"source-control/git-configuration/#ssh-key-passphrase","text":"Practicalli recommends setting a passphrase when generating an SSH key. Unix systems (Linux / MacOSX) should have the ssh-keygen command. -t specifies the type of encryption, RSA recommended -C to add your GitHub email address to the SSH key ssh-keygen -t rsa -C \"654321+practicalli-john@users.noreply.github.com\" Accept the default file or enter a preferred file name Enter a passphrase. A 12 character or greater passphrase should provide adequate security. Repeat the passphrase The key has now been created, with an id_rsa.pub public key that should be added to you GitHub account.","title":"SSH Key Passphrase"},{"location":"source-control/git-configuration/#saving-ssh-key-to-key-ring","text":"A key-ring tool for the Operating System can be used to securely store the passphrase. Ubuntu desktop has a key-ring tool which will display a pop-up dialog to save the passphrase to the key-ring the first time the SSH key is used. Once saved, the key is unlocked when login into the desktop.","title":"Saving SSH Key to Key Ring"},{"location":"source-control/git-configuration/#https-urls-and-personal-access-token","text":"When using HTTPS URLs for remote repository access, a personal access token is required. Visit the remote repository service and generate a personal access token with at least repo permission. GitHub personal access token documentation GitLab personal access token documentation Whilst the token could be added to the ~/.gitconfig , as this file is plain text it is not particularly secure (especially if committed into a dotfiles repository and shared). git config --global oauth.token \"tokens-in-plain-text-files-are-not-very-secure\" To provide greater security when using the token, consider using the Git Credential Manager . It is not known if this approach will work with magit (let Practicalli know if it does).","title":"HTTPS URLs and personal access token"},{"location":"source-control/git-configuration/#hintmagit-forge-also-uses-personal-access-token","text":"Magit Forge also requires a personal access token , although this can be saved in the encrypted file ~/.authinfo.pgg for greater security. The Magit Forge token includes permissions required to access remote repositories over HTTPS For greater security, use separate tokens if placing the HTTPS tokein in a plain text file).","title":"Hint::Magit Forge also uses personal access token"},{"location":"source-control/git-configuration/#diff-3-support","text":"Diff 3 standard included the parent of two changes in conflict, providing additional context when deciding which change should take precedence git config --global merge.conflictstyle diff3 This command adds a conflictstyle entry in the [merge] section of the Git configuration file. [merge] # Include common parent when merge conflicts arise conflictstyle = diff3 Magit supports the Diff3 standard, so a common parent will be shown when this feature is enabled.","title":"Diff 3 Support"},{"location":"source-control/github-clone/","text":"GitHub access for github-clone \u03bb\ufe0e The github-clone package in the Spacemacs GitHub layer requires a personal access token in ~/.gitconfig to access GitHub. As ~/.gitconfig is plain text, adding a token is a potential security risk. Magit and Magit Forge provides the majority of github-clojure features, except for searching GitHub for a repository. Magit Forge can use an .authinfo.gpg which provides a high degree of security . WARNING::Potential security risk \u03bb\ufe0e The github-clone.el package (via gh.el package) requires a personal token to be added to the ~.gitconfig file, which if committed to a shared repository would provide others a way to access your repositories If an access token is shared, it should be immediately deleted from your GitHub account. Personal access tokens do not provide access to a users GitHub account, so are less of a risk than using a password. Configure github-clone \u03bb\ufe0e Add your GitHub account name to the Git configuration git config --global github.user practicalli Add the personal access token to Git configuration (using your own token) git config --global github.oauth-token 5aa705bda08803e0ed59c39e0a4101c0fea0ec3b The ~/.gitconfig file will be updated and should look similar to this example Move configuration to a .github-private file \u03bb\ufe0e To help mistakenly committing the token to a shared repository, move the [github] section from .gitconfig to a file called .gitconfig-private [ github ] user = <your-github-username> oauth-token = <01personal02access03token> Add an [include] section in the .gitconfig fot to include the details from the .gitconfig-private [ include ] path = ~/.gitconfig-private The .gitconfig file can then safely be committed to a shared Git repository without exposing the access token.","title":"GitHub access for github-clone"},{"location":"source-control/github-clone/#github-access-for-github-clone","text":"The github-clone package in the Spacemacs GitHub layer requires a personal access token in ~/.gitconfig to access GitHub. As ~/.gitconfig is plain text, adding a token is a potential security risk. Magit and Magit Forge provides the majority of github-clojure features, except for searching GitHub for a repository. Magit Forge can use an .authinfo.gpg which provides a high degree of security .","title":"GitHub access for github-clone"},{"location":"source-control/github-clone/#warningpotential-security-risk","text":"The github-clone.el package (via gh.el package) requires a personal token to be added to the ~.gitconfig file, which if committed to a shared repository would provide others a way to access your repositories If an access token is shared, it should be immediately deleted from your GitHub account. Personal access tokens do not provide access to a users GitHub account, so are less of a risk than using a password.","title":"WARNING::Potential security risk"},{"location":"source-control/github-clone/#configure-github-clone","text":"Add your GitHub account name to the Git configuration git config --global github.user practicalli Add the personal access token to Git configuration (using your own token) git config --global github.oauth-token 5aa705bda08803e0ed59c39e0a4101c0fea0ec3b The ~/.gitconfig file will be updated and should look similar to this example","title":"Configure github-clone"},{"location":"source-control/github-clone/#move-configuration-to-a-github-private-file","text":"To help mistakenly committing the token to a shared repository, move the [github] section from .gitconfig to a file called .gitconfig-private [ github ] user = <your-github-username> oauth-token = <01personal02access03token> Add an [include] section in the .gitconfig fot to include the details from the .gitconfig-private [ include ] path = ~/.gitconfig-private The .gitconfig file can then safely be committed to a shared Git repository without exposing the access token.","title":"Move configuration to a .github-private file"},{"location":"source-control/github/","text":"Github \u03bb\ufe0e Add the github layer to dotspacemacs/layers in the ~/.spacemacs configuration file and reload using SPC f e R or restart Spacemacs SPC q r . You can push and pull changes to any repositories your local git repository is connected to. You can also search for repositories on GitHub, then clone and even fork them. Using GitHub \u03bb\ufe0e SPC g h opens the GitHub menu Browsing and cloning remote repositories is via the Git Github menu, SPC g h . And there is a specific menu for cloning remote Github repositories.","title":"Github"},{"location":"source-control/github/#github","text":"Add the github layer to dotspacemacs/layers in the ~/.spacemacs configuration file and reload using SPC f e R or restart Spacemacs SPC q r . You can push and pull changes to any repositories your local git repository is connected to. You can also search for repositories on GitHub, then clone and even fork them.","title":"Github"},{"location":"source-control/github/#using-github","text":"SPC g h opens the GitHub menu Browsing and cloning remote repositories is via the Git Github menu, SPC g h . And there is a specific menu for cloning remote Github repositories.","title":"Using GitHub"},{"location":"source-control/github/gists/","text":"GitHub Gists \u03bb\ufe0e Hint::gists.el not functioning correctly \u03bb\ufe0e Changes to the GitHub API have resulted in gist.el failing to work for most functions. It should be possible to create a gist from a buffer and list gists, however, other functions my not work or stop Emacs from working GitHub Gists are used to share code or configuration without the need of a git project. Hint::github layer no longer includes gist support \u03bb\ufe0e gist.el was removed from the GitHub layer on 2021-11-02 citing a broken and unmaintained package. However, adding gist as an additional package, using dotspacemacs-additional-package (gist) in .spacemacs seems to work. Some investigation is being done as to what features are no longer working with gist.el. Manually add Gist support \u03bb\ufe0e SPC f e d to edit the Spacemacs configuration / additional-packages RET to find the dotspacemacs-additional-packages directive Add gist as an additional package dotspacemacs-additional-packages ' ( gist ) Add keybindings for the package in the dotspacemacs/user-config section of .spacemacs configuration ( spacemacs/set-leader-keys \"ogb\" 'gist-buffer ) ( spacemacs/set-leader-keys \"ogb\" 'gist-list ) Create a Gist from current buffer \u03bb\ufe0e SPC o g b to create a Gist from the current buffer. Hint::Prompt for GitHub account details \u03bb\ufe0e The first time using GitHub from Spacemacs you will be prompted for your GitHub username & password. If you have already used GitHub from Spacemacs, then your account details will have been saved so you do not need to enter them each time. Listing your Gists \u03bb\ufe0e SPC o g l will display a buffer listing all Gists for your account. DANGER::Viewing a Gist hangs Emacs \u03bb\ufe0e RET on an entry in the Gist list should download that Gist and open it in a buffer. Unfortunately this seems to hang Emacs and leave it in an unrecoverable state. Use the following commands in the Gist list buffer. Normal Description RET open gist f open gist in another buffer K delete current gist o open gist in your web browser g reload gist list e edit the gist description y copy gist URL * star (favorite) a gist (shows only on GitHub) ^ remove star from gist f fork gist on GitHub + add file to current gist - remove a file from current gist Updating a Gist \u03bb\ufe0e SPC g g l to show the list of gists. RET opens the gist in Spacemacs and make changes. SPC f s prompts to save a local copy of the file, saving there and creating a new version on gist.github.com. Hint::Gists created from a buffer are not updated \u03bb\ufe0e Creating a Gist from a buffer has no direct link between that buffer and the Gist. Any changes to the buffer is not updated. Once the gist is created, delete the original file and open the Gist (as described above). Then changes to the file will be saved Creating Gists with dired \u03bb\ufe0e If you open a dired buffer you can make gists from marked files, m , by pressing @ . This will make a public gist out of marked files (or if you use with a prefix, it will make private gists)","title":"GitHub Gists"},{"location":"source-control/github/gists/#github-gists","text":"","title":"GitHub Gists"},{"location":"source-control/github/gists/#hintgistsel-not-functioning-correctly","text":"Changes to the GitHub API have resulted in gist.el failing to work for most functions. It should be possible to create a gist from a buffer and list gists, however, other functions my not work or stop Emacs from working GitHub Gists are used to share code or configuration without the need of a git project.","title":"Hint::gists.el not functioning correctly"},{"location":"source-control/github/gists/#hintgithub-layer-no-longer-includes-gist-support","text":"gist.el was removed from the GitHub layer on 2021-11-02 citing a broken and unmaintained package. However, adding gist as an additional package, using dotspacemacs-additional-package (gist) in .spacemacs seems to work. Some investigation is being done as to what features are no longer working with gist.el.","title":"Hint::github layer no longer includes gist support"},{"location":"source-control/github/gists/#manually-add-gist-support","text":"SPC f e d to edit the Spacemacs configuration / additional-packages RET to find the dotspacemacs-additional-packages directive Add gist as an additional package dotspacemacs-additional-packages ' ( gist ) Add keybindings for the package in the dotspacemacs/user-config section of .spacemacs configuration ( spacemacs/set-leader-keys \"ogb\" 'gist-buffer ) ( spacemacs/set-leader-keys \"ogb\" 'gist-list )","title":"Manually add Gist support"},{"location":"source-control/github/gists/#create-a-gist-from-current-buffer","text":"SPC o g b to create a Gist from the current buffer.","title":"Create a Gist from current buffer"},{"location":"source-control/github/gists/#hintprompt-for-github-account-details","text":"The first time using GitHub from Spacemacs you will be prompted for your GitHub username & password. If you have already used GitHub from Spacemacs, then your account details will have been saved so you do not need to enter them each time.","title":"Hint::Prompt for GitHub account details"},{"location":"source-control/github/gists/#listing-your-gists","text":"SPC o g l will display a buffer listing all Gists for your account.","title":"Listing your Gists"},{"location":"source-control/github/gists/#dangerviewing-a-gist-hangs-emacs","text":"RET on an entry in the Gist list should download that Gist and open it in a buffer. Unfortunately this seems to hang Emacs and leave it in an unrecoverable state. Use the following commands in the Gist list buffer. Normal Description RET open gist f open gist in another buffer K delete current gist o open gist in your web browser g reload gist list e edit the gist description y copy gist URL * star (favorite) a gist (shows only on GitHub) ^ remove star from gist f fork gist on GitHub + add file to current gist - remove a file from current gist","title":"DANGER::Viewing a Gist hangs Emacs"},{"location":"source-control/github/gists/#updating-a-gist","text":"SPC g g l to show the list of gists. RET opens the gist in Spacemacs and make changes. SPC f s prompts to save a local copy of the file, saving there and creating a new version on gist.github.com.","title":"Updating a Gist"},{"location":"source-control/github/gists/#hintgists-created-from-a-buffer-are-not-updated","text":"Creating a Gist from a buffer has no direct link between that buffer and the Gist. Any changes to the buffer is not updated. Once the gist is created, delete the original file and open the Gist (as described above). Then changes to the file will be saved","title":"Hint::Gists created from a buffer are not updated"},{"location":"source-control/github/gists/#creating-gists-with-dired","text":"If you open a dired buffer you can make gists from marked files, m , by pressing @ . This will make a public gist out of marked files (or if you use with a prefix, it will make private gists)","title":"Creating Gists with dired"},{"location":"source-control/gitlab/","text":"GitLab \u03bb\ufe0e TODO::work in progress, sorry \u03bb\ufe0e You can use GitLab repositories via Magit by simply adding your SSH keys to your GitLab account. You will need to Configure Magit Forge in order to connect to GitLab APIs.","title":"GitLab"},{"location":"source-control/gitlab/#gitlab","text":"","title":"GitLab"},{"location":"source-control/gitlab/#todowork-in-progress-sorry","text":"You can use GitLab repositories via Magit by simply adding your SSH keys to your GitLab account. You will need to Configure Magit Forge in order to connect to GitLab APIs.","title":"TODO::work in progress, sorry"},{"location":"source-control/magit/","text":"MaGit - Version Control \u03bb\ufe0e Magit is simple to use and powerful Git client which provides equivalents for all Git CLI commands and even has a git command line option. Magit status allows fine-grained staging of changes within visual diffs for files, hunks or just a single line. Commit, amend, squash and rebase to your local repository. Browse the commit history log which can also be used to reset commits, interactive rebase and cherry pick changes . Magit can push and pull changes with remote repositories and using Forge can also manage issue and pull request too. SPC g opens the Git menu. SPC g s is the equivalent of git status and opens the Magit client, providing full control over local and remote Git repositories. ? shows the top level command menu in the Magit status buffer. Magit overview \u03bb\ufe0e Here is a quick demonstration of Magit in action where we stage and commit changes locally, then push those commits to Github {% youtube %} https://youtu.be/natNUgnh_no","title":"MaGit - Version Control"},{"location":"source-control/magit/#magit-version-control","text":"Magit is simple to use and powerful Git client which provides equivalents for all Git CLI commands and even has a git command line option. Magit status allows fine-grained staging of changes within visual diffs for files, hunks or just a single line. Commit, amend, squash and rebase to your local repository. Browse the commit history log which can also be used to reset commits, interactive rebase and cherry pick changes . Magit can push and pull changes with remote repositories and using Forge can also manage issue and pull request too. SPC g opens the Git menu. SPC g s is the equivalent of git status and opens the Magit client, providing full control over local and remote Git repositories. ? shows the top level command menu in the Magit status buffer.","title":"MaGit - Version Control"},{"location":"source-control/magit/#magit-overview","text":"Here is a quick demonstration of Magit in action where we stage and commit changes locally, then push those commits to Github {% youtube %} https://youtu.be/natNUgnh_no","title":"Magit overview"},{"location":"source-control/magit/blame/","text":"Reviewing Commits with Git Blame \u03bb\ufe0e SPC g b opens the commit history of the current buffer, showing who committed each change. j and k jump up and down through the changes RET will open the commit details in a pop-up buffer","title":"Reviewing Commits with Git Blame"},{"location":"source-control/magit/blame/#reviewing-commits-with-git-blame","text":"SPC g b opens the commit history of the current buffer, showing who committed each change. j and k jump up and down through the changes RET will open the commit details in a pop-up buffer","title":"Reviewing Commits with Git Blame"},{"location":"source-control/magit/branching/","text":"Branching in Magit \u03bb\ufe0e Every Git commit is made on a branch, the default branch name is master. A new branch should be created when developing a new feature, especially when working on an pull request. Branches are used to try pull requests made by others. Creating a branch \u03bb\ufe0e SPC g s opens the Magit Status buffer. b c creates a new branch, first prompting for the name of the existing branch to use as the starting point, then prompting for the name of the new branch. Alternative, b s creates a tracking branch, useful when working with existing remote branches Branch from an earlier commit \u03bb\ufe0e SPC g s opens the Magit status buffer b b to select a different branch if required (optional) l l opens a long log, showing all the commits from the current branch j / k to navigate the commit history. Move to the commit on which to make a new branch b c to create a new branch from the current commit, prompting for the name of the new branch. The new branch is now set.","title":"Branching in Magit"},{"location":"source-control/magit/branching/#branching-in-magit","text":"Every Git commit is made on a branch, the default branch name is master. A new branch should be created when developing a new feature, especially when working on an pull request. Branches are used to try pull requests made by others.","title":"Branching in Magit"},{"location":"source-control/magit/branching/#creating-a-branch","text":"SPC g s opens the Magit Status buffer. b c creates a new branch, first prompting for the name of the existing branch to use as the starting point, then prompting for the name of the new branch. Alternative, b s creates a tracking branch, useful when working with existing remote branches","title":"Creating a branch"},{"location":"source-control/magit/branching/#branch-from-an-earlier-commit","text":"SPC g s opens the Magit status buffer b b to select a different branch if required (optional) l l opens a long log, showing all the commits from the current branch j / k to navigate the commit history. Move to the commit on which to make a new branch b c to create a new branch from the current commit, prompting for the name of the new branch. The new branch is now set.","title":"Branch from an earlier commit"},{"location":"source-control/magit/changing-history/","text":"Changing commit History \u03bb\ufe0e Existing commit history can be modified with squash , fixup and augment . The need to change history in Git should be minimal and should limited to fixing errors made in previous commits on your local repository. Here are a few simple tools to help you change your local history. Hint:: Consensual rewriting of shared remote history \u03bb\ufe0e Please consider the impact of other people working with a shared Git repository before changing the existing git commit history. If you really must change a shared git history, seek consent from the people you will affect first. It is much simpler to commit a new change that fixes the omission or error and let others pull that additional change. Tools for changing history \u03bb\ufe0e Tool Magit Description Augment c A Create a squash commit, editing the squash message Squash c s see squash commits Auto-squash c S see interactive rebasing Fixup c f see interactive rebasing Auto-fixup c F see interactive rebasing","title":"Changing commit History"},{"location":"source-control/magit/changing-history/#changing-commit-history","text":"Existing commit history can be modified with squash , fixup and augment . The need to change history in Git should be minimal and should limited to fixing errors made in previous commits on your local repository. Here are a few simple tools to help you change your local history.","title":"Changing commit History"},{"location":"source-control/magit/changing-history/#hint-consensual-rewriting-of-shared-remote-history","text":"Please consider the impact of other people working with a shared Git repository before changing the existing git commit history. If you really must change a shared git history, seek consent from the people you will affect first. It is much simpler to commit a new change that fixes the omission or error and let others pull that additional change.","title":"Hint:: Consensual rewriting of shared remote history"},{"location":"source-control/magit/changing-history/#tools-for-changing-history","text":"Tool Magit Description Augment c A Create a squash commit, editing the squash message Squash c s see squash commits Auto-squash c S see interactive rebasing Fixup c f see interactive rebasing Auto-fixup c F see interactive rebasing","title":"Tools for changing history"},{"location":"source-control/magit/cherry-picking/","text":"Cherry Picking commits \u03bb\ufe0e Cherry Picking is a way to be specific about which commits from a branch are incorporated into another branch. Where as merging a branch into another would take the full commit history. SPC g s to open magit status provides the A Apply menu. A with the point on any commit (or with commits selected in a list) allows cherry picking from the related branch. A common use of cherry picking it to copy one or more commits from one branch and apply them to another branch. Cherry picking may also be used as part of a pull request process, rather than merging the pull request directly, avoiding any unintentional commits that may be part of that pull request. Cherries - comparing two branches \u03bb\ufe0e Y to select cherries Select the Cherry head - the branch containing commits (cherries) that are to be copied Select the Cherry upstream - the branch that would receive the commits (cherries) A list of commits, 'cherries', are show to help narrow down which commits could be cherry picked. A with the point on one of the cherries, or with one or more cherries selected, will start the Applying of commits Find commits via list of branches \u03bb\ufe0e l o in Magit Status will list the other branches. Navigate to the branch and commit (or commits) to cherry pick. Use visual select state, v to select multiple commits ( C-SPC in holy mode) Applying commits \u03bb\ufe0e A starts the apply menu to start the cherry picking process. A is also used to open the transient Apply menu, to continue skip or abort the cherry picking. d to donate the selected cherry commits to another branch Select the donate branch - the branch commits are to be copied to If there are no conflicts, the commits are added to the branch. Push the changes, P p , to a remote repository if relevant. Managing Conflicts \u03bb\ufe0e The Magit status buffer shows a cherry-picking progress section if the selected cherries (commits) cannot be automatically merged into the branch, Files that contain merge conflicts will be listed under unstaged changes RET to open file for editing in a buffer and resolve the conflicting change SPC f s to save the file SPC g s to return to the Magit status buffer s on the file to stage any unstaged changes after editing the conflicting files A to open the Apply action menu, A to continue with the apply of cherries Staged changes require committing, so continuing the Apply will open a commit message buffer , , to confirm the commit The cherry commits will be automatically committed, unless there is a conflict in another commit. Repeat the above steps until there are no further conflicts and all the commits are merged. A s to skip over a commit that is proving to be overly challenging to resolve its conflicts A a to abort and roll back to the state before cherry picking started, loosing all conflict edits Diff 3 configuration \u03bb\ufe0e Diff 3 presentation of merge conflicts displays a common parent (if one exists) between the two changes in conflict. Git configuration details how to add diff3 merge support along with many other useful settings. Errors and Aborts \u03bb\ufe0e $ opens the Magit command log, showing commands run and errors that may have occured, such as if commits are not applied or the Apply process aborts.","title":"Cherry Picking commits"},{"location":"source-control/magit/cherry-picking/#cherry-picking-commits","text":"Cherry Picking is a way to be specific about which commits from a branch are incorporated into another branch. Where as merging a branch into another would take the full commit history. SPC g s to open magit status provides the A Apply menu. A with the point on any commit (or with commits selected in a list) allows cherry picking from the related branch. A common use of cherry picking it to copy one or more commits from one branch and apply them to another branch. Cherry picking may also be used as part of a pull request process, rather than merging the pull request directly, avoiding any unintentional commits that may be part of that pull request.","title":"Cherry Picking commits"},{"location":"source-control/magit/cherry-picking/#cherries-comparing-two-branches","text":"Y to select cherries Select the Cherry head - the branch containing commits (cherries) that are to be copied Select the Cherry upstream - the branch that would receive the commits (cherries) A list of commits, 'cherries', are show to help narrow down which commits could be cherry picked. A with the point on one of the cherries, or with one or more cherries selected, will start the Applying of commits","title":"Cherries - comparing two branches"},{"location":"source-control/magit/cherry-picking/#find-commits-via-list-of-branches","text":"l o in Magit Status will list the other branches. Navigate to the branch and commit (or commits) to cherry pick. Use visual select state, v to select multiple commits ( C-SPC in holy mode)","title":"Find commits via list of branches"},{"location":"source-control/magit/cherry-picking/#applying-commits","text":"A starts the apply menu to start the cherry picking process. A is also used to open the transient Apply menu, to continue skip or abort the cherry picking. d to donate the selected cherry commits to another branch Select the donate branch - the branch commits are to be copied to If there are no conflicts, the commits are added to the branch. Push the changes, P p , to a remote repository if relevant.","title":"Applying commits"},{"location":"source-control/magit/cherry-picking/#managing-conflicts","text":"The Magit status buffer shows a cherry-picking progress section if the selected cherries (commits) cannot be automatically merged into the branch, Files that contain merge conflicts will be listed under unstaged changes RET to open file for editing in a buffer and resolve the conflicting change SPC f s to save the file SPC g s to return to the Magit status buffer s on the file to stage any unstaged changes after editing the conflicting files A to open the Apply action menu, A to continue with the apply of cherries Staged changes require committing, so continuing the Apply will open a commit message buffer , , to confirm the commit The cherry commits will be automatically committed, unless there is a conflict in another commit. Repeat the above steps until there are no further conflicts and all the commits are merged. A s to skip over a commit that is proving to be overly challenging to resolve its conflicts A a to abort and roll back to the state before cherry picking started, loosing all conflict edits","title":"Managing Conflicts"},{"location":"source-control/magit/cherry-picking/#diff-3-configuration","text":"Diff 3 presentation of merge conflicts displays a common parent (if one exists) between the two changes in conflict. Git configuration details how to add diff3 merge support along with many other useful settings.","title":"Diff 3 configuration"},{"location":"source-control/magit/cherry-picking/#errors-and-aborts","text":"$ opens the Magit command log, showing commands run and errors that may have occured, such as if commits are not applied or the Apply process aborts.","title":"Errors and Aborts"},{"location":"source-control/magit/clean-up-magit-sessions/","text":"Cleaning up Magit sessions \u03bb\ufe0e Leaving Magit status buffers using the q key will persist the Magit status session until you close it with SPC u q or quit / restart Spacemacs. If you have multiple Magit status sessions open, you can use Helm to back close them. Keybinding Description q returns to previous window layout, keeping the Magit status buffer available. SPC u q kills the magit status buffer and returns to previous layout Closing multiple Magit buffers with Helm \u03bb\ufe0e Use the Helm transient state menu to bulk delete them. SPC b b to open all buffers. Type magit in the helm prompt to show just the magit buffers M-SPC opens the Helm Transient state T marks all buffers M-D deletes all marked buffers (and closes the Helm transient state)","title":"Cleaning up Magit sessions"},{"location":"source-control/magit/clean-up-magit-sessions/#cleaning-up-magit-sessions","text":"Leaving Magit status buffers using the q key will persist the Magit status session until you close it with SPC u q or quit / restart Spacemacs. If you have multiple Magit status sessions open, you can use Helm to back close them. Keybinding Description q returns to previous window layout, keeping the Magit status buffer available. SPC u q kills the magit status buffer and returns to previous layout","title":"Cleaning up Magit sessions"},{"location":"source-control/magit/clean-up-magit-sessions/#closing-multiple-magit-buffers-with-helm","text":"Use the Helm transient state menu to bulk delete them. SPC b b to open all buffers. Type magit in the helm prompt to show just the magit buffers M-SPC opens the Helm Transient state T marks all buffers M-D deletes all marked buffers (and closes the Helm transient state)","title":"Closing multiple Magit buffers with Helm"},{"location":"source-control/magit/commit-amend/","text":"Amend a commit \u03bb\ufe0e First stage any changes you wish to make to the previous commit, i.e. HEAD. c to enter the commit transient state menu a in the commit menu to amend a commit The commit transient state buffers now appear and show you the details of the previous commit with the additional staged changes. You can edit the commit message and review the diffs for all the files added to the commit (helping ensure you write a meaningful commit message). , , to confirm the changes should be committed. , k to cancel changes and leave the previous commit unchanged. {% youtube %} https://youtu.be/2NNrc61RVx4?autoplay=1loop=1 Why amend a commit \u03bb\ufe0e Amend creates a new commit with both the currently staged changes and the change in the previous commit. If you forgot to include some changes in the last commit, then this is a way to avoid two commits for the same logical change. As amending also allows you to edit the commit message, this can be updated to fix errors or add more details. Reword the previous commit message \u03bb\ufe0e c w allow you to reword the commit message of the previous commit. Any staged changes are ignored and not amended to the previous commit. Extend the previous commit \u03bb\ufe0e c e will immediately add all staged changes to the previous commit, creating an new commit that replaces the previous commit. You are not prompted, so use this with caution. No prompt is given to edit the commit message, so this is only useful if you simply just missed a change or file and the commit message already describes the change in full detail. HINT::How to undo a commit extend \u03bb\ufe0e O to select the Magit Reset menu. s for a soft reset, assuming you only wish to reset the commit (leaves staged and working files as they are). Select ORIG_HEAD to select the unchanged HEAD commit from the remote repository, assuming it has the required commit. Amending a commit that is not HEAD \u03bb\ufe0e Interactive rebasing is required to amend a commit that is not currently the HEAD commit. The amend command only works with the HEAD commit and Git doesn't provide a specific command for modifying a commit other than HEAD. Hint::Avoid amending shared commits \u03bb\ufe0e Amending a commit will change the commit reference number (the SHA hash code) as this is based in part on the time of commit as well as the contents. Use the -f force flag to push an amended commit to a shared repository (e.g. GitHub or GitLab). P -f p to force push to the remote repository.","title":"Amend a commit"},{"location":"source-control/magit/commit-amend/#amend-a-commit","text":"First stage any changes you wish to make to the previous commit, i.e. HEAD. c to enter the commit transient state menu a in the commit menu to amend a commit The commit transient state buffers now appear and show you the details of the previous commit with the additional staged changes. You can edit the commit message and review the diffs for all the files added to the commit (helping ensure you write a meaningful commit message). , , to confirm the changes should be committed. , k to cancel changes and leave the previous commit unchanged. {% youtube %} https://youtu.be/2NNrc61RVx4?autoplay=1loop=1","title":"Amend a commit"},{"location":"source-control/magit/commit-amend/#why-amend-a-commit","text":"Amend creates a new commit with both the currently staged changes and the change in the previous commit. If you forgot to include some changes in the last commit, then this is a way to avoid two commits for the same logical change. As amending also allows you to edit the commit message, this can be updated to fix errors or add more details.","title":"Why amend a commit"},{"location":"source-control/magit/commit-amend/#reword-the-previous-commit-message","text":"c w allow you to reword the commit message of the previous commit. Any staged changes are ignored and not amended to the previous commit.","title":"Reword the previous commit message"},{"location":"source-control/magit/commit-amend/#extend-the-previous-commit","text":"c e will immediately add all staged changes to the previous commit, creating an new commit that replaces the previous commit. You are not prompted, so use this with caution. No prompt is given to edit the commit message, so this is only useful if you simply just missed a change or file and the commit message already describes the change in full detail.","title":"Extend the previous commit"},{"location":"source-control/magit/commit-amend/#hinthow-to-undo-a-commit-extend","text":"O to select the Magit Reset menu. s for a soft reset, assuming you only wish to reset the commit (leaves staged and working files as they are). Select ORIG_HEAD to select the unchanged HEAD commit from the remote repository, assuming it has the required commit.","title":"HINT::How to undo a commit extend"},{"location":"source-control/magit/commit-amend/#amending-a-commit-that-is-not-head","text":"Interactive rebasing is required to amend a commit that is not currently the HEAD commit. The amend command only works with the HEAD commit and Git doesn't provide a specific command for modifying a commit other than HEAD.","title":"Amending a commit that is not HEAD"},{"location":"source-control/magit/commit-amend/#hintavoid-amending-shared-commits","text":"Amending a commit will change the commit reference number (the SHA hash code) as this is based in part on the time of commit as well as the contents. Use the -f force flag to push an amended commit to a shared repository (e.g. GitHub or GitLab). P -f p to force push to the remote repository.","title":"Hint::Avoid amending shared commits"},{"location":"source-control/magit/commit-changes/","text":"Committing changes \u03bb\ufe0e c opens the commit menu in the Magit status buffer, allowing you to create new commits, amend , extend , reword . Commit commands \u03bb\ufe0e The Magit commit menu can be used to create new commits at the HEAD of the commit history. Changing a commit generates a new SHA identity, creating a commit in the history, replacing the current HEAD commit. Tool Magit Description create c c creates a new commit and prompts for a commit message Amend c a add staged changes to HEAD commit and commit message can be edited Reword c w edit the commit message, ignore any staged changes Extend c e add all staged files to the HEAD commit, no message editing","title":"Committing changes"},{"location":"source-control/magit/commit-changes/#committing-changes","text":"c opens the commit menu in the Magit status buffer, allowing you to create new commits, amend , extend , reword .","title":"Committing changes"},{"location":"source-control/magit/commit-changes/#commit-commands","text":"The Magit commit menu can be used to create new commits at the HEAD of the commit history. Changing a commit generates a new SHA identity, creating a commit in the history, replacing the current HEAD commit. Tool Magit Description create c c creates a new commit and prompts for a commit message Amend c a add staged changes to HEAD commit and commit message can be edited Reword c w edit the commit message, ignore any staged changes Extend c e add all staged files to the HEAD commit, no message editing","title":"Commit commands"},{"location":"source-control/magit/commit-create/","text":"Create a commit \u03bb\ufe0e c c in Magit status buffer ( SPC g s ) creates a new commit that will become the new HEAD in the commit history. Two new buffers open * The commit message buffer - to write multi-line commit messages * The diff buffer - a visual diff of changes to be included in this commit , , to create the commit , k to cancel the commit (leaves changes staged) Writing Commit messages \u03bb\ufe0e Type in a suitable commit message that explains the purpose and value of this commit. The first line should be a succinct summary of the purpose of the change. 68 characters is the recommended maximum length of the first line of the commit message. At 69 characters onward they change color to give a visual guide to the maximum length. In the body, lines are automatically wrapped once a space is typed after a word that the maximum length. Commit message history \u03bb\ufe0e g k will paste the previous commit message in the commit message buffer when creating a commit in Magit. Further g k key presses will cycle backwards through the previous commit messages g j will cycle forwards through commit messages Scrolling through the commit history is a simple way to create consistent style of commit messages without having to look at previous commits separately. Commit messages are remembered even after a reset (tested with soft reset) Previous messages are only available once a commit is made. If a change is cancelled, , k before the commit then the message is not saved. Instead, select the message and yank, y , into the kill ring before killing the commit. Linking GitHub issues and Git commits \u03bb\ufe0e Including a reference to an issue, e.g. GH-42 or #42 , you can link a commit to a GitHub issue. Include the phrase Resolves #42 or Closes #42 anywhere in the commit message to automatically close an issue when a commit is pushed to GitHub. Avoid using the #42 short form at the start of the line in Magit. Lines starting with # are comments and not included in the commit message.","title":"Create a commit"},{"location":"source-control/magit/commit-create/#create-a-commit","text":"c c in Magit status buffer ( SPC g s ) creates a new commit that will become the new HEAD in the commit history. Two new buffers open * The commit message buffer - to write multi-line commit messages * The diff buffer - a visual diff of changes to be included in this commit , , to create the commit , k to cancel the commit (leaves changes staged)","title":"Create a commit"},{"location":"source-control/magit/commit-create/#writing-commit-messages","text":"Type in a suitable commit message that explains the purpose and value of this commit. The first line should be a succinct summary of the purpose of the change. 68 characters is the recommended maximum length of the first line of the commit message. At 69 characters onward they change color to give a visual guide to the maximum length. In the body, lines are automatically wrapped once a space is typed after a word that the maximum length.","title":"Writing Commit messages"},{"location":"source-control/magit/commit-create/#commit-message-history","text":"g k will paste the previous commit message in the commit message buffer when creating a commit in Magit. Further g k key presses will cycle backwards through the previous commit messages g j will cycle forwards through commit messages Scrolling through the commit history is a simple way to create consistent style of commit messages without having to look at previous commits separately. Commit messages are remembered even after a reset (tested with soft reset) Previous messages are only available once a commit is made. If a change is cancelled, , k before the commit then the message is not saved. Instead, select the message and yank, y , into the kill ring before killing the commit.","title":"Commit message history"},{"location":"source-control/magit/commit-create/#linking-github-issues-and-git-commits","text":"Including a reference to an issue, e.g. GH-42 or #42 , you can link a commit to a GitHub issue. Include the phrase Resolves #42 or Closes #42 anywhere in the commit message to automatically close an issue when a commit is pushed to GitHub. Avoid using the #42 short form at the start of the line in Magit. Lines starting with # are comments and not included in the commit message.","title":"Linking GitHub issues and Git commits"},{"location":"source-control/magit/commit-extend/","text":"Extend a commit \u03bb\ufe0e c e takes the current HEAD commit, adds all currently staged changes and creates a new commit. This new commit replaces the current HEAD commit. TODO::Add screenshot \u03bb\ufe0e Force push a shared commit \u03bb\ufe0e If you already shared a commit that you want to extend, please ask those you work with if its okay (as it could interrupt their development). For shared commits, its better practice to create a new commit and push that rather than rewrite history. P opens the Push menu in Magit status buffer ( SPC g s ). -f sets the force-with-lease option to rewrite the shared history in the remote repository p pushes to the new commit to the remote repository and replaces the HEAD commit in that repository.","title":"Extend a commit"},{"location":"source-control/magit/commit-extend/#extend-a-commit","text":"c e takes the current HEAD commit, adds all currently staged changes and creates a new commit. This new commit replaces the current HEAD commit.","title":"Extend a commit"},{"location":"source-control/magit/commit-extend/#todoadd-screenshot","text":"","title":"TODO::Add screenshot"},{"location":"source-control/magit/commit-extend/#force-push-a-shared-commit","text":"If you already shared a commit that you want to extend, please ask those you work with if its okay (as it could interrupt their development). For shared commits, its better practice to create a new commit and push that rather than rewrite history. P opens the Push menu in Magit status buffer ( SPC g s ). -f sets the force-with-lease option to rewrite the shared history in the remote repository p pushes to the new commit to the remote repository and replaces the HEAD commit in that repository.","title":"Force push a shared commit"},{"location":"source-control/magit/commit-rewrite/","text":"Reword a commit \u03bb\ufe0e c w from the Magit status buffer ( SPC g s ) allows you to rewrite the commit message. Any staged changes are kept in staging and not added to the existing commit. This new commit replaces the current HEAD commit. TODO::Add screenshot \u03bb\ufe0e Force push a shared commit \u03bb\ufe0e If you already shared a commit that you want to extend, please ask those you work with if its okay (as it could interrupt their development). For shared commits, its better practice to create a new commit and push that rather than rewrite history. P opens the Push menu in Magit status buffer ( SPC g s ). -f sets the force-with-lease option to rewrite the shared history in the remote repository p pushes to the new commit to the remote repository and replaces the HEAD commit in that repository.","title":"Reword a commit"},{"location":"source-control/magit/commit-rewrite/#reword-a-commit","text":"c w from the Magit status buffer ( SPC g s ) allows you to rewrite the commit message. Any staged changes are kept in staging and not added to the existing commit. This new commit replaces the current HEAD commit.","title":"Reword a commit"},{"location":"source-control/magit/commit-rewrite/#todoadd-screenshot","text":"","title":"TODO::Add screenshot"},{"location":"source-control/magit/commit-rewrite/#force-push-a-shared-commit","text":"If you already shared a commit that you want to extend, please ask those you work with if its okay (as it could interrupt their development). For shared commits, its better practice to create a new commit and push that rather than rewrite history. P opens the Push menu in Magit status buffer ( SPC g s ). -f sets the force-with-lease option to rewrite the shared history in the remote repository p pushes to the new commit to the remote repository and replaces the HEAD commit in that repository.","title":"Force push a shared commit"},{"location":"source-control/magit/commit-squash/","text":"Squash Commits \u03bb\ufe0e c to enter the commit transient state menu s in the commit menu to amend a commit The top buffer shows the local Git log, listing all the commit history. The bottom buffer shows the magit-diff output, so you can see all the changes of the current commit. Move the cursor to the commit you wish to squash into its previous commit , , or C-c C-c to confirm the commit(s) should be squashed. , k or C-c C-k to cancel changes and leave the commit history unchanged. Why Squash commits \u03bb\ufe0e The commit history should help the development team understand the reasons for changes as well as what has actually changed. Squashing commits is useful for joining together commits that form a logical change. If a change is spread over several commits, then squashing those commits together can improve the commit history. Hint::Avoid squashing shared commits \u03bb\ufe0e Squashing a commit will change the commit reference number (the SHA hash code) as this is based in part on the time of commit as well as the contents. If you need to squash a commit history that has already been shared you should tell everyone before doing so as they will have to pull the new commit history. Use the -f force flag to push a squashed commit to a shared repository (e.g. GitHub or GitLab). P -f p to force push to the remote repository.","title":"Squash Commits"},{"location":"source-control/magit/commit-squash/#squash-commits","text":"c to enter the commit transient state menu s in the commit menu to amend a commit The top buffer shows the local Git log, listing all the commit history. The bottom buffer shows the magit-diff output, so you can see all the changes of the current commit. Move the cursor to the commit you wish to squash into its previous commit , , or C-c C-c to confirm the commit(s) should be squashed. , k or C-c C-k to cancel changes and leave the commit history unchanged.","title":"Squash Commits"},{"location":"source-control/magit/commit-squash/#why-squash-commits","text":"The commit history should help the development team understand the reasons for changes as well as what has actually changed. Squashing commits is useful for joining together commits that form a logical change. If a change is spread over several commits, then squashing those commits together can improve the commit history.","title":"Why Squash commits"},{"location":"source-control/magit/commit-squash/#hintavoid-squashing-shared-commits","text":"Squashing a commit will change the commit reference number (the SHA hash code) as this is based in part on the time of commit as well as the contents. If you need to squash a commit history that has already been shared you should tell everyone before doing so as they will have to pull the new commit history. Use the -f force flag to push a squashed commit to a shared repository (e.g. GitHub or GitLab). P -f p to force push to the remote repository.","title":"Hint::Avoid squashing shared commits"},{"location":"source-control/magit/create-local-repository/","text":"Create a local Git repository \u03bb\ufe0e SPC g i creates a local git repository, prompting for root directory in which to create it. Once magit created the git repository it automatically opens magit-status . Using Magit Status to create a local repository \u03bb\ufe0e SPC g s on a project that has no git version control will prompt you for a directory that contains a git repository. If you select a directory without a .git repository, a prompt in the mini-buffer will ask if a git repository should be created. If magit-repository-directories is configured in .spacemacs , then only a list of existing repositories are listed. Type . to initialize a new git repository in the current project. Magit will prompt you in the mini-buffer to confirm you wish to create this git repository. SPC g i is the recommended approach to initialize a new git repository once magit-repository-directories is set.","title":"Create a local Git repository"},{"location":"source-control/magit/create-local-repository/#create-a-local-git-repository","text":"SPC g i creates a local git repository, prompting for root directory in which to create it. Once magit created the git repository it automatically opens magit-status .","title":"Create a local Git repository"},{"location":"source-control/magit/create-local-repository/#using-magit-status-to-create-a-local-repository","text":"SPC g s on a project that has no git version control will prompt you for a directory that contains a git repository. If you select a directory without a .git repository, a prompt in the mini-buffer will ask if a git repository should be created. If magit-repository-directories is configured in .spacemacs , then only a list of existing repositories are listed. Type . to initialize a new git repository in the current project. Magit will prompt you in the mini-buffer to confirm you wish to create this git repository. SPC g i is the recommended approach to initialize a new git repository once magit-repository-directories is set.","title":"Using Magit Status to create a local repository"},{"location":"source-control/magit/interactive-rebasing/","text":"Interactive Rebasing \u03bb\ufe0e Magit provides an excellent tool to change history using interactive rebasing. By navigating back through the commit history changes can be made to commits or simply updating commit messages for commits that are not the current HEAD. During the interactive rebasing you can use other Git commands such as Amend, Write and Extend to update commits anywhere in the history. Before rebasing, any uncommitted changes should be stashed or deleted. Starting Rebase \u03bb\ufe0e SPC g s to open the Magit Status buffer and find the commit where the rebase should start. Either navigate to the Recent Commits section and TAB to show the list of commits, or use l l to open the commit history log. Move the cursor to the commit to rebase from, the earliest commit to be changed. Modifying a commit during rebase \u03bb\ufe0e r to start rebase m to modify the commit s to stage any new content to be added to the commit, if required. u to mark hunks or regions to unstage in the original commit, using v to select regions within hunks if required. z w to stash the working copy of any unstaged changes, or x to delete those unstaged changes from the working copy c a to amend the commit with the changes , , to confirm the changes and make the new commit r r to continue the rebase P p to push the changes to a remote repository, or P -f p for a forced push with lease if rebased commits were already pushed to that repository z p to unstash any changes that were stashed during or before the rebase. TODO::work in progress, sorry \u03bb\ufe0e Interactive rebase to modifying a commit other than HEAD \u03bb\ufe0e can be broken down into three steps: Temporarily make that other commit (A) the HEAD. Modify the HEAD (as described above), resulting in commit A'. Tell Git to reapply the commits that followed A, but on top of A'. This can be done using an interactive rebase. Type r to show the rebase popup. Then type m to invoke the \"edit a commit\" rebase variant. A buffer with recent commits appears. Move to the commit you want to modify and type C-c C-c to select it. Git then rewinds history to that commit and shows information about the ongoing rebase in the status buffer. Modify HEAD using the amend tools r r to confirm the changes are complete. If A' and B conflict then rebase will stop at B and you have to resolve the conflict. After you have done so press r r to continue. If you know that your changes to A will result in conflicts with B, then proceed as describe above, otherwise use the following approach. Git allows creating \"fixup commits\" using git commit --fixup A. This creates a new commit, which records changes which \"should have been made in another commit\". That commit becomes the new HEAD. There also exists a --squash variant. For information about the differences see the git-commit man page. Rebase with autosquash \u03bb\ufe0e To actually combine the A commit and the new commit A' and then reapply B on top of that you have to use rebase. Magit provides a convenient command for doing so on r f. The main difference to the above approach is that here we first create a new commit and then we rebase to combine that with the \"target\" and reapply B. Above we began with rebasing instead of committing. In Magit both the --fixup and the --squash variants are available from the commit popup, on f and s. But Magit also provides \"instant\" variants of the fixup and squash commands on F and S. These variants create a new commit like the \"non-instant\" variants, but then they instantly combine the fixup commit with the target commit using rebase, without you having to invoke another command. \"Instant fixup\" (c F) is essentially the same thing as \"extend HEAD\" (c e), except that it works for any commit, not just HEAD.","title":"Interactive Rebasing"},{"location":"source-control/magit/interactive-rebasing/#interactive-rebasing","text":"Magit provides an excellent tool to change history using interactive rebasing. By navigating back through the commit history changes can be made to commits or simply updating commit messages for commits that are not the current HEAD. During the interactive rebasing you can use other Git commands such as Amend, Write and Extend to update commits anywhere in the history. Before rebasing, any uncommitted changes should be stashed or deleted.","title":"Interactive Rebasing"},{"location":"source-control/magit/interactive-rebasing/#starting-rebase","text":"SPC g s to open the Magit Status buffer and find the commit where the rebase should start. Either navigate to the Recent Commits section and TAB to show the list of commits, or use l l to open the commit history log. Move the cursor to the commit to rebase from, the earliest commit to be changed.","title":"Starting Rebase"},{"location":"source-control/magit/interactive-rebasing/#modifying-a-commit-during-rebase","text":"r to start rebase m to modify the commit s to stage any new content to be added to the commit, if required. u to mark hunks or regions to unstage in the original commit, using v to select regions within hunks if required. z w to stash the working copy of any unstaged changes, or x to delete those unstaged changes from the working copy c a to amend the commit with the changes , , to confirm the changes and make the new commit r r to continue the rebase P p to push the changes to a remote repository, or P -f p for a forced push with lease if rebased commits were already pushed to that repository z p to unstash any changes that were stashed during or before the rebase.","title":"Modifying a commit during rebase"},{"location":"source-control/magit/interactive-rebasing/#todowork-in-progress-sorry","text":"","title":"TODO::work in progress, sorry"},{"location":"source-control/magit/interactive-rebasing/#interactive-rebase-to-modifying-a-commit-other-than-head","text":"can be broken down into three steps: Temporarily make that other commit (A) the HEAD. Modify the HEAD (as described above), resulting in commit A'. Tell Git to reapply the commits that followed A, but on top of A'. This can be done using an interactive rebase. Type r to show the rebase popup. Then type m to invoke the \"edit a commit\" rebase variant. A buffer with recent commits appears. Move to the commit you want to modify and type C-c C-c to select it. Git then rewinds history to that commit and shows information about the ongoing rebase in the status buffer. Modify HEAD using the amend tools r r to confirm the changes are complete. If A' and B conflict then rebase will stop at B and you have to resolve the conflict. After you have done so press r r to continue. If you know that your changes to A will result in conflicts with B, then proceed as describe above, otherwise use the following approach. Git allows creating \"fixup commits\" using git commit --fixup A. This creates a new commit, which records changes which \"should have been made in another commit\". That commit becomes the new HEAD. There also exists a --squash variant. For information about the differences see the git-commit man page.","title":"Interactive rebase to modifying a commit other than HEAD"},{"location":"source-control/magit/interactive-rebasing/#rebase-with-autosquash","text":"To actually combine the A commit and the new commit A' and then reapply B on top of that you have to use rebase. Magit provides a convenient command for doing so on r f. The main difference to the above approach is that here we first create a new commit and then we rebase to combine that with the \"target\" and reapply B. Above we began with rebasing instead of committing. In Magit both the --fixup and the --squash variants are available from the commit popup, on f and s. But Magit also provides \"instant\" variants of the fixup and squash commands on F and S. These variants create a new commit like the \"non-instant\" variants, but then they instantly combine the fixup commit with the target commit using rebase, without you having to invoke another command. \"Instant fixup\" (c F) is essentially the same thing as \"extend HEAD\" (c e), except that it works for any commit, not just HEAD.","title":"Rebase with autosquash"},{"location":"source-control/magit/list-local-repositories/","text":"List your local Git repositories \u03bb\ufe0e SPC g L will list all the repositories along with basic status information (branches, dirty, etc). This is very useful as the number of created or cloned repositories grows on your computer. You first need to tell Magit where your repositories are on your computer. Configure the location of your Git repositories \u03bb\ufe0e magit-repository-directories is used to define which directories Magit should search in to find your Git repositories. This configuration should be added to the dotspacemacs/user-config section of your .spacemacs file. In the following example the Git repositories are all under a directory called projects in your home directory. It also specifically adds the Spacemacs repository in .emacs.d . ( setq magit-repository-directories ' (( \"~/.emacs.d\" . 0 ) ( \"~/projects/\" . 2 ))) The number represents the depth of subdirectories in which magit searches for Git repositories in the specified directory. Hint:: Setting repository directories changes Magit Status behaviour \u03bb\ufe0e SPC g i should be used to initialize a new git repository once magit-repository-directories is set. If you use SPC g s on a project that has no git version control, magit will prompt you for a git repository. Enter . to initialise a new git repository in the current project. Magit will prompt you in the mini-buffer to confirm you wish to create this git repository.","title":"List your local Git repositories"},{"location":"source-control/magit/list-local-repositories/#list-your-local-git-repositories","text":"SPC g L will list all the repositories along with basic status information (branches, dirty, etc). This is very useful as the number of created or cloned repositories grows on your computer. You first need to tell Magit where your repositories are on your computer.","title":"List your local Git repositories"},{"location":"source-control/magit/list-local-repositories/#configure-the-location-of-your-git-repositories","text":"magit-repository-directories is used to define which directories Magit should search in to find your Git repositories. This configuration should be added to the dotspacemacs/user-config section of your .spacemacs file. In the following example the Git repositories are all under a directory called projects in your home directory. It also specifically adds the Spacemacs repository in .emacs.d . ( setq magit-repository-directories ' (( \"~/.emacs.d\" . 0 ) ( \"~/projects/\" . 2 ))) The number represents the depth of subdirectories in which magit searches for Git repositories in the specified directory.","title":"Configure the location of your Git repositories"},{"location":"source-control/magit/list-local-repositories/#hint-setting-repository-directories-changes-magit-status-behaviour","text":"SPC g i should be used to initialize a new git repository once magit-repository-directories is set. If you use SPC g s on a project that has no git version control, magit will prompt you for a git repository. Enter . to initialise a new git repository in the current project. Magit will prompt you in the mini-buffer to confirm you wish to create this git repository.","title":"Hint:: Setting repository directories changes Magit Status behaviour"},{"location":"source-control/magit/reset-commit-history/","text":"Reset Commit History \u03bb\ufe0e Reset allows you to roll back commit history. The local commit history can be changed by removing one or more commits and either keeping or discarding staged and local working copy changes. O (capital 0) in the Magit Status buffer opens the reset menu Key bindings Description s remove the commit, keep the staged and working directory changes h remove the commit, staged and working directory changes m remove the commit and staged changes, keep the working directory i remove staged changes only w remove working directory changes only f reset a specific file Using recent commits or log \u03bb\ufe0e Navigating the recent commits list on the magit status buffer or viewing the log list, l l , provides a simple way to reset to a specific commit, especially further back in the git history. j and k to navigate to the commit in the history to reset to,the commit that will be the new HEAD. O to initiate a reset and choose the scope of the reset to carry out (commit, staging, working directory). Specifying a commit to reset to \u03bb\ufe0e Specify or select where to reset the commit history to Reset HEAD to Description HEAD no change, this is the latest commit HEAD~1 first commit before the latest HEAD~2 second commit before the latest All commits between the current HEAD new HEAD will be removed. l l shows you the updated commit history. Hint::Changing shared commit history \u03bb\ufe0e Avoid reverting shared history when possible, instead consider using revert Use the -f force option if you must push a changed history to a shared repository P -f p to force push to a remote repository.","title":"Reset Commit History"},{"location":"source-control/magit/reset-commit-history/#reset-commit-history","text":"Reset allows you to roll back commit history. The local commit history can be changed by removing one or more commits and either keeping or discarding staged and local working copy changes. O (capital 0) in the Magit Status buffer opens the reset menu Key bindings Description s remove the commit, keep the staged and working directory changes h remove the commit, staged and working directory changes m remove the commit and staged changes, keep the working directory i remove staged changes only w remove working directory changes only f reset a specific file","title":"Reset Commit History"},{"location":"source-control/magit/reset-commit-history/#using-recent-commits-or-log","text":"Navigating the recent commits list on the magit status buffer or viewing the log list, l l , provides a simple way to reset to a specific commit, especially further back in the git history. j and k to navigate to the commit in the history to reset to,the commit that will be the new HEAD. O to initiate a reset and choose the scope of the reset to carry out (commit, staging, working directory).","title":"Using recent commits or log"},{"location":"source-control/magit/reset-commit-history/#specifying-a-commit-to-reset-to","text":"Specify or select where to reset the commit history to Reset HEAD to Description HEAD no change, this is the latest commit HEAD~1 first commit before the latest HEAD~2 second commit before the latest All commits between the current HEAD new HEAD will be removed. l l shows you the updated commit history.","title":"Specifying a commit to reset to"},{"location":"source-control/magit/reset-commit-history/#hintchanging-shared-commit-history","text":"Avoid reverting shared history when possible, instead consider using revert Use the -f force option if you must push a changed history to a shared repository P -f p to force push to a remote repository.","title":"Hint::Changing shared commit history"},{"location":"source-control/magit/staging-changes/","text":"Staging changes \u03bb\ufe0e Regularly staging changes provides an additional safety net as you work towards a meaningful change. Magit enables very fine grain selection when staging changes. A file, a hunk or even a specific line can be staged and unstaged. This makes it very easy to create clean commits. s to stage the current file, hunk or selected region. Multiple files can be staged by selecting the filenames. S stages all the untracked files and Unstaged changes . u to unstage the current file, hunk or selected region in the staged changes section. U to unstage everything (from anywhere in the Magit Status buffer). Tab to expand a section, eg. a file expands to git hunks, hunks expand to lines in the hunk. Shift + Tab to collapse a section. [ to jump down from section to section, ] to jump back up. v to visually select one or more filenames or lines to stage or unstage. Visual select withing hunk boundary Selecting lines to stage or unstage only works within the Git hunk boundary. The action fails if lines are selected from more than one hunk. Renamed files \u03bb\ufe0e s to stage the deleted file (previous file name) and the new file name (in untracked files). Magit status should show the file as renamed, unless the contents was significantly changed. x on a file name in Magit Status buffer will delete that file. A prompt will show in the mini-buffer to confirm you want to 'Trash' the file. v enters visual select mode, j and k can be used to select multiple files. x deletes all the selected files, with a mini-buffer prompt to confirm. Magit staging and commit basics \u03bb\ufe0e","title":"Staging changes"},{"location":"source-control/magit/staging-changes/#staging-changes","text":"Regularly staging changes provides an additional safety net as you work towards a meaningful change. Magit enables very fine grain selection when staging changes. A file, a hunk or even a specific line can be staged and unstaged. This makes it very easy to create clean commits. s to stage the current file, hunk or selected region. Multiple files can be staged by selecting the filenames. S stages all the untracked files and Unstaged changes . u to unstage the current file, hunk or selected region in the staged changes section. U to unstage everything (from anywhere in the Magit Status buffer). Tab to expand a section, eg. a file expands to git hunks, hunks expand to lines in the hunk. Shift + Tab to collapse a section. [ to jump down from section to section, ] to jump back up. v to visually select one or more filenames or lines to stage or unstage. Visual select withing hunk boundary Selecting lines to stage or unstage only works within the Git hunk boundary. The action fails if lines are selected from more than one hunk.","title":"Staging changes"},{"location":"source-control/magit/staging-changes/#renamed-files","text":"s to stage the deleted file (previous file name) and the new file name (in untracked files). Magit status should show the file as renamed, unless the contents was significantly changed. x on a file name in Magit Status buffer will delete that file. A prompt will show in the mini-buffer to confirm you want to 'Trash' the file. v enters visual select mode, j and k can be used to select multiple files. x deletes all the selected files, with a mini-buffer prompt to confirm.","title":"Renamed files"},{"location":"source-control/magit/staging-changes/#magit-staging-and-commit-basics","text":"","title":"Magit staging and commit basics"},{"location":"source-control/magit/stashing/","text":"Stashing changes \u03bb\ufe0e z opens the Stash menu, allowing you to keep changes in your working directory or staging index without having to commit them. Stashing your local changes allows you to change to a different branch or pull commits from a remote repository. z will stash all the changes in your local working directory and everything you have staged. i stashes the changes that are staged, w stashes only the working directory TODO::work in progress, sorry \u03bb\ufe0e difference between stash and snapshot apply, pop drop","title":"Stashing changes"},{"location":"source-control/magit/stashing/#stashing-changes","text":"z opens the Stash menu, allowing you to keep changes in your working directory or staging index without having to commit them. Stashing your local changes allows you to change to a different branch or pull commits from a remote repository. z will stash all the changes in your local working directory and everything you have staged. i stashes the changes that are staged, w stashes only the working directory","title":"Stashing changes"},{"location":"source-control/magit/stashing/#todowork-in-progress-sorry","text":"difference between stash and snapshot apply, pop drop","title":"TODO::work in progress, sorry"},{"location":"source-control/magit/status-fullscreen/","text":"Magit Status Fullscreen \u03bb\ufe0e Magit status in fullscreen mode provides lots of space to work with changes, look at logs and compare diffs. Keybinding Description q returns to previous window layout, keeping the Magit status buffer available. SPC u q kills the magit status buffer and returns to previous layout Hint::Magit fullscreen configured in Enhanced Clojure experience \u03bb\ufe0e Magit fullscreen is already configured if you followed the Enhance Clojure experience . Configure fullscreen for Magit Status \u03bb\ufe0e Add the git-magit-status-fullscreen t variable to the git layer in .spacemacs to enable Magit fullscreen. SPC f e d opens the .spacemacs configuration file ( M-m f e d Emacs state) Use / and start typing configuration-layers to search for the dotspacemacs-configuration-layers section. RTN confirms the search text and n jumps to the next occurrence, N jumps to the previous occurrence. dotspacemacs-configuration-layers ' ( ( git :variables git-magit-status-fullscreen t ) ) Reload the configuration or Restart Spacemacs \u03bb\ufe0e For the changes to take effect, either reload the ~/.spacemacs configuration using SPC f e R or restart Spacemacs SPC q r .","title":"Magit Status Fullscreen"},{"location":"source-control/magit/status-fullscreen/#magit-status-fullscreen","text":"Magit status in fullscreen mode provides lots of space to work with changes, look at logs and compare diffs. Keybinding Description q returns to previous window layout, keeping the Magit status buffer available. SPC u q kills the magit status buffer and returns to previous layout","title":"Magit Status Fullscreen"},{"location":"source-control/magit/status-fullscreen/#hintmagit-fullscreen-configured-in-enhanced-clojure-experience","text":"Magit fullscreen is already configured if you followed the Enhance Clojure experience .","title":"Hint::Magit fullscreen configured in Enhanced Clojure experience"},{"location":"source-control/magit/status-fullscreen/#configure-fullscreen-for-magit-status","text":"Add the git-magit-status-fullscreen t variable to the git layer in .spacemacs to enable Magit fullscreen. SPC f e d opens the .spacemacs configuration file ( M-m f e d Emacs state) Use / and start typing configuration-layers to search for the dotspacemacs-configuration-layers section. RTN confirms the search text and n jumps to the next occurrence, N jumps to the previous occurrence. dotspacemacs-configuration-layers ' ( ( git :variables git-magit-status-fullscreen t ) )","title":"Configure fullscreen for Magit Status"},{"location":"source-control/magit/status-fullscreen/#reload-the-configuration-or-restart-spacemacs","text":"For the changes to take effect, either reload the ~/.spacemacs configuration using SPC f e R or restart Spacemacs SPC q r .","title":"Reload the configuration or Restart Spacemacs"},{"location":"source-control/magit/status/","text":"Magit Status \u03bb\ufe0e SPC g s runs Magit status, showing the status of the local git repository and any attached remote repositories. Magit status is a full Git client and can run any Git commands. ? shows all the command menus available for committing g r to refresh Magit status buffer Navigating Magit Status buffer \u03bb\ufe0e j and k to move to next / previous line [ and ] jumps to next / previous section at the current level TAB to expand a section Using Magit status directly \u03bb\ufe0e If you run git status from a file that is not currently in a git project, magit will prompt you to create a git project, allowing you to select the root of the project directory confirm you want to create a git repository specify where to create the repository, the root directory for the git repository {% youtube %} https://www.youtube.com/embed/AdEOazt1rD0?autoplay=1loop=1 Hint::Create new project with magit-repository-directories configured \u03bb\ufe0e If magit-repository-directories is configured with directories, then a helm pop-up menu will list the Git repositories within those directories rather than prompting to create a new repository. Type . as the selection to create a new repository with the current project. Magit Dispatch \u03bb\ufe0e SPC g m calls magit-dispatch which opens a transient menu with all the Magit commands found in Magit Status buffer. Git commands can be run without the need of the Magit status buffer.","title":"Magit Status"},{"location":"source-control/magit/status/#magit-status","text":"SPC g s runs Magit status, showing the status of the local git repository and any attached remote repositories. Magit status is a full Git client and can run any Git commands. ? shows all the command menus available for committing g r to refresh Magit status buffer","title":"Magit Status"},{"location":"source-control/magit/status/#navigating-magit-status-buffer","text":"j and k to move to next / previous line [ and ] jumps to next / previous section at the current level TAB to expand a section","title":"Navigating Magit Status buffer"},{"location":"source-control/magit/status/#using-magit-status-directly","text":"If you run git status from a file that is not currently in a git project, magit will prompt you to create a git project, allowing you to select the root of the project directory confirm you want to create a git repository specify where to create the repository, the root directory for the git repository {% youtube %} https://www.youtube.com/embed/AdEOazt1rD0?autoplay=1loop=1","title":"Using Magit status directly"},{"location":"source-control/magit/status/#hintcreate-new-project-with-magit-repository-directories-configured","text":"If magit-repository-directories is configured with directories, then a helm pop-up menu will list the Git repositories within those directories rather than prompting to create a new repository. Type . as the selection to create a new repository with the current project.","title":"Hint::Create new project with magit-repository-directories configured"},{"location":"source-control/magit/status/#magit-dispatch","text":"SPC g m calls magit-dispatch which opens a transient menu with all the Magit commands found in Magit Status buffer. Git commands can be run without the need of the Magit status buffer.","title":"Magit Dispatch"},{"location":"source-control/magit/tag-commit/","text":"Tag a commit \u03bb\ufe0e Tag a commit adds a label to a specific commit, often used to identify a significant event, e.g. a specific release. TODO::work in progress, sorry \u03bb\ufe0e Pull requests are welcome Tagging via the Git log \u03bb\ufe0e The simplest way to tag an existing commit is to use the Git log. SPC g s to open Magit status l l to show the log, using j k to navigate down and up the log history t t to tag the current commit Tagging via Magit status \u03bb\ufe0e SPC g s t to open the tag menu t to create the tag Tag options \u03bb\ufe0e Tags can be a commit tag or an annotation on an existing commit Pushing tags \u03bb\ufe0e P to open the push menu t to push all tags, T to push a tag p to push to the default push repository, e to select a repository to push the tag too.","title":"Tag a commit"},{"location":"source-control/magit/tag-commit/#tag-a-commit","text":"Tag a commit adds a label to a specific commit, often used to identify a significant event, e.g. a specific release.","title":"Tag a commit"},{"location":"source-control/magit/tag-commit/#todowork-in-progress-sorry","text":"Pull requests are welcome","title":"TODO::work in progress, sorry"},{"location":"source-control/magit/tag-commit/#tagging-via-the-git-log","text":"The simplest way to tag an existing commit is to use the Git log. SPC g s to open Magit status l l to show the log, using j k to navigate down and up the log history t t to tag the current commit","title":"Tagging via the Git log"},{"location":"source-control/magit/tag-commit/#tagging-via-magit-status","text":"SPC g s t to open the tag menu t to create the tag","title":"Tagging via Magit status"},{"location":"source-control/magit/tag-commit/#tag-options","text":"Tags can be a commit tag or an annotation on an existing commit","title":"Tag options"},{"location":"source-control/magit/tag-commit/#pushing-tags","text":"P to open the push menu t to push all tags, T to push a tag p to push to the default push repository, e to select a repository to push the tag too.","title":"Pushing tags"},{"location":"source-control/magit/timemachine/","text":"Git Timemachine \u03bb\ufe0e Easily navigate backwards and forwards through the commit history of a file under Git Version Control. The buffer shows the file as it was in each change you select. Hint:: Positioning the buffer content \u03bb\ufe0e Timemachine seems to work best when you have all the text visible in a buffer or you roughly know where the changes are in the file as you move between commits. Using Timemachine \u03bb\ufe0e SPC g t opens the Git Timemachine transient state. Use the following keys to navigate through all the commits for the current file Keybinding Description c Show the most recent commit for the file g Go to nth commit p Show previous commit n Show next commit t Go to revision by selected commit message w Copy the abbreviated hash of the current commit W Copy the full hash of the current commit q Exit Timemachine transient state INFO:: Magit blame \u03bb\ufe0e According to the git-timemachine website, b runs magit-blame on the currently visited revision. This keybinding is not part of the git layer in Spacemacs. As the minibuffer already shows author information, it seems redundant to add this option. Customise Timemachine \u03bb\ufe0e SPC SPC customize [git-timemachine] .","title":"Git Timemachine"},{"location":"source-control/magit/timemachine/#git-timemachine","text":"Easily navigate backwards and forwards through the commit history of a file under Git Version Control. The buffer shows the file as it was in each change you select.","title":"Git Timemachine"},{"location":"source-control/magit/timemachine/#hint-positioning-the-buffer-content","text":"Timemachine seems to work best when you have all the text visible in a buffer or you roughly know where the changes are in the file as you move between commits.","title":"Hint:: Positioning the buffer content"},{"location":"source-control/magit/timemachine/#using-timemachine","text":"SPC g t opens the Git Timemachine transient state. Use the following keys to navigate through all the commits for the current file Keybinding Description c Show the most recent commit for the file g Go to nth commit p Show previous commit n Show next commit t Go to revision by selected commit message w Copy the abbreviated hash of the current commit W Copy the full hash of the current commit q Exit Timemachine transient state","title":"Using Timemachine"},{"location":"source-control/magit/timemachine/#info-magit-blame","text":"According to the git-timemachine website, b runs magit-blame on the currently visited revision. This keybinding is not part of the git layer in Spacemacs. As the minibuffer already shows author information, it seems redundant to add this option.","title":"INFO:: Magit blame"},{"location":"source-control/magit/timemachine/#customise-timemachine","text":"SPC SPC customize [git-timemachine] .","title":"Customise Timemachine"},{"location":"source-control/magit/version-highlighting/","text":"Highlight Version Control Changes \u03bb\ufe0e Fringe markers show the difference between the working copy and the last commit. As you add code or refactor, the lines that you change are marked in the fringe. SPC T d toggles git fringe marks to indicate changes between working copy and latest commit. Default is off. To display fringe marks by default, add the following to the dotspacemacs-configuration-layers in your .spacemacs file ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t ) See version control layer configuration for other options. Highlighting with Smeargle \u03bb\ufe0e SPC g H toggle smeargle overlays showing historic changes based on time, with the oldest unchanged lines greyed out the most. Default is off. Smeargle is a package that provides highlighting regions by last updated time. Older changes have a opaque white background and newer regions have a darker background. This is supposed to help you just focus on newer changes, as older changes are subtly faded into the background. Smeargle Transient State \u03bb\ufe0e SPC g r enters Smeargle transient state TODO: describe the benefit of this transient state. https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Bsource-control/version-control#smerge-mode-transient-state","title":"Highlight Version Control Changes"},{"location":"source-control/magit/version-highlighting/#highlight-version-control-changes","text":"Fringe markers show the difference between the working copy and the last commit. As you add code or refactor, the lines that you change are marked in the fringe. SPC T d toggles git fringe marks to indicate changes between working copy and latest commit. Default is off. To display fringe marks by default, add the following to the dotspacemacs-configuration-layers in your .spacemacs file ( version-control :variables version-control-diff-tool 'diff-hl version-control-global-margin t ) See version control layer configuration for other options.","title":"Highlight Version Control Changes"},{"location":"source-control/magit/version-highlighting/#highlighting-with-smeargle","text":"SPC g H toggle smeargle overlays showing historic changes based on time, with the oldest unchanged lines greyed out the most. Default is off. Smeargle is a package that provides highlighting regions by last updated time. Older changes have a opaque white background and newer regions have a darker background. This is supposed to help you just focus on newer changes, as older changes are subtly faded into the background.","title":"Highlighting with Smeargle"},{"location":"source-control/magit/version-highlighting/#smeargle-transient-state","text":"SPC g r enters Smeargle transient state TODO: describe the benefit of this transient state. https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Bsource-control/version-control#smerge-mode-transient-state","title":"Smeargle Transient State"},{"location":"source-control/magit/forge/","text":"Magit Forge - issues, PRs and forking \u03bb\ufe0e Magit Forge connects to the GitHub & GitLab via their open APIs, collectively referred to as forges. Topics (the collective name for issues and pull requests) from a repository can be created, edited, commented upon and assigned to people. Magic Forge uses the APIs of these forges to manage issue and pull requests, collectively referred to as topics. @ a to add a repository from the current project to a local database, to cache a list of topics (issues and pull requests) from a remote repository. Issues, pull requests and forks can be created on a remote repository, once the repository has been added to the local dictionary. @ opens the forge menu from the Magit Status buffer, , g s , and therefore requires a local Git repository. Hint::Requires Forge Configuration \u03bb\ufe0e Create an encrypted .authinfo.gpg file for connection details of each forge used before using the Magit Forge commands.","title":"Magit Forge - issues, PRs and forking"},{"location":"source-control/magit/forge/#magit-forge-issues-prs-and-forking","text":"Magit Forge connects to the GitHub & GitLab via their open APIs, collectively referred to as forges. Topics (the collective name for issues and pull requests) from a repository can be created, edited, commented upon and assigned to people. Magic Forge uses the APIs of these forges to manage issue and pull requests, collectively referred to as topics. @ a to add a repository from the current project to a local database, to cache a list of topics (issues and pull requests) from a remote repository. Issues, pull requests and forks can be created on a remote repository, once the repository has been added to the local dictionary. @ opens the forge menu from the Magit Status buffer, , g s , and therefore requires a local Git repository.","title":"Magit Forge - issues, PRs and forking"},{"location":"source-control/magit/forge/#hintrequires-forge-configuration","text":"Create an encrypted .authinfo.gpg file for connection details of each forge used before using the Magit Forge commands.","title":"Hint::Requires Forge Configuration"},{"location":"source-control/magit/forge/add-database/","text":"Add remote repositories to Magit Forge \u03bb\ufe0e Magit Forge caches information about a remote repository in a local database as a cache of all issues and pull request information. Each repository that will be used for issues or pull requests should be added as a remote, then a Magit Forge database can be added for that repository. Update the database before creating new issues or pull requests to ensure Magit Forge has the right information. Otherwise using forge commands before adding the repository will cause an error Add a remote repository \u03bb\ufe0e SPC g s to enter Magit Status M to add or check the upstream repository is added as a remote repository Add a database for a repository \u03bb\ufe0e Add each repository to the forge database before running other forge commands. The @ c f create fork command will automatically add the new repository to the forge. a to add a remote repository to the forge database, defaulting to the URL of the current remote repository for the project. When prompted, select to download all the issue and pull request information. Changing remotes in Magit Forge \u03bb\ufe0e r switches between forks where multiple have been added to the forge database. Switch to the repository that you intend to work with. Fetching topics \u03bb\ufe0e @ f f will fetch issues and pull requests based on the forge-topic-list-limit . The list of issues and pull requests will show in the Magit Status buffer.","title":"Add remote repositories to Magit Forge"},{"location":"source-control/magit/forge/add-database/#add-remote-repositories-to-magit-forge","text":"Magit Forge caches information about a remote repository in a local database as a cache of all issues and pull request information. Each repository that will be used for issues or pull requests should be added as a remote, then a Magit Forge database can be added for that repository. Update the database before creating new issues or pull requests to ensure Magit Forge has the right information. Otherwise using forge commands before adding the repository will cause an error","title":"Add remote repositories to Magit Forge"},{"location":"source-control/magit/forge/add-database/#add-a-remote-repository","text":"SPC g s to enter Magit Status M to add or check the upstream repository is added as a remote repository","title":"Add a remote repository"},{"location":"source-control/magit/forge/add-database/#add-a-database-for-a-repository","text":"Add each repository to the forge database before running other forge commands. The @ c f create fork command will automatically add the new repository to the forge. a to add a remote repository to the forge database, defaulting to the URL of the current remote repository for the project. When prompted, select to download all the issue and pull request information.","title":"Add a database for a repository"},{"location":"source-control/magit/forge/add-database/#changing-remotes-in-magit-forge","text":"r switches between forks where multiple have been added to the forge database. Switch to the repository that you intend to work with.","title":"Changing remotes in Magit Forge"},{"location":"source-control/magit/forge/add-database/#fetching-topics","text":"@ f f will fetch issues and pull requests based on the forge-topic-list-limit . The list of issues and pull requests will show in the Magit Status buffer.","title":"Fetching topics"},{"location":"source-control/magit/forge/forks/","text":"Create a remote fork \u03bb\ufe0e Create or select a local Git repository and run magit status, , g s . c f to create a remote fork, prompt for the GitHub account or organisation to fork the repository too. Prompt for the name of the new remote repository Hint::Configure owned GitHub accounts and organisations \u03bb\ufe0e Add (setq forge-owned-accounts '((\"practicalli\" \"jr0cket\" ))) to the dotspacemacs/user-config section of .spacemacs to define GitHub accounts and organisations that can be forked to. Add (setq forge-owned-blacklist '((\"bad-hacks\" \"really-bad-hacks\"))) to define accounts and organisations not to include. This over-rides the forge-owned-accounts setting. practicalli/spacemacs.d repository contains these settings. GitHub user and organization accounts owned used by @ c f to create a fork To blacklist specific accounts, over-riding forge-owned-accounts","title":"Create a remote fork"},{"location":"source-control/magit/forge/forks/#create-a-remote-fork","text":"Create or select a local Git repository and run magit status, , g s . c f to create a remote fork, prompt for the GitHub account or organisation to fork the repository too. Prompt for the name of the new remote repository","title":"Create a remote fork"},{"location":"source-control/magit/forge/forks/#hintconfigure-owned-github-accounts-and-organisations","text":"Add (setq forge-owned-accounts '((\"practicalli\" \"jr0cket\" ))) to the dotspacemacs/user-config section of .spacemacs to define GitHub accounts and organisations that can be forked to. Add (setq forge-owned-blacklist '((\"bad-hacks\" \"really-bad-hacks\"))) to define accounts and organisations not to include. This over-rides the forge-owned-accounts setting. practicalli/spacemacs.d repository contains these settings. GitHub user and organization accounts owned used by @ c f to create a fork To blacklist specific accounts, over-riding forge-owned-accounts","title":"Hint::Configure owned GitHub accounts and organisations"},{"location":"source-control/magit/forge/issues/","text":"Forge Issue management \u03bb\ufe0e Issues can be viewed, created and updated, providing full synchronisation between Emacs and the remote GitHub / GitLab service. View issues list \u03bb\ufe0e @ l i opens a buffer with a list of issues with the most recent at the top. Issue labels also show in the list using the the color assigned on GitHub. In the issue list buffer: o opens the list in the default browser j to navigate down, k to navigate up the list q to quit and close the buffer Hint::Configure number of open and closed items shown \u03bb\ufe0e Add (setq forge-topic-list-limit '(100 . 0)) to the dotspacemacs/user-config section of .spacemacs to hide all closed issues and pull requests from the list, showing up to 100 open items from each. Or (setq forge-topic-list-limit '(100 . -10)) and use SPC SPC forge-toggle-closed-visibility to toggle showing 10 of the latest closed topics for issues and pull requests. practicalli/spacemacs.d configuration contains this setting. Create an issue \u03bb\ufe0e @ c i to create a new issue on the current repository. The issue is added to the Issues section of Magit status. RET on the issue opens the issue and shows the details. Related issues are shown as a link, RET on the link opens the related issue in the browser. , , to save and create the issue on the remote forge. , k to cancel. Hint::Markdown support \u03bb\ufe0e Pull Request descriptions will use markdown when displayed in GitHub. code for code / key highlighting, # for headings, ---- for horizontal lines Update an issue \u03bb\ufe0e @ l i to list the current issues ( @ f f to update the topics if the issue is not listed) In the issue list buffer, navigate ( j , k ) to the issue to be edited. RET to open the issue in its own buffer j / k to navigate to each section of the issue (title, assignee, label, mark, description, comments) ,e or C-c C-e to edit the current section of the issue. For title, assignee, label and mark a prompt shows in the mini-buffer. Enter a value and press RET For description and comments a separate buffer opens with editable text. , , or C-c C-c to save changes and push them to the remote repository. C-c C-k to cancel changes and return to the issue. As soon as a value or text is saved, a request is sent to the remote forge to update the issue. q to close the issue and issue list buffers. This approach works for other topics types also.","title":"Forge Issue management"},{"location":"source-control/magit/forge/issues/#forge-issue-management","text":"Issues can be viewed, created and updated, providing full synchronisation between Emacs and the remote GitHub / GitLab service.","title":"Forge Issue management"},{"location":"source-control/magit/forge/issues/#view-issues-list","text":"@ l i opens a buffer with a list of issues with the most recent at the top. Issue labels also show in the list using the the color assigned on GitHub. In the issue list buffer: o opens the list in the default browser j to navigate down, k to navigate up the list q to quit and close the buffer","title":"View issues list"},{"location":"source-control/magit/forge/issues/#hintconfigure-number-of-open-and-closed-items-shown","text":"Add (setq forge-topic-list-limit '(100 . 0)) to the dotspacemacs/user-config section of .spacemacs to hide all closed issues and pull requests from the list, showing up to 100 open items from each. Or (setq forge-topic-list-limit '(100 . -10)) and use SPC SPC forge-toggle-closed-visibility to toggle showing 10 of the latest closed topics for issues and pull requests. practicalli/spacemacs.d configuration contains this setting.","title":"Hint::Configure number of open and closed items shown"},{"location":"source-control/magit/forge/issues/#create-an-issue","text":"@ c i to create a new issue on the current repository. The issue is added to the Issues section of Magit status. RET on the issue opens the issue and shows the details. Related issues are shown as a link, RET on the link opens the related issue in the browser. , , to save and create the issue on the remote forge. , k to cancel.","title":"Create an issue"},{"location":"source-control/magit/forge/issues/#hintmarkdown-support","text":"Pull Request descriptions will use markdown when displayed in GitHub. code for code / key highlighting, # for headings, ---- for horizontal lines","title":"Hint::Markdown support"},{"location":"source-control/magit/forge/issues/#update-an-issue","text":"@ l i to list the current issues ( @ f f to update the topics if the issue is not listed) In the issue list buffer, navigate ( j , k ) to the issue to be edited. RET to open the issue in its own buffer j / k to navigate to each section of the issue (title, assignee, label, mark, description, comments) ,e or C-c C-e to edit the current section of the issue. For title, assignee, label and mark a prompt shows in the mini-buffer. Enter a value and press RET For description and comments a separate buffer opens with editable text. , , or C-c C-c to save changes and push them to the remote repository. C-c C-k to cancel changes and return to the issue. As soon as a value or text is saved, a request is sent to the remote forge to update the issue. q to close the issue and issue list buffers. This approach works for other topics types also.","title":"Update an issue"},{"location":"source-control/magit/forge/pull-requests/","text":"Forge Pull Requests \u03bb\ufe0e Create a pull request on GitHub or GitLab within the comfort of Spacemacs, using all the usual editor tools to write pull request descriptions. Magit Forge will use a Pull Request template if one is added to the repository. Create a pull request \u03bb\ufe0e Assumes you have a fork and original repository as remotes added to the local git repository. Create a branch on the fork with a descriptive name of the change you want to submit as a pull request. Commit changes to that new branch. P p to push the change to the remote repository for the fork. @ to open the forge menu from the Magit Status buffer. r to select the repository that the pull request will be created on (eg. the upstream repository, not the fork). c p to create a new pull request. For the source repository, select the branch of the local fork repository. For the target repository, select the upstream repository The description of the change is show and can be edited for the pull request description. , , to confirm the message and create the pull request on the upstream repository. , k to cancel the pull request. Create a draft pull request \u03bb\ufe0e A pull request can be marked as a draft when created by Magit Forge, to communicate that the PR is not ready for review or approval. With the pull request buffer opened, add yaml style front matter to the to define the PR as a draft. --- draft : true --- Example pull request \u03bb\ufe0e An example of using Emacs to create a pull request, with a pull request template from the repository. A template can be quickly edited using all the Emacs tools you are used to having.","title":"Forge Pull Requests"},{"location":"source-control/magit/forge/pull-requests/#forge-pull-requests","text":"Create a pull request on GitHub or GitLab within the comfort of Spacemacs, using all the usual editor tools to write pull request descriptions. Magit Forge will use a Pull Request template if one is added to the repository.","title":"Forge Pull Requests"},{"location":"source-control/magit/forge/pull-requests/#create-a-pull-request","text":"Assumes you have a fork and original repository as remotes added to the local git repository. Create a branch on the fork with a descriptive name of the change you want to submit as a pull request. Commit changes to that new branch. P p to push the change to the remote repository for the fork. @ to open the forge menu from the Magit Status buffer. r to select the repository that the pull request will be created on (eg. the upstream repository, not the fork). c p to create a new pull request. For the source repository, select the branch of the local fork repository. For the target repository, select the upstream repository The description of the change is show and can be edited for the pull request description. , , to confirm the message and create the pull request on the upstream repository. , k to cancel the pull request.","title":"Create a pull request"},{"location":"source-control/magit/forge/pull-requests/#create-a-draft-pull-request","text":"A pull request can be marked as a draft when created by Magit Forge, to communicate that the PR is not ready for review or approval. With the pull request buffer opened, add yaml style front matter to the to define the PR as a draft. --- draft : true ---","title":"Create a draft pull request"},{"location":"source-control/magit/forge/pull-requests/#example-pull-request","text":"An example of using Emacs to create a pull request, with a pull request template from the repository. A template can be quickly edited using all the Emacs tools you are used to having.","title":"Example pull request"},{"location":"source-control/magit/remote-repositories/","text":"Working with Remote Repositories \u03bb\ufe0e Magit provides tools for working with remote repositories add a remote repository to a local repository clone remote repositories checkout remote branches and track them , including the branch of a pull request pull commits push commits Magit Forge can also create and fork a remote repository , as well as manage issues and pull requests . Demo - Create a local Git Repository and add a GitHub remote \u03bb\ufe0e Adding a remote repository starts at 3 minutes and 50 seconds into this video. --> {% youtube %} https://www.youtube.com/embed/AdEOazt1rD0","title":"Working with Remote Repositories"},{"location":"source-control/magit/remote-repositories/#working-with-remote-repositories","text":"Magit provides tools for working with remote repositories add a remote repository to a local repository clone remote repositories checkout remote branches and track them , including the branch of a pull request pull commits push commits Magit Forge can also create and fork a remote repository , as well as manage issues and pull requests .","title":"Working with Remote Repositories"},{"location":"source-control/magit/remote-repositories/#demo-create-a-local-git-repository-and-add-a-github-remote","text":"Adding a remote repository starts at 3 minutes and 50 seconds into this video. --> {% youtube %} https://www.youtube.com/embed/AdEOazt1rD0","title":"Demo - Create a local Git Repository and add a GitHub remote"},{"location":"source-control/magit/remote-repositories/add-remote/","text":"Add remote repository to local repository \u03bb\ufe0e Open Magit status using SPC g s . M opens the Remotes menu, showing a popup list of actions a prompts for the remote name, e.g. origin or the name of the GitHub/GitLab account or organisation Followed by a prompt for the URL of the repository, e.g. a github / gitlab address. The final prompt asks to set this new remote as the default, saying yes adds this to the P push menu. Update remote \u03bb\ufe0e C to configure a remote, a prompt lists the existing remotes by their name C-j / C-k to navigate the list of remote names, RET to select the remote to configure The current configuration of the remote is displayed u to change the URL used for the remote (i.e. if the remote has been renamed or a different remote is required) U to change the branch and references to fetch (refspec) s to set the url used for fetching from the remote, bound to the S refspec used when pushing to the remote O set to --tags and all tags are fetched or --no-tags then no tags are fetched Magit Manual: Remote Git Variables","title":"Add remote repository to local repository"},{"location":"source-control/magit/remote-repositories/add-remote/#add-remote-repository-to-local-repository","text":"Open Magit status using SPC g s . M opens the Remotes menu, showing a popup list of actions a prompts for the remote name, e.g. origin or the name of the GitHub/GitLab account or organisation Followed by a prompt for the URL of the repository, e.g. a github / gitlab address. The final prompt asks to set this new remote as the default, saying yes adds this to the P push menu.","title":"Add remote repository to local repository"},{"location":"source-control/magit/remote-repositories/add-remote/#update-remote","text":"C to configure a remote, a prompt lists the existing remotes by their name C-j / C-k to navigate the list of remote names, RET to select the remote to configure The current configuration of the remote is displayed u to change the URL used for the remote (i.e. if the remote has been renamed or a different remote is required) U to change the branch and references to fetch (refspec) s to set the url used for fetching from the remote, bound to the S refspec used when pushing to the remote O set to --tags and all tags are fetched or --no-tags then no tags are fetched Magit Manual: Remote Git Variables","title":"Update remote"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/","text":"Magit checkout remote branches \u03bb\ufe0e Git works with local branches. Local branches can be pushed to a shared repository (GitHub, GitLab, Bitbucket, etc.). When checking out a remote branch, Magit will create a local tracking branch which is automatic checked out. Changes can then be committed to this local tracking branch. Push the local tracking branch to the remote repository to share the new commits. Checkout local tracking branch for a remote branch \u03bb\ufe0e SPC g s calls magit-status and opens the Magit Git Status buffer b opens the branch menu in the magit status buffer l creates a local tracking branch with the unqualified name of the remote branch e.g. if the remote branch is called practicalli/cli-alias-updates then the local tracking branch is called cli-alias-updates Magit Status buffer should now show the local branch, e.g. cli-alaiases-updates , as the Head reference. Using Magit command line \u03bb\ufe0e ! ! opens a Git command line in the Magit status buffer Run the Git checkout command using the --track option to create a local branch with the same name as the remote branch. git checkout --track practicalli/cli-alias-updates Magit Status buffer should now show the local branch as the Head reference.","title":"Magit checkout remote branches"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/#magit-checkout-remote-branches","text":"Git works with local branches. Local branches can be pushed to a shared repository (GitHub, GitLab, Bitbucket, etc.). When checking out a remote branch, Magit will create a local tracking branch which is automatic checked out. Changes can then be committed to this local tracking branch. Push the local tracking branch to the remote repository to share the new commits.","title":"Magit checkout remote branches"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/#checkout-local-tracking-branch-for-a-remote-branch","text":"SPC g s calls magit-status and opens the Magit Git Status buffer b opens the branch menu in the magit status buffer l creates a local tracking branch with the unqualified name of the remote branch e.g. if the remote branch is called practicalli/cli-alias-updates then the local tracking branch is called cli-alias-updates Magit Status buffer should now show the local branch, e.g. cli-alaiases-updates , as the Head reference.","title":"Checkout local tracking branch for a remote branch"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/#using-magit-command-line","text":"! ! opens a Git command line in the Magit status buffer Run the Git checkout command using the --track option to create a local branch with the same name as the remote branch. git checkout --track practicalli/cli-alias-updates Magit Status buffer should now show the local branch as the Head reference.","title":"Using Magit command line"},{"location":"source-control/magit/remote-repositories/clone/","text":"Clone remote repositories \u03bb\ufe0e Magit can clone repositories from GitHub and GitLab. SPC g c ( magit-clone ) to clone a remote repository, specifying how the remote repository will be referenced u to use the full URL, git@github.com:practicalli/spacemacs.git or the simpler name practicalli/spacemacs A prompt is displays to define the path where the remote repository should be cloned too. C-left-arrow and C-right-arrow to navigate the path without changing it. RET to confirm the path. If the remote repository is not from your own GitHub account or an Organisation you are part of, a prompt asks if you wish to create a fork of the project. y will create a fork in your GitHub/GitLab account Forks can only be created on a user account, there is no option to select an organisation in which to create a fork The remote repository is cloned to the specified location. y at the final prompt will set the remote repository as the default push destination (shown when using P from Magit Status). Hint::Create and Fork repositories \u03bb\ufe0e Magit forge can be used to create and fork repositories on GitHub and GitLab Update the remote name \u03bb\ufe0e The remote is added with the name origin , which is not particularly descriptive (and in a distributed world, not necessarily accurate) Changing the remote to use a specific name, i.e. the account or org from which it was cloned, makes it easier to know where changes are located. M in Magit Status shows the details of the remote repositories. r to rename a selected remote, showing a list of available remotes. C-j and C-k to navigate the list of remotes Opening files \u03bb\ufe0e Whilst still in Magit Status buffer, Spacemacs knows you are in the project that has been cloned. SPC p f will list all the files from the cloned repository, simplifying the navigation to the project. If a file is not opened from the project, q to leave the Magit Status buffer will return to a buffer that is not in the current project, so use SPC f f and navigate to the location of the cloned repository. Pushing / Pulling changes \u03bb\ufe0e P p pushes local commits and is set to the fork if you created one after the clone, otherwise its the cloned repository F u pulls remote commits from the cloned repository (upstream) See Pull Changes and Push Changes for more details.","title":"Clone remote repositories"},{"location":"source-control/magit/remote-repositories/clone/#clone-remote-repositories","text":"Magit can clone repositories from GitHub and GitLab. SPC g c ( magit-clone ) to clone a remote repository, specifying how the remote repository will be referenced u to use the full URL, git@github.com:practicalli/spacemacs.git or the simpler name practicalli/spacemacs A prompt is displays to define the path where the remote repository should be cloned too. C-left-arrow and C-right-arrow to navigate the path without changing it. RET to confirm the path. If the remote repository is not from your own GitHub account or an Organisation you are part of, a prompt asks if you wish to create a fork of the project. y will create a fork in your GitHub/GitLab account Forks can only be created on a user account, there is no option to select an organisation in which to create a fork The remote repository is cloned to the specified location. y at the final prompt will set the remote repository as the default push destination (shown when using P from Magit Status).","title":"Clone remote repositories"},{"location":"source-control/magit/remote-repositories/clone/#hintcreate-and-fork-repositories","text":"Magit forge can be used to create and fork repositories on GitHub and GitLab","title":"Hint::Create and Fork repositories"},{"location":"source-control/magit/remote-repositories/clone/#update-the-remote-name","text":"The remote is added with the name origin , which is not particularly descriptive (and in a distributed world, not necessarily accurate) Changing the remote to use a specific name, i.e. the account or org from which it was cloned, makes it easier to know where changes are located. M in Magit Status shows the details of the remote repositories. r to rename a selected remote, showing a list of available remotes. C-j and C-k to navigate the list of remotes","title":"Update the remote name"},{"location":"source-control/magit/remote-repositories/clone/#opening-files","text":"Whilst still in Magit Status buffer, Spacemacs knows you are in the project that has been cloned. SPC p f will list all the files from the cloned repository, simplifying the navigation to the project. If a file is not opened from the project, q to leave the Magit Status buffer will return to a buffer that is not in the current project, so use SPC f f and navigate to the location of the cloned repository.","title":"Opening files"},{"location":"source-control/magit/remote-repositories/clone/#pushing-pulling-changes","text":"P p pushes local commits and is set to the fork if you created one after the clone, otherwise its the cloned repository F u pulls remote commits from the cloned repository (upstream) See Pull Changes and Push Changes for more details.","title":"Pushing / Pulling changes"},{"location":"source-control/magit/remote-repositories/configure-default-push/","text":"Configure default push remote branch \u03bb\ufe0e The first time you pull changes from a repository, or clone via Magit, a prompt in the mini-buffer asks if the current remote branch should be used as the default remote repository to push to. P p will push changes to the default push remote repository. A list of remotes is shown if no default remote is set. Changing the default remote \u03bb\ufe0e The default push remote can be selected from remote repositories added as a remote, by cloning or using the M remote menu in the Magit Status buffer. P to open the push menu C to open the configuration of the local repository P to toggle the default upstream branch between remotes u to add a new upstream branch as the default, showing a list of all possible remote branches. RTN to choose a branch G-g to close the configuration menu. Then either u to pull from the new default upstream branch, or C-g to exit the pull menu.","title":"Configure default push remote branch"},{"location":"source-control/magit/remote-repositories/configure-default-push/#configure-default-push-remote-branch","text":"The first time you pull changes from a repository, or clone via Magit, a prompt in the mini-buffer asks if the current remote branch should be used as the default remote repository to push to. P p will push changes to the default push remote repository. A list of remotes is shown if no default remote is set.","title":"Configure default push remote branch"},{"location":"source-control/magit/remote-repositories/configure-default-push/#changing-the-default-remote","text":"The default push remote can be selected from remote repositories added as a remote, by cloning or using the M remote menu in the Magit Status buffer. P to open the push menu C to open the configuration of the local repository P to toggle the default upstream branch between remotes u to add a new upstream branch as the default, showing a list of all possible remote branches. RTN to choose a branch G-g to close the configuration menu. Then either u to pull from the new default upstream branch, or C-g to exit the pull menu.","title":"Changing the default remote"},{"location":"source-control/magit/remote-repositories/configure-default-upstream/","text":"Configure default upstream remote branch \u03bb\ufe0e The first time you pull changes from a repository (or if cloning via Magit), the default upstream remote and branch is set. F u will pull all the changes from the default upstream remote branch. Changing the default remote \u03bb\ufe0e To change the default upstream, first unset the default value and then add a new default. F to open the pull menu C to open the configuration of the local repository u to unset the default upstream branch (removed the description too) u to add a new upstream branch as the default, showing a list of all possible remote branches. RTN to choose a branch G-g to close the configuration menu. Then either u to pull from the new default upstream branch, or C-g to exit the pull menu.","title":"Configure default upstream remote branch"},{"location":"source-control/magit/remote-repositories/configure-default-upstream/#configure-default-upstream-remote-branch","text":"The first time you pull changes from a repository (or if cloning via Magit), the default upstream remote and branch is set. F u will pull all the changes from the default upstream remote branch.","title":"Configure default upstream remote branch"},{"location":"source-control/magit/remote-repositories/configure-default-upstream/#changing-the-default-remote","text":"To change the default upstream, first unset the default value and then add a new default. F to open the pull menu C to open the configuration of the local repository u to unset the default upstream branch (removed the description too) u to add a new upstream branch as the default, showing a list of all possible remote branches. RTN to choose a branch G-g to close the configuration menu. Then either u to pull from the new default upstream branch, or C-g to exit the pull menu.","title":"Changing the default remote"},{"location":"source-control/magit/remote-repositories/pull-changes/","text":"Pull Changes \u03bb\ufe0e Commits can be pulled or fetched from remote repositories. SPC g s to open Magit Status buffer F to open the pull menu u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream. Use e to pull from a different repository. Hint::Ensure you are on the correct local branch \u03bb\ufe0e The current local branch is shown at the top of the Magit Status buffer. b b displays a popup to select a different branch if you are not on the correct branch to pull changes into. Rebase when pull \u03bb\ufe0e SPC g s to open Magit Status buffer F to open the pull menu r rebase changes that are not on the remote repository. u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream. Rebase local commits \u03bb\ufe0e SPC g s to open Magit Status buffer F to open the pull menu -r rebase local changes that are not on the remote repository. u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream. If there are conflicts between the commits on the remote and local repositories then use the ediff tool or edit the files and delete the conflict markers and resolve conflicting text change. Save the change and r to resume the rebase.","title":"Pull Changes"},{"location":"source-control/magit/remote-repositories/pull-changes/#pull-changes","text":"Commits can be pulled or fetched from remote repositories. SPC g s to open Magit Status buffer F to open the pull menu u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream. Use e to pull from a different repository.","title":"Pull Changes"},{"location":"source-control/magit/remote-repositories/pull-changes/#hintensure-you-are-on-the-correct-local-branch","text":"The current local branch is shown at the top of the Magit Status buffer. b b displays a popup to select a different branch if you are not on the correct branch to pull changes into.","title":"Hint::Ensure you are on the correct local branch"},{"location":"source-control/magit/remote-repositories/pull-changes/#rebase-when-pull","text":"SPC g s to open Magit Status buffer F to open the pull menu r rebase changes that are not on the remote repository. u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream.","title":"Rebase when pull"},{"location":"source-control/magit/remote-repositories/pull-changes/#rebase-local-commits","text":"SPC g s to open Magit Status buffer F to open the pull menu -r rebase local changes that are not on the remote repository. u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream. If there are conflicts between the commits on the remote and local repositories then use the ediff tool or edit the files and delete the conflict markers and resolve conflicting text change. Save the change and r to resume the rebase.","title":"Rebase local commits"},{"location":"source-control/magit/remote-repositories/push-changes/","text":"Push Changes \u03bb\ufe0e Commits can be pushed to a remote repository using Magit Status buffer. Hint::Ensure you are on the correct local branch \u03bb\ufe0e The current local branch is shown at the top of the Magit Status buffer. b b displays a popup to select a different branch if you are not on the correct branch to pull changes into. SPC g s to open Magit Status buffer P to open the pull menu u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream. Push options \u03bb\ufe0e Changing the local history with a commit amend, extend, reword, rebase or squash will prevent changes being pushed to a remote repository that has the original history unchanged. Magit will show Unpulled from and Unpushed to sections when the local and remote histories are different. The push menu has the -f switch to force a push with a lease (the recommended force type). Hint::Fix rather than Force \u03bb\ufe0e Pushing a new commit that fixes an issue is usually preferable than re-writing history and forcing a push when working on a shared repository. Communicate clearly in advance and get agreement from other contributors if a force is the only option. Pushing changes to an open pull request \u03bb\ufe0e {% youtube %} https://youtu.be/gwFGSVtFrgQ","title":"Push Changes"},{"location":"source-control/magit/remote-repositories/push-changes/#push-changes","text":"Commits can be pushed to a remote repository using Magit Status buffer.","title":"Push Changes"},{"location":"source-control/magit/remote-repositories/push-changes/#hintensure-you-are-on-the-correct-local-branch","text":"The current local branch is shown at the top of the Magit Status buffer. b b displays a popup to select a different branch if you are not on the correct branch to pull changes into. SPC g s to open Magit Status buffer P to open the pull menu u to pull from the upstream remote repository. If this is not currently set, then a prompt appears to select the default upstream.","title":"Hint::Ensure you are on the correct local branch"},{"location":"source-control/magit/remote-repositories/push-changes/#push-options","text":"Changing the local history with a commit amend, extend, reword, rebase or squash will prevent changes being pushed to a remote repository that has the original history unchanged. Magit will show Unpulled from and Unpushed to sections when the local and remote histories are different. The push menu has the -f switch to force a push with a lease (the recommended force type).","title":"Push options"},{"location":"source-control/magit/remote-repositories/push-changes/#hintfix-rather-than-force","text":"Pushing a new commit that fixes an issue is usually preferable than re-writing history and forcing a push when working on a shared repository. Communicate clearly in advance and get agreement from other contributors if a force is the only option.","title":"Hint::Fix rather than Force"},{"location":"source-control/magit/remote-repositories/push-changes/#pushing-changes-to-an-open-pull-request","text":"{% youtube %} https://youtu.be/gwFGSVtFrgQ","title":"Pushing changes to an open pull request"},{"location":"source-control/magit/remote-repositories/try-pull-requests/","text":"Try Pull Requests with Magit \u03bb\ufe0e Magit provides an easy way to try out pull requests from remote repositories, e.g. Github, Gitlab. SPC g s to open Magit in the git project the current file belongs to. A popup displays selector displays if the current buffer is not part of a Git project. b y in Magit will popup the current list of pull request from the git project. Selecting a pull request will open git a local branch for that pull request. You can now test all the changes you wish. Once you are done, you can go back to magit with SPC g s and change back to your previous local branch with b b . So Magit provides a quick and simple way to collaborate with other developers. Checking out a Pull Request from the Spacemacs project \u03bb\ufe0e Here is a simple example of using Magit to try out a pull request from the Spacemacs project from within Spacemacs itself. {% youtube %} https://youtu.be/t8tEzJ1RnW0","title":"Try Pull Requests with Magit"},{"location":"source-control/magit/remote-repositories/try-pull-requests/#try-pull-requests-with-magit","text":"Magit provides an easy way to try out pull requests from remote repositories, e.g. Github, Gitlab. SPC g s to open Magit in the git project the current file belongs to. A popup displays selector displays if the current buffer is not part of a Git project. b y in Magit will popup the current list of pull request from the git project. Selecting a pull request will open git a local branch for that pull request. You can now test all the changes you wish. Once you are done, you can go back to magit with SPC g s and change back to your previous local branch with b b . So Magit provides a quick and simple way to collaborate with other developers.","title":"Try Pull Requests with Magit"},{"location":"source-control/magit/remote-repositories/try-pull-requests/#checking-out-a-pull-request-from-the-spacemacs-project","text":"Here is a simple example of using Magit to try out a pull request from the Spacemacs project from within Spacemacs itself. {% youtube %} https://youtu.be/t8tEzJ1RnW0","title":"Checking out a Pull Request from the Spacemacs project"},{"location":"spacemacs-basics/","text":"Spacemacs Basics \u03bb\ufe0e Space opens the Which-key menu providing access to all Spacemacs commands via a mnemonic menu system , a context specific menu for the current major mode, i.e. With a Clojure file in the current buffer a Clojure specific menu is displayed Key combination guide Space means press the space bar and release A character by itself means press that key by itself, eg. h means press the h key Meta + m M-m means to hold the Meta key down and press the m key The Meta key is typically Alt on Linux/PC, Opt on MacOSX Holy mode (Emacs) Essential Key bindings Meta m in Holy mode is the equivalent of Space in Evil (Vim) style editing Meta Enter opens the major mode menu (e.g. Clojure specific menu in clojure-mode), the equivalent of , in Evil. Evil for Multi-modal editing \u03bb\ufe0e Gradually discover the power and pleasure of using Vim and modal editing , using different editing states for specific tasks and reducing your cognitive load and strain from key combinations. The Vim Quick Reference will help you use Spacemacs more effectively. Migrating from Vim article to help those with Vim experience to get up to speed with Spacemacs. Space key \u03bb\ufe0e All of the commands in Spacemacs are available through the Space bar menu. Space displays a mnemonic menu ( which-key ) to easily navigate through the multitude of functions you can call. Space Space displays a popup listing all Spacemacs commands, typing will start narrowing the list of commands using fuzzy logic, helping you find the right command quickly. This is equivalent to Meta x in Emacs. Spacemacs Help system \u03bb\ufe0e Space h is the help menu to access all Spacemacs documenting and any information about Emacs itself, an important menu to support learning Spacemacs Spacemacs has a built in help system to help you find out what layers, commands and keybindings do. Every function has a description of how to use it as well as a link to its source code (in case you need more than the description). Many functions have a keybinding (keyboard short-cut) and you can also get a description of the keybinding. Keybinding Action Space h Space Spacemacs documentation and layer guides Space h d f functions and description of selected function Space h d k keybindings and description of selected keybinding Online help \u03bb\ufe0e Spacemacs online documentation Spacemacs key bindings Spacemacs Quick Start guide Spacemacs Layers Practicalli Spacemacs YouTube playlist Spacemacs ABC video walk-through of features (a little dated but still mostly relevant).","title":"Spacemacs Basics"},{"location":"spacemacs-basics/#spacemacs-basics","text":"Space opens the Which-key menu providing access to all Spacemacs commands via a mnemonic menu system , a context specific menu for the current major mode, i.e. With a Clojure file in the current buffer a Clojure specific menu is displayed Key combination guide Space means press the space bar and release A character by itself means press that key by itself, eg. h means press the h key Meta + m M-m means to hold the Meta key down and press the m key The Meta key is typically Alt on Linux/PC, Opt on MacOSX Holy mode (Emacs) Essential Key bindings Meta m in Holy mode is the equivalent of Space in Evil (Vim) style editing Meta Enter opens the major mode menu (e.g. Clojure specific menu in clojure-mode), the equivalent of , in Evil.","title":"Spacemacs Basics"},{"location":"spacemacs-basics/#evil-for-multi-modal-editing","text":"Gradually discover the power and pleasure of using Vim and modal editing , using different editing states for specific tasks and reducing your cognitive load and strain from key combinations. The Vim Quick Reference will help you use Spacemacs more effectively. Migrating from Vim article to help those with Vim experience to get up to speed with Spacemacs.","title":"Evil for Multi-modal editing"},{"location":"spacemacs-basics/#space-key","text":"All of the commands in Spacemacs are available through the Space bar menu. Space displays a mnemonic menu ( which-key ) to easily navigate through the multitude of functions you can call. Space Space displays a popup listing all Spacemacs commands, typing will start narrowing the list of commands using fuzzy logic, helping you find the right command quickly. This is equivalent to Meta x in Emacs.","title":"Space key"},{"location":"spacemacs-basics/#spacemacs-help-system","text":"Space h is the help menu to access all Spacemacs documenting and any information about Emacs itself, an important menu to support learning Spacemacs Spacemacs has a built in help system to help you find out what layers, commands and keybindings do. Every function has a description of how to use it as well as a link to its source code (in case you need more than the description). Many functions have a keybinding (keyboard short-cut) and you can also get a description of the keybinding. Keybinding Action Space h Space Spacemacs documentation and layer guides Space h d f functions and description of selected function Space h d k keybindings and description of selected keybinding","title":"Spacemacs Help system"},{"location":"spacemacs-basics/#online-help","text":"Spacemacs online documentation Spacemacs key bindings Spacemacs Quick Start guide Spacemacs Layers Practicalli Spacemacs YouTube playlist Spacemacs ABC video walk-through of features (a little dated but still mostly relevant).","title":"Online help"},{"location":"spacemacs-basics/emacs-basics/","text":"Emacs Basics \u03bb\ufe0e Understanding the basic terminology will help make the most out of Spacemacs and allow very effective use. Terminology Description File A file on the file system Buffer A container to display a file or other information (file navigation, REPL, data inspector, test report, etc.) Window Contains a buffer, organises multiple buffers in a frame Frame Holds one or more windows. Opening another frame gives you another instance of Emacs Status bar Information about current window and buffer, e.g. window number, buffer mode & name, location of cursor. Also referred to as the mode line. Mini-buffer A command line for Emacs - shows commands and some results, acts as an interactive prompt for some commands Spacemacs also adds Layouts to manage a set of buffers within the scope of a project and Workspaces allow multiple window configurations Working with Frames \u03bb\ufe0e By default, Spacemacs opens with a frame that contains a single window, that window containing the Spacemacs home buffer. Space F n creates a new frame containing a single window that contains a buffer. Space F d closes the current frame, unless its the last Emacs frame running, then Emacs itself closes. Space q q to quit Emacs closes all frames. Working with windows \u03bb\ufe0e Each frame contains one or more windows. Each window is assigned a unique number when created, even across multiple frames. Space followed by a number jumps to the window with that number, e.g. Space 1 jumps to window number 1. Windows are used to display multiple buffers (files, REPL, error messages, etc) within the same frame Key Binding Description Space w . Open Window transient state menu for multiple command Space w 2 2 window layout - shows current buffer in new window Space w 3 3 window layout - shows current buffer in new windows Space w m maximise the current buffer Space w d delete current window Space w g toggles golden ratio view of windows Working with windows \u03bb\ufe0e A buffer is the fundamental presentation of information in Emacs. Buffers can show the contents of a file, search results in a helm-popup, an interactive process e.g. REPL buffer, etc. Space Tab toggles between the current buffer and the last active buffer Key Binding Description Space b . Open buffer transient state menu for multiple command Space b b Show list of open buffers and recently opened buffers Space b d Kill current buffer Space b h Open Spacemacs Home buffer Space b m Open Spacemacs *messages* buffer - log of Emacs actions and commands Space b s Open Spacemacs scratch buffer - a persistent buffer for random note taking Space b w Toggle read-only mode on a buffer (Spacemacs Org docs open in Read-only mode by default) Space b x Kill buffer and the window containing it Space b R Revert buffer to file saved on disk (causes .dir-locals.el to load into Emacs) Space b Y Copy contents of a whole buffer Golden Ratio \u03bb\ufe0e Golden-ratio automatically lays out windows in a Fibonacci style pattern. The active window becomes the largest window and all other windows are automatically shrunk so they are out of the way, but still visible.","title":"Emacs Basics"},{"location":"spacemacs-basics/emacs-basics/#emacs-basics","text":"Understanding the basic terminology will help make the most out of Spacemacs and allow very effective use. Terminology Description File A file on the file system Buffer A container to display a file or other information (file navigation, REPL, data inspector, test report, etc.) Window Contains a buffer, organises multiple buffers in a frame Frame Holds one or more windows. Opening another frame gives you another instance of Emacs Status bar Information about current window and buffer, e.g. window number, buffer mode & name, location of cursor. Also referred to as the mode line. Mini-buffer A command line for Emacs - shows commands and some results, acts as an interactive prompt for some commands Spacemacs also adds Layouts to manage a set of buffers within the scope of a project and Workspaces allow multiple window configurations","title":"Emacs Basics"},{"location":"spacemacs-basics/emacs-basics/#working-with-frames","text":"By default, Spacemacs opens with a frame that contains a single window, that window containing the Spacemacs home buffer. Space F n creates a new frame containing a single window that contains a buffer. Space F d closes the current frame, unless its the last Emacs frame running, then Emacs itself closes. Space q q to quit Emacs closes all frames.","title":"Working with Frames"},{"location":"spacemacs-basics/emacs-basics/#working-with-windows","text":"Each frame contains one or more windows. Each window is assigned a unique number when created, even across multiple frames. Space followed by a number jumps to the window with that number, e.g. Space 1 jumps to window number 1. Windows are used to display multiple buffers (files, REPL, error messages, etc) within the same frame Key Binding Description Space w . Open Window transient state menu for multiple command Space w 2 2 window layout - shows current buffer in new window Space w 3 3 window layout - shows current buffer in new windows Space w m maximise the current buffer Space w d delete current window Space w g toggles golden ratio view of windows","title":"Working with windows"},{"location":"spacemacs-basics/emacs-basics/#working-with-windows_1","text":"A buffer is the fundamental presentation of information in Emacs. Buffers can show the contents of a file, search results in a helm-popup, an interactive process e.g. REPL buffer, etc. Space Tab toggles between the current buffer and the last active buffer Key Binding Description Space b . Open buffer transient state menu for multiple command Space b b Show list of open buffers and recently opened buffers Space b d Kill current buffer Space b h Open Spacemacs Home buffer Space b m Open Spacemacs *messages* buffer - log of Emacs actions and commands Space b s Open Spacemacs scratch buffer - a persistent buffer for random note taking Space b w Toggle read-only mode on a buffer (Spacemacs Org docs open in Read-only mode by default) Space b x Kill buffer and the window containing it Space b R Revert buffer to file saved on disk (causes .dir-locals.el to load into Emacs) Space b Y Copy contents of a whole buffer","title":"Working with windows"},{"location":"spacemacs-basics/emacs-basics/#golden-ratio","text":"Golden-ratio automatically lays out windows in a Fibonacci style pattern. The active window becomes the largest window and all other windows are automatically shrunk so they are out of the way, but still visible.","title":"Golden Ratio"},{"location":"spacemacs-basics/evil-g-menu/","text":"Evil G menu \u03bb\ufe0e g in normal mode opens a menu of convenient utilities. Practicalli uses this menu to comment existing lines, edit with multiple cursors, jumping to top or bottom of the buffer and joining lines together. Comment lines and regions \u03bb\ufe0e g c c will comment the current line using the buffer major mode comment character(s). A prompt will ask if no comment character is set for the major mode. g c with a selected region will comment all lines with the major mode comment character(s) Multiple cursors \u03bb\ufe0e g r is the menu for multiple cursors , allowing simultaneous editing at multiple points 12 gr j will add a cursor to the 12 lines below the current cursor, using the same position in the line. Any edits are applied to all cursors. g r q will quit multiple cursors, returning to just one cursor. Jumping around \u03bb\ufe0e g g jumps to the top of the buffer, g G to the bottom of the buffer g d to jump to the source code of a function definition, g D to open that in a different window. Moving text around \u03bb\ufe0e g J joins the next line to the current line. Workspaces \u03bb\ufe0e g t to switch to next workspace , g T to switch to previous. Changing text case \u03bb\ufe0e g u to change the current character or selection to lowercase, g U for uppercase. Hint::Toggle case with ~ \u03bb\ufe0e ~ will toggle the case of the current character or selected region.","title":"Evil G menu"},{"location":"spacemacs-basics/evil-g-menu/#evil-g-menu","text":"g in normal mode opens a menu of convenient utilities. Practicalli uses this menu to comment existing lines, edit with multiple cursors, jumping to top or bottom of the buffer and joining lines together.","title":"Evil G menu"},{"location":"spacemacs-basics/evil-g-menu/#comment-lines-and-regions","text":"g c c will comment the current line using the buffer major mode comment character(s). A prompt will ask if no comment character is set for the major mode. g c with a selected region will comment all lines with the major mode comment character(s)","title":"Comment lines and regions"},{"location":"spacemacs-basics/evil-g-menu/#multiple-cursors","text":"g r is the menu for multiple cursors , allowing simultaneous editing at multiple points 12 gr j will add a cursor to the 12 lines below the current cursor, using the same position in the line. Any edits are applied to all cursors. g r q will quit multiple cursors, returning to just one cursor.","title":"Multiple cursors"},{"location":"spacemacs-basics/evil-g-menu/#jumping-around","text":"g g jumps to the top of the buffer, g G to the bottom of the buffer g d to jump to the source code of a function definition, g D to open that in a different window.","title":"Jumping around"},{"location":"spacemacs-basics/evil-g-menu/#moving-text-around","text":"g J joins the next line to the current line.","title":"Moving text around"},{"location":"spacemacs-basics/evil-g-menu/#workspaces","text":"g t to switch to next workspace , g T to switch to previous.","title":"Workspaces"},{"location":"spacemacs-basics/evil-g-menu/#changing-text-case","text":"g u to change the current character or selection to lowercase, g U for uppercase.","title":"Changing text case"},{"location":"spacemacs-basics/evil-g-menu/#hinttoggle-case-with","text":"~ will toggle the case of the current character or selected region.","title":"Hint::Toggle case with ~"},{"location":"spacemacs-basics/evil-z-menu/","text":"Evil Z menu \u03bb\ufe0e z in normal mode opens a menu of convenient utilities Folding code, comments and other content \u03bb\ufe0e Code folding is very useful for hiding different levels of detail, for example you could hide everything but the function names in a namespace, showing just the API for that namespace. Comments and documentation can be folded to help you focus on a specific part of the content. Keybinding Description z a toggle fold of code, comment, section, etc. z c close fold z o open fold z O open fold recursive (capital o) z r open folds See narrowing for a focused approach to editing. Scrolling \u03bb\ufe0e Jump the current line to the center, top or bottom of the buffer. Evil equivalents of the Emacs C-l key bindings. Keybinding Description z b scroll the current line to bottom of buffer z t scroll the current line to top of buffer z z scroll the current line to center of buffer z ^ scroll top line to bottom z + scroll bottom line to top","title":"Evil Z menu"},{"location":"spacemacs-basics/evil-z-menu/#evil-z-menu","text":"z in normal mode opens a menu of convenient utilities","title":"Evil Z menu"},{"location":"spacemacs-basics/evil-z-menu/#folding-code-comments-and-other-content","text":"Code folding is very useful for hiding different levels of detail, for example you could hide everything but the function names in a namespace, showing just the API for that namespace. Comments and documentation can be folded to help you focus on a specific part of the content. Keybinding Description z a toggle fold of code, comment, section, etc. z c close fold z o open fold z O open fold recursive (capital o) z r open folds See narrowing for a focused approach to editing.","title":"Folding code, comments and other content"},{"location":"spacemacs-basics/evil-z-menu/#scrolling","text":"Jump the current line to the center, top or bottom of the buffer. Evil equivalents of the Emacs C-l key bindings. Keybinding Description z b scroll the current line to bottom of buffer z t scroll the current line to top of buffer z z scroll the current line to center of buffer z ^ scroll top line to bottom z + scroll bottom line to top","title":"Scrolling"},{"location":"spacemacs-basics/spell-checking/","text":"Spell checking in Spacemacs \u03bb\ufe0e The spell-checking layer provides 'on-the-fly' spell checking, highlighting incorrect spelling of words as you type. SPC S is the spell check menu. Spell check the current word \u03bb\ufe0e SPC S s RET is a quick way to fix the spelling of the current word as most of the time the correct spelling is at the top of the list. SPC S s checks the current word under the cursor. A list of possible spellings displays in a popup. Use C-j / C-k to navigate the spellings and RET to select the spelling to use. Requirements \u03bb\ufe0e Add the spell-checking layer to the layer list in ~/.spacemacs . The spell-checking layer uses the flyspell tool in Emacs and an external binary Install an external spell checking binaries that is supported by flyspell: ispell, hunspell, aspell. On Unix systems this binary is probably installed already.","title":"Spell checking in Spacemacs"},{"location":"spacemacs-basics/spell-checking/#spell-checking-in-spacemacs","text":"The spell-checking layer provides 'on-the-fly' spell checking, highlighting incorrect spelling of words as you type. SPC S is the spell check menu.","title":"Spell checking in Spacemacs"},{"location":"spacemacs-basics/spell-checking/#spell-check-the-current-word","text":"SPC S s RET is a quick way to fix the spelling of the current word as most of the time the correct spelling is at the top of the list. SPC S s checks the current word under the cursor. A list of possible spellings displays in a popup. Use C-j / C-k to navigate the spellings and RET to select the spelling to use.","title":"Spell check the current word"},{"location":"spacemacs-basics/spell-checking/#requirements","text":"Add the spell-checking layer to the layer list in ~/.spacemacs . The spell-checking layer uses the flyspell tool in Emacs and an external binary Install an external spell checking binaries that is supported by flyspell: ispell, hunspell, aspell. On Unix systems this binary is probably installed already.","title":"Requirements"},{"location":"spacemacs-basics/visual-select/","text":"Visual Select \u03bb\ufe0e Select characters, words, lines and regions with visual select. The background changes color to visually indicate which text is selected v enters visual select mode and can be with objects such as word w and locations such as end of line $ . SPC v to select a word, v to widen the selection, V to narrow, r to reset (cancel) the selection. o to expand from left side of selection and O to expand from the right side of a selection, using the hjkl navigation keys Visual Line selection \u03bb\ufe0e V to select by lines, using j and k . Visual Region selection \u03bb\ufe0e C-v to select a region using the hjkl navigation keys. iedit \u03bb\ufe0e e in visual select state starts iedit mode, highlighting all occurrences of the selection. Any change to the highlighted text is concurrently applied to all occurrences. ESC or fd to end the iedit session.","title":"Visual Select"},{"location":"spacemacs-basics/visual-select/#visual-select","text":"Select characters, words, lines and regions with visual select. The background changes color to visually indicate which text is selected v enters visual select mode and can be with objects such as word w and locations such as end of line $ . SPC v to select a word, v to widen the selection, V to narrow, r to reset (cancel) the selection. o to expand from left side of selection and O to expand from the right side of a selection, using the hjkl navigation keys","title":"Visual Select"},{"location":"spacemacs-basics/visual-select/#visual-line-selection","text":"V to select by lines, using j and k .","title":"Visual Line selection"},{"location":"spacemacs-basics/visual-select/#visual-region-selection","text":"C-v to select a region using the hjkl navigation keys.","title":"Visual Region selection"},{"location":"spacemacs-basics/visual-select/#iedit","text":"e in visual select state starts iedit mode, highlighting all occurrences of the selection. Any change to the highlighted text is concurrently applied to all occurrences. ESC or fd to end the iedit session.","title":"iedit"},{"location":"spacemacs-basics/evil/","text":"Evil for Vim Style Editing \u03bb\ufe0e Evil (extensible vi layer for Emacs) provides multiple editing states, multi-modal editing , simplifying keybindings by reducing the need for simultaneous key presses. Spacemacs provides Evil editing states and simplified keybindings throughout all layers and major modes. normal - for manipulating and navigating existing text (default state) insert - for writing new text visual - for selecting blocks of text iedit - edit multiple regions simultaneously lisp - structural editing for Clojure & Lisp style languages (e.g. slurp, barf) First get familiar with normal , insert and visual states. Then when you are comfortable, move on to iedit and lisp states. Hint::Normal state by default \u03bb\ufe0e Evil normal state should be used most of the time, unless you are writing code or creating lots of text. Learn Vim-style editing \u03bb\ufe0e Vim-style editing is arguably the most effective way to work with text, supporting changes as much through text manipulation as editing text. Once practised, vim-style editing is far faster than uni-mode editing. The recommended way to learn vim style editing is to practice and ideally use it for everything you do. SPC h T v starts the build in Vim tutorial. This provides the basic movement of vim and provides an interactive way to practice your skills To help make Vim style editing become a sub-conscious act you should learn to speak Evil Vim Adventures is a web-based game that is an alternative to practising Vim. Learning resource for Evil \u03bb\ufe0e Spacemacs: Migrating from Vim Spacemacs Vim Cheatsheet Graphical Cheatsheet Tutorial Vim quick reference guide Vim Casts Editing as a power user - Vim to Spacemacs Vim versus Spacemacs A focused on learning Vim and understanding why its so powerful. Transcript and exercises are also available. {% youtube %} https://youtu.be/a6Q8Na575qc","title":"Evil for Vim Style Editing"},{"location":"spacemacs-basics/evil/#evil-for-vim-style-editing","text":"Evil (extensible vi layer for Emacs) provides multiple editing states, multi-modal editing , simplifying keybindings by reducing the need for simultaneous key presses. Spacemacs provides Evil editing states and simplified keybindings throughout all layers and major modes. normal - for manipulating and navigating existing text (default state) insert - for writing new text visual - for selecting blocks of text iedit - edit multiple regions simultaneously lisp - structural editing for Clojure & Lisp style languages (e.g. slurp, barf) First get familiar with normal , insert and visual states. Then when you are comfortable, move on to iedit and lisp states.","title":"Evil for Vim Style Editing"},{"location":"spacemacs-basics/evil/#hintnormal-state-by-default","text":"Evil normal state should be used most of the time, unless you are writing code or creating lots of text.","title":"Hint::Normal state by default"},{"location":"spacemacs-basics/evil/#learn-vim-style-editing","text":"Vim-style editing is arguably the most effective way to work with text, supporting changes as much through text manipulation as editing text. Once practised, vim-style editing is far faster than uni-mode editing. The recommended way to learn vim style editing is to practice and ideally use it for everything you do. SPC h T v starts the build in Vim tutorial. This provides the basic movement of vim and provides an interactive way to practice your skills To help make Vim style editing become a sub-conscious act you should learn to speak Evil Vim Adventures is a web-based game that is an alternative to practising Vim.","title":"Learn Vim-style editing"},{"location":"spacemacs-basics/evil/#learning-resource-for-evil","text":"Spacemacs: Migrating from Vim Spacemacs Vim Cheatsheet Graphical Cheatsheet Tutorial Vim quick reference guide Vim Casts Editing as a power user - Vim to Spacemacs Vim versus Spacemacs A focused on learning Vim and understanding why its so powerful. Transcript and exercises are also available. {% youtube %} https://youtu.be/a6Q8Na575qc","title":"Learning resource for Evil"},{"location":"spacemacs-basics/evil/editing-states/","text":"Evil editing states \u03bb\ufe0e Each states allows keys to have different behaviour, helping minimise the cognitive load and quickly building muscle memory for very powerful actions. Evil state Description normal manipulating and navigating existing text (default state) insert writing new text visual selecting regions of text iedit edit multiple regions simultaneously lisp structural editing for Clojure & Lisp style languages (e.g. slurp, barf) First get familiar with normal , insert and visual states. Then when you are comfortable, move on to iedit and lisp states. Hint::Normal state by default \u03bb\ufe0e Evil normal state should be used most of the time, unless you are writing code or creating lots of text. Important key bindings \u03bb\ufe0e , menu contains the major mode (e.g. Clojure) specific commands, organised mnemonically v opens the visual state and allows you to selects text i , a , o , O opens insert state and allows you to create type text SPC s e opens iedit and selects all matching instances of the highlighted text for editing SPC k opens Lisp state, allowing you to do structural editing Hint::Refactor code tools \u03bb\ufe0e The Refactor section has further editing techniques and Clojure specific refactoring tools.","title":"Evil editing states"},{"location":"spacemacs-basics/evil/editing-states/#evil-editing-states","text":"Each states allows keys to have different behaviour, helping minimise the cognitive load and quickly building muscle memory for very powerful actions. Evil state Description normal manipulating and navigating existing text (default state) insert writing new text visual selecting regions of text iedit edit multiple regions simultaneously lisp structural editing for Clojure & Lisp style languages (e.g. slurp, barf) First get familiar with normal , insert and visual states. Then when you are comfortable, move on to iedit and lisp states.","title":"Evil editing states"},{"location":"spacemacs-basics/evil/editing-states/#hintnormal-state-by-default","text":"Evil normal state should be used most of the time, unless you are writing code or creating lots of text.","title":"Hint::Normal state by default"},{"location":"spacemacs-basics/evil/editing-states/#important-key-bindings","text":", menu contains the major mode (e.g. Clojure) specific commands, organised mnemonically v opens the visual state and allows you to selects text i , a , o , O opens insert state and allows you to create type text SPC s e opens iedit and selects all matching instances of the highlighted text for editing SPC k opens Lisp state, allowing you to do structural editing","title":"Important key bindings"},{"location":"spacemacs-basics/evil/editing-states/#hintrefactor-code-tools","text":"The Refactor section has further editing techniques and Clojure specific refactoring tools.","title":"Hint::Refactor code tools"},{"location":"spacemacs-basics/evil-tools/","text":"Evil tools \u03bb\ufe0e TODO::Expand on overview, provide video overview \u03bb\ufe0e There are several Evil tools that add text manipulation features to your Vim style editing . Keybinding Evil tool Description SPC s e iedit search and replace in multiple matches concurrently g r multiple cursors create multiple cursors for concurrent text editing SPC n narrowing limit the view of the current buffer (range, function definition) C-c C-e helm-ag project refactor by editing helm results of project searches","title":"Evil tools"},{"location":"spacemacs-basics/evil-tools/#evil-tools","text":"","title":"Evil tools"},{"location":"spacemacs-basics/evil-tools/#todoexpand-on-overview-provide-video-overview","text":"There are several Evil tools that add text manipulation features to your Vim style editing . Keybinding Evil tool Description SPC s e iedit search and replace in multiple matches concurrently g r multiple cursors create multiple cursors for concurrent text editing SPC n narrowing limit the view of the current buffer (range, function definition) C-c C-e helm-ag project refactor by editing helm results of project searches","title":"TODO::Expand on overview, provide video overview"},{"location":"spacemacs-basics/evil-tools/helm-swoop/","text":"Helm-swoop \u03bb\ufe0e Helm-swoop provides an easy way to navigate through code, based on search results Search a buffer (Clojure namespace) or project and use the results to navigate to the locations in the code for each match found. SPC s s to search using currently selected region, or prompts for search text if nothing selected. j and k to navigate the search results and show the line in the file the search corresponds to. SPC s S assumes word under cursor is the symbol you wish to search for. helm-swoop is also available in the symbol highlight transient menu . Keybindings Description SPC s C clear helm-swoop own cache SPC s s execute helm-swoop SPC s S execute helm-multi-swoop SPC s C-s execute helm-multi-swoop-all For example, navigate to a function definition and all the places that function is called in a project using helm-multi-swoop. Hint::Refactor code \u03bb\ufe0e Refactor section provides examples of using helm-ag, helm-swoop, iedit, narrowing and clj-refactor.","title":"Helm-swoop"},{"location":"spacemacs-basics/evil-tools/helm-swoop/#helm-swoop","text":"Helm-swoop provides an easy way to navigate through code, based on search results Search a buffer (Clojure namespace) or project and use the results to navigate to the locations in the code for each match found. SPC s s to search using currently selected region, or prompts for search text if nothing selected. j and k to navigate the search results and show the line in the file the search corresponds to. SPC s S assumes word under cursor is the symbol you wish to search for. helm-swoop is also available in the symbol highlight transient menu . Keybindings Description SPC s C clear helm-swoop own cache SPC s s execute helm-swoop SPC s S execute helm-multi-swoop SPC s C-s execute helm-multi-swoop-all For example, navigate to a function definition and all the places that function is called in a project using helm-multi-swoop.","title":"Helm-swoop"},{"location":"spacemacs-basics/evil-tools/helm-swoop/#hintrefactor-code","text":"Refactor section provides examples of using helm-ag, helm-swoop, iedit, narrowing and clj-refactor.","title":"Hint::Refactor code"},{"location":"spacemacs-basics/evil-tools/iedit-a-function/","text":"iedit a function \u03bb\ufe0e In iedit state you can: F to limit the scope to the current function L to limit the scope to the current line J to increase the scope (starting from the current line) one line below K to increase the scope one line above Navigate between the occurrences with n and N and TAB to remove an occurrence.","title":"iedit a function"},{"location":"spacemacs-basics/evil-tools/iedit-a-function/#iedit-a-function","text":"In iedit state you can: F to limit the scope to the current function L to limit the scope to the current line J to increase the scope (starting from the current line) one line below K to increase the scope one line above Navigate between the occurrences with n and N and TAB to remove an occurrence.","title":"iedit a function"},{"location":"spacemacs-basics/evil-tools/iedit-find-replace/","text":"iedit example - multiple find and replace \u03bb\ufe0e If you have text you want to edit in multiple places at the same time, rather than the traditional find/replace, you can select all the regions and use multiple cursors to edit all regions simultaneously. Put the cursor over the word you want to replace v to enter visual (select) mode SPC v to select word or region v increases the selected region V to reduce selected region e for iedit state C-; to edit selection n jump to next matching selected region p jump to previous matching selected region M-j deselect current region S substitute text in all regions D delete all selected regions SPC s e matches all instances of a region under the cursor (iedit state)","title":"iedit example - multiple find and replace"},{"location":"spacemacs-basics/evil-tools/iedit-find-replace/#iedit-example-multiple-find-and-replace","text":"If you have text you want to edit in multiple places at the same time, rather than the traditional find/replace, you can select all the regions and use multiple cursors to edit all regions simultaneously. Put the cursor over the word you want to replace v to enter visual (select) mode SPC v to select word or region v increases the selected region V to reduce selected region e for iedit state C-; to edit selection n jump to next matching selected region p jump to previous matching selected region M-j deselect current region S substitute text in all regions D delete all selected regions SPC s e matches all instances of a region under the cursor (iedit state)","title":"iedit example - multiple find and replace"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/","text":"iedit in action \u03bb\ufe0e How to do things with iedit TODO::Add video for each example \u03bb\ufe0e Changing multiple occurrences \u03bb\ufe0e First select one instance of a character or word that occurs multiple times in the buffer. This is typically done with visual mode, v . SPC s e will highlight all occurrences and put you in iedit state. Any Vim style editing will change all occurrences. ESC or fd will end iedit state and return to Vim normal state. Editing selections \u03bb\ufe0e IEdit defaults to selecting all matches. C-; in iedit state allows you to edit the selections. Once editing the selections, use n to jump to next word/region and N to the previous. M-; will toggle the selection of the current word/region. Hint::iedit and narrowing \u03bb\ufe0e iedit selects all occurrences in a buffer. If you only want to change one part of the text (or a specific function), then you can narrow to just edit that specific region. See narrow for more details","title":"iedit in action"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#iedit-in-action","text":"How to do things with iedit","title":"iedit in action"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#todoadd-video-for-each-example","text":"","title":"TODO::Add video for each example"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#changing-multiple-occurrences","text":"First select one instance of a character or word that occurs multiple times in the buffer. This is typically done with visual mode, v . SPC s e will highlight all occurrences and put you in iedit state. Any Vim style editing will change all occurrences. ESC or fd will end iedit state and return to Vim normal state.","title":"Changing multiple occurrences"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#editing-selections","text":"IEdit defaults to selecting all matches. C-; in iedit state allows you to edit the selections. Once editing the selections, use n to jump to next word/region and N to the previous. M-; will toggle the selection of the current word/region.","title":"Editing selections"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#hintiedit-and-narrowing","text":"iedit selects all occurrences in a buffer. If you only want to change one part of the text (or a specific function), then you can narrow to just edit that specific region. See narrow for more details","title":"Hint::iedit and narrowing"},{"location":"spacemacs-basics/evil-tools/iedit-replace-multiple-words/","text":"iedit - replace multiple words \u03bb\ufe0e manual selection of several words then replace: v w w SPC s e S \"toto\" ESC ESC append text to a word on two lines: v i w SPC s e J i \"toto\" ESC ESC substitute symbol /with expand-region/: SPC v v e S \"toto\" ESC ESC replace symbol with yanked (copied) text /with expand region/: SPC v e p ESC ESC","title":"iedit - replace multiple words"},{"location":"spacemacs-basics/evil-tools/iedit-replace-multiple-words/#iedit-replace-multiple-words","text":"manual selection of several words then replace: v w w SPC s e S \"toto\" ESC ESC append text to a word on two lines: v i w SPC s e J i \"toto\" ESC ESC substitute symbol /with expand-region/: SPC v v e S \"toto\" ESC ESC replace symbol with yanked (copied) text /with expand region/: SPC v e p ESC ESC","title":"iedit - replace multiple words"},{"location":"spacemacs-basics/evil-tools/iedit/","text":"Editing with Vim and iedit \u03bb\ufe0e Make multiple matching edits within a buffer SPC s e to start evil-iedit-state to quickly edit multiple occurrences of a symbol within a buffer or selection. Use iedit with helm-ag to make multiple matching edits across a project . e within visual state and symbol highlight transient state also enables iedit. Common usage \u03bb\ufe0e # to select all the occurrences of a symbol or word, e to start iedit n or N to jump between occurrences, TAB to deselect or re-select the specific occurrence {% youtube %} https://youtu.be/VCxJy8abkfA Refining text selection \u03bb\ufe0e SPC v selects a word and v expands the selection. When a name is separated such as with kebab case, - , then SPC v v v v can select words-separated-by-dashes, with a v for each part of the word selection. The same selection works with file paths and URL's. Narrowing, SPC n , limits the scope of iedit so only the relevant occurrences are changed and reduces the need to deselect unwanted occurrences. SPC n f narrows the scope to a function, SPC n r narrows to a pre-selected range. iedit state key bindings \u03bb\ufe0e iedit state changes the behaviour of the following Evil normal state key bindings (every other normal state key binding remains the same) Key Description ESC go back to normal state TAB toggle selection of current occurrence 0 go to the beginning of the current occurrence $ go to the end of the current occurrence # prefix all occurrences with an increasing number (SPC u to choose starting number). A go to the end of the current occurrence and switch to iedit-insert state D delete the occurrences F restrict the scope to the function gg go to first occurrence G go to last occurrence I go to the beginning of the current occurrence and switch to iedit-insert state J increase the editing scope by one line below K increase the editing scope by one line above L restrict the scope to the current line n go to next occurrence N go to previous occurrence p replace occurrences with last yanked (copied) text S (substitute) delete the occurrences and switch to iedit-insert state V toggle visibility of lines with no occurrence U Up-case the occurrences C-U down-case the occurrences Hint:: \u03bb\ufe0e 0 , $ , A and I have the default Vim behavior when used outside of an occurrence . Reference \u03bb\ufe0e iedit GitHub project evil-iedit-state","title":"Editing with Vim and iedit"},{"location":"spacemacs-basics/evil-tools/iedit/#editing-with-vim-and-iedit","text":"Make multiple matching edits within a buffer SPC s e to start evil-iedit-state to quickly edit multiple occurrences of a symbol within a buffer or selection. Use iedit with helm-ag to make multiple matching edits across a project . e within visual state and symbol highlight transient state also enables iedit.","title":"Editing with Vim and iedit"},{"location":"spacemacs-basics/evil-tools/iedit/#common-usage","text":"# to select all the occurrences of a symbol or word, e to start iedit n or N to jump between occurrences, TAB to deselect or re-select the specific occurrence {% youtube %} https://youtu.be/VCxJy8abkfA","title":"Common usage"},{"location":"spacemacs-basics/evil-tools/iedit/#refining-text-selection","text":"SPC v selects a word and v expands the selection. When a name is separated such as with kebab case, - , then SPC v v v v can select words-separated-by-dashes, with a v for each part of the word selection. The same selection works with file paths and URL's. Narrowing, SPC n , limits the scope of iedit so only the relevant occurrences are changed and reduces the need to deselect unwanted occurrences. SPC n f narrows the scope to a function, SPC n r narrows to a pre-selected range.","title":"Refining text selection"},{"location":"spacemacs-basics/evil-tools/iedit/#iedit-state-key-bindings","text":"iedit state changes the behaviour of the following Evil normal state key bindings (every other normal state key binding remains the same) Key Description ESC go back to normal state TAB toggle selection of current occurrence 0 go to the beginning of the current occurrence $ go to the end of the current occurrence # prefix all occurrences with an increasing number (SPC u to choose starting number). A go to the end of the current occurrence and switch to iedit-insert state D delete the occurrences F restrict the scope to the function gg go to first occurrence G go to last occurrence I go to the beginning of the current occurrence and switch to iedit-insert state J increase the editing scope by one line below K increase the editing scope by one line above L restrict the scope to the current line n go to next occurrence N go to previous occurrence p replace occurrences with last yanked (copied) text S (substitute) delete the occurrences and switch to iedit-insert state V toggle visibility of lines with no occurrence U Up-case the occurrences C-U down-case the occurrences","title":"iedit state key bindings"},{"location":"spacemacs-basics/evil-tools/iedit/#hint","text":"0 , $ , A and I have the default Vim behavior when used outside of an occurrence .","title":"Hint::"},{"location":"spacemacs-basics/evil-tools/iedit/#reference","text":"iedit GitHub project evil-iedit-state","title":"Reference"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/","text":"Multiple Cursors \u03bb\ufe0e Create multiple cursors to edit in parallel multiple lines of text in the current buffer. Multiple cursors is especially useful where lines are not entirely identical, i.e. they have the same basic form but have different values Multiple cursors allows you to call all Emacs named functions and have the results output to each cursor you have created. Hint::iedit or multiple cursors \u03bb\ufe0e iedit is excellent for all kinds of search and replace actions where the text to change is the same. iedit finds all matches in a buffer or the scope created by narrowing . Where text lines do not match but have a similar form, multiple cursors allow for more irregular changes Common usage \u03bb\ufe0e g r shows the menu for multiple cursors g r j adds a cursor to the next line 24 g r j will create multiple cursors for 24 consecutive lines. g r I adds cursors to visual selection lines, S-v and arrow keys, or v 20 j to select the next 24 lines Hint::Using Narrowing to constrain where cursors are created \u03bb\ufe0e SPC n menu allows you to narrow the view on the current buffer SPC n f narrows to the current function definition SPC n r narrows to a selected range of text See the section on Spacemacs - Narrowing Keybindings \u03bb\ufe0e The most commonly used key bindings for multiple cursors Evil normal Description g r j creates a new cursor on the line below (adhoc changes) g r k create new cursor on the line above (adhoc changes) g r I create new cursor on selected lines g r m create cursors on all matching text (under cursor or region of selected text) g r n make a cursor at point and go to the next match g r N go to the next match without creating a cursor at current point g r p make a cursor at point and go to the previous match g r P go to the previous match without creating a cursor at current point g r q when you have finished to remove all cursors and leave just one cursor. g r shows the full menu TODO::Add video of most commonly used features \u03bb\ufe0e Known issues \u03bb\ufe0e Only named commands can be executed by multiple cursors. There could be a performance penalty when there are too many cursors (30+). Paste will not work when the Spacemacs paste transient state is enabled. This is due to the fact that evil-paste-pop and evil-paste-pop-next commands are not supported. evil-repeat works only for some commands. In particular it doesn\u2019t work for delete. It will also interfere with the cursor positions during an undo or redo operation. Reference \u03bb\ufe0e multiple cursors layer - Spacemacs develop documentation evil-mc - default backend for multiple cursors layer evil-multiedit - used in Doom Emacs","title":"Multiple Cursors"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#multiple-cursors","text":"Create multiple cursors to edit in parallel multiple lines of text in the current buffer. Multiple cursors is especially useful where lines are not entirely identical, i.e. they have the same basic form but have different values Multiple cursors allows you to call all Emacs named functions and have the results output to each cursor you have created.","title":"Multiple Cursors"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#hintiedit-or-multiple-cursors","text":"iedit is excellent for all kinds of search and replace actions where the text to change is the same. iedit finds all matches in a buffer or the scope created by narrowing . Where text lines do not match but have a similar form, multiple cursors allow for more irregular changes","title":"Hint::iedit or multiple cursors"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#common-usage","text":"g r shows the menu for multiple cursors g r j adds a cursor to the next line 24 g r j will create multiple cursors for 24 consecutive lines. g r I adds cursors to visual selection lines, S-v and arrow keys, or v 20 j to select the next 24 lines","title":"Common usage"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#hintusing-narrowing-to-constrain-where-cursors-are-created","text":"SPC n menu allows you to narrow the view on the current buffer SPC n f narrows to the current function definition SPC n r narrows to a selected range of text See the section on Spacemacs - Narrowing","title":"Hint::Using Narrowing to constrain where cursors are created"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#keybindings","text":"The most commonly used key bindings for multiple cursors Evil normal Description g r j creates a new cursor on the line below (adhoc changes) g r k create new cursor on the line above (adhoc changes) g r I create new cursor on selected lines g r m create cursors on all matching text (under cursor or region of selected text) g r n make a cursor at point and go to the next match g r N go to the next match without creating a cursor at current point g r p make a cursor at point and go to the previous match g r P go to the previous match without creating a cursor at current point g r q when you have finished to remove all cursors and leave just one cursor. g r shows the full menu","title":"Keybindings"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#todoadd-video-of-most-commonly-used-features","text":"","title":"TODO::Add video of most commonly used features"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#known-issues","text":"Only named commands can be executed by multiple cursors. There could be a performance penalty when there are too many cursors (30+). Paste will not work when the Spacemacs paste transient state is enabled. This is due to the fact that evil-paste-pop and evil-paste-pop-next commands are not supported. evil-repeat works only for some commands. In particular it doesn\u2019t work for delete. It will also interfere with the cursor positions during an undo or redo operation.","title":"Known issues"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#reference","text":"multiple cursors layer - Spacemacs develop documentation evil-mc - default backend for multiple cursors layer evil-multiedit - used in Doom Emacs","title":"Reference"},{"location":"spacemacs-basics/evil-tools/narrowing/","text":"Narrowing - very selective editing \u03bb\ufe0e Narrowing displays just a part of the current buffer you are working with, allowing you to carry out some very specific editing. Typical uses are to select a region or a function definition to narrow on. For example, you may have two Clojure functions that use the same local name in a let statement. The local name is used a number of times and you want to rename it. By narrowing on to just that function, you can change the local names all at once without affecting the other function definition. Example: Narrowing and multiple replace \u03bb\ufe0e In this example I narrow my 100-days-of-code log to just edit a single day of the log and use iedit to manage a multiple replace on just the text for that day. {% youtube %} https://www.youtube.com/watch?v=4bVMXXxPiQs","title":"Narrowing - very selective editing"},{"location":"spacemacs-basics/evil-tools/narrowing/#narrowing-very-selective-editing","text":"Narrowing displays just a part of the current buffer you are working with, allowing you to carry out some very specific editing. Typical uses are to select a region or a function definition to narrow on. For example, you may have two Clojure functions that use the same local name in a let statement. The local name is used a number of times and you want to rename it. By narrowing on to just that function, you can change the local names all at once without affecting the other function definition.","title":"Narrowing - very selective editing"},{"location":"spacemacs-basics/evil-tools/narrowing/#example-narrowing-and-multiple-replace","text":"In this example I narrow my 100-days-of-code log to just edit a single day of the log and use iedit to manage a multiple replace on just the text for that day. {% youtube %} https://www.youtube.com/watch?v=4bVMXXxPiQs","title":"Example: Narrowing and multiple replace"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/","text":"Replacing text across projects \u03bb\ufe0e If you have ripgrep , ag (silver searcher), pt or ack installed, replacing an occurrence of text in several files can be performed via helm-ag . Example \u03bb\ufe0e To replace all foo occurrences by bar in your current project: SPC / followed by a search pattern, which displays a helm popup showing all matching text across all your project files C-c C-e opens a new buffer with all the search results, which you can edit. SPC s e on a selected piece of text will highlight all occurrences in the search results and allow you to change them all concurrently. ESC or fd to leave iedit state (twice if in Evil insert mode). C-c C-c to commit the changes you have just made, which will automatically update all the files in your project with these changes. C-c C-k if you want to cancel your changes instead. TODO::Add animated gif / video example \u03bb\ufe0e Hint:: \u03bb\ufe0e helm-ag despite its name works with all the search tools, except for grep","title":"Replacing text across projects"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#replacing-text-across-projects","text":"If you have ripgrep , ag (silver searcher), pt or ack installed, replacing an occurrence of text in several files can be performed via helm-ag .","title":"Replacing text across projects"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#example","text":"To replace all foo occurrences by bar in your current project: SPC / followed by a search pattern, which displays a helm popup showing all matching text across all your project files C-c C-e opens a new buffer with all the search results, which you can edit. SPC s e on a selected piece of text will highlight all occurrences in the search results and allow you to change them all concurrently. ESC or fd to leave iedit state (twice if in Evil insert mode). C-c C-c to commit the changes you have just made, which will automatically update all the files in your project with these changes. C-c C-k if you want to cancel your changes instead.","title":"Example"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#todoadd-animated-gif-video-example","text":"","title":"TODO::Add animated gif / video example"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#hint","text":"helm-ag despite its name works with all the search tools, except for grep","title":"Hint::"},{"location":"spacemacs-basics/vim-style/common-evil/","text":"Common Tasks using Evil vim-style editing \u03bb\ufe0e Copy Cut Paste \u03bb\ufe0e Copy, cut and paste commands use the Emacs kill-ring, which maintains a complete history of values cut or copied since Emacs was started. Copy - yank \u03bb\ufe0e Copy is known as yank in Emacs terminology. y to yank the currently selected text into the kill-ring, typicaly used with visual select and motions y y to yank the current line Cut commands followed by u to undo are effectively the same as using copy Cut \u03bb\ufe0e d Paste \u03bb\ufe0e p to paste the contents of the kill-ring C-j and C-k scroll through the kill-ring history, allowing previously cut and copied values to be selected p copies any selected text into the kill-ring and will be pasted the next time p is pressed P pastes the contents of the kill-ring, without copying selected text. Use P if replacing the same text in several places or consider using iedit to replace multiple selections","title":"Common Tasks using Evil vim-style editing"},{"location":"spacemacs-basics/vim-style/common-evil/#common-tasks-using-evil-vim-style-editing","text":"","title":"Common Tasks using Evil vim-style editing"},{"location":"spacemacs-basics/vim-style/common-evil/#copy-cut-paste","text":"Copy, cut and paste commands use the Emacs kill-ring, which maintains a complete history of values cut or copied since Emacs was started.","title":"Copy Cut Paste"},{"location":"spacemacs-basics/vim-style/common-evil/#copy-yank","text":"Copy is known as yank in Emacs terminology. y to yank the currently selected text into the kill-ring, typicaly used with visual select and motions y y to yank the current line Cut commands followed by u to undo are effectively the same as using copy","title":"Copy - yank"},{"location":"spacemacs-basics/vim-style/common-evil/#cut","text":"d","title":"Cut"},{"location":"spacemacs-basics/vim-style/common-evil/#paste","text":"p to paste the contents of the kill-ring C-j and C-k scroll through the kill-ring history, allowing previously cut and copied values to be selected p copies any selected text into the kill-ring and will be pasted the next time p is pressed P pastes the contents of the kill-ring, without copying selected text. Use P if replacing the same text in several places or consider using iedit to replace multiple selections","title":"Paste"},{"location":"spacemacs-basics/vim-style/key-binding-reference/","text":"Evil Keybinding Reference \u03bb\ufe0e An alphabetically ordered reference of Evil key bindings. Spacemacs DOCUMENTATION key bindings section contains full details Normal mode keybindings \u03bb\ufe0e Keybindings available in Evil normal mode and the resultant state they leave you in. Keybinding Description State @ execute keyboard macro (defined by q ) Normal ' jump to mark (defined by m ) Normal a append text after cursor Insert a append text after cursor Insert A append text to end of sentence Insert b move cursor back to start of previous word Normal B move cursor back to start of last word Normal c change (use with modifier) Insert C change rest of sentence Insert d delete (use with modifier) Normal D delete rest of sentence Normal e end of word Normal E end of word (seems same as above) Normal f find character forward (type character) Normal F find character backward (type character) Normal fd Escape (press almost together) Normal g go menu Normal G Jump to end of buffer Normal h move cursor left Normal H move cursor to top of buffer Normal i insert text Insert I insert text at start of sentence Insert j Move cursor down a line Normal J Join next line to end of current Normal k Move cursor up a line Normal K spacemacs/evil-smart-doc-lookup Normal l Move cursor right Normal L Move cursor to bottom of buffer Normal m Create marker (next character is marker name) Normal M Jump to middle of buffer Normal n Next search occurrence Normal N Previous search occurrence Normal o New line below Insert O New line above Insert p Paste (after / below cursor) Insert P Paste (before / above cursor) Insert q Record keyboard macro attached to given character Normal Q undefined Normal r Replace character under cursor Normal R Replace character state Replace s Substitute character Insert S Substitute sentence Insert t Find character forward - cursor before character Normal T Find character backward - cursor after character Normal u Undo last change (C-R to redo) Normal U Undefined Normal v Visual select Visual V Visual select sentence Visual w Jump cursor to start of next word Normal W Jump cursor to start of next word Normal x Delete character under cursor Normal X Delete character backwards Normal y y Yank (copy) line Normal Y Yank (copy) line Normal z Menu - code folding / keyboard macros Z Menu - evil quit spacemacs/evil-smart-doc-lookup \u03bb\ufe0e Run documentation lookup command specific to the major mode. Use command bound to SPC m h h if defined, otherwise fall back to evil-lookup","title":"Evil Keybinding Reference"},{"location":"spacemacs-basics/vim-style/key-binding-reference/#evil-keybinding-reference","text":"An alphabetically ordered reference of Evil key bindings. Spacemacs DOCUMENTATION key bindings section contains full details","title":"Evil Keybinding Reference"},{"location":"spacemacs-basics/vim-style/key-binding-reference/#normal-mode-keybindings","text":"Keybindings available in Evil normal mode and the resultant state they leave you in. Keybinding Description State @ execute keyboard macro (defined by q ) Normal ' jump to mark (defined by m ) Normal a append text after cursor Insert a append text after cursor Insert A append text to end of sentence Insert b move cursor back to start of previous word Normal B move cursor back to start of last word Normal c change (use with modifier) Insert C change rest of sentence Insert d delete (use with modifier) Normal D delete rest of sentence Normal e end of word Normal E end of word (seems same as above) Normal f find character forward (type character) Normal F find character backward (type character) Normal fd Escape (press almost together) Normal g go menu Normal G Jump to end of buffer Normal h move cursor left Normal H move cursor to top of buffer Normal i insert text Insert I insert text at start of sentence Insert j Move cursor down a line Normal J Join next line to end of current Normal k Move cursor up a line Normal K spacemacs/evil-smart-doc-lookup Normal l Move cursor right Normal L Move cursor to bottom of buffer Normal m Create marker (next character is marker name) Normal M Jump to middle of buffer Normal n Next search occurrence Normal N Previous search occurrence Normal o New line below Insert O New line above Insert p Paste (after / below cursor) Insert P Paste (before / above cursor) Insert q Record keyboard macro attached to given character Normal Q undefined Normal r Replace character under cursor Normal R Replace character state Replace s Substitute character Insert S Substitute sentence Insert t Find character forward - cursor before character Normal T Find character backward - cursor after character Normal u Undo last change (C-R to redo) Normal U Undefined Normal v Visual select Visual V Visual select sentence Visual w Jump cursor to start of next word Normal W Jump cursor to start of next word Normal x Delete character under cursor Normal X Delete character backwards Normal y y Yank (copy) line Normal Y Yank (copy) line Normal z Menu - code folding / keyboard macros Z Menu - evil quit","title":"Normal mode keybindings"},{"location":"spacemacs-basics/vim-style/key-binding-reference/#spacemacsevil-smart-doc-lookup","text":"Run documentation lookup command specific to the major mode. Use command bound to SPC m h h if defined, otherwise fall back to evil-lookup","title":"spacemacs/evil-smart-doc-lookup"},{"location":"spacemacs-basics/vim-style/speaking-evil/","text":"Speaking Evil \u03bb\ufe0e Evil is easier to learn if you learn to speak commands as sentences. First learn some verbs: c (change), d (delete), g go, v visual (select), y yank (copy) Then use those verbs with some modifiers ' mark, { } beginning/end of paragraph, a around, f find (includes character), i inside, s surround, t till (just before a character) Then learn the text objects you can apply verbs and modifiers too b block/parentheses, p paragraph, s sentence t tag - html/xml, w word Examples of speaking Evil \u03bb\ufe0e Practice speaking evil with these examples Keybinding Description c i s change inside current sentence (change the whole sentence) c i \" change inside double quotes c f ) change from cursor to next ) character c s ' \" change by the surrounding single quotes with double quotes c t X change till the character X (not including X ) c /foo change until the first search result of \u2018foo\u2019 d d delete current line d i w delete inside the current word (delete word) v t SPC visual select till the next Space character v s ] visually select and surround with [] without spaces v s [ as above with [ ] with spaces between parens and content g v go to last visual selection (select last visual selection) v a p visually select around current paragraph SPC v s \" visually select current work and surround with \"\" v i w s \" visually select, insert around current word, and surround with quotes y y yank (copy) current line y w yank (copy) current word y @ a yank (copy) to mark a ( m a creates a mark called a ) Evil Reference and Tips Evil quick reference guide Evil tips for developers Speaking Vim","title":"Speaking Evil"},{"location":"spacemacs-basics/vim-style/speaking-evil/#speaking-evil","text":"Evil is easier to learn if you learn to speak commands as sentences. First learn some verbs: c (change), d (delete), g go, v visual (select), y yank (copy) Then use those verbs with some modifiers ' mark, { } beginning/end of paragraph, a around, f find (includes character), i inside, s surround, t till (just before a character) Then learn the text objects you can apply verbs and modifiers too b block/parentheses, p paragraph, s sentence t tag - html/xml, w word","title":"Speaking Evil"},{"location":"spacemacs-basics/vim-style/speaking-evil/#examples-of-speaking-evil","text":"Practice speaking evil with these examples Keybinding Description c i s change inside current sentence (change the whole sentence) c i \" change inside double quotes c f ) change from cursor to next ) character c s ' \" change by the surrounding single quotes with double quotes c t X change till the character X (not including X ) c /foo change until the first search result of \u2018foo\u2019 d d delete current line d i w delete inside the current word (delete word) v t SPC visual select till the next Space character v s ] visually select and surround with [] without spaces v s [ as above with [ ] with spaces between parens and content g v go to last visual selection (select last visual selection) v a p visually select around current paragraph SPC v s \" visually select current work and surround with \"\" v i w s \" visually select, insert around current word, and surround with quotes y y yank (copy) current line y w yank (copy) current word y @ a yank (copy) to mark a ( m a creates a mark called a ) Evil Reference and Tips Evil quick reference guide Evil tips for developers Speaking Vim","title":"Examples of speaking Evil"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/","text":"Vim Quick Reference \u03bb\ufe0e A reference of the most common keybindings available in Vim Normal mode. Spacemacs DOCUMENTATION key bindings section contains full details . repeats the last keybinding sequence used in Vim Normal mode or a change made within a complete Vim Insert session. Moving around \u03bb\ufe0e In normal mode you can keep your fingers resting on the main row of your keyboard to move around. Key action j move cursor down one line k move cursor up one line l move cursor right one character h move cursor left one character In menus such as helm you can move around using Ctrl and these keybindings. So C-j will move the cursor down one item in a menu. Navigating the current line \u03bb\ufe0e Key Action f to next character (you specify) t to just before the next character ; repeat f or t search w start of next word W start of next word, white space delimited e end of current word b start of previous word W end of next word, white space delimited * to next matching symbol name $ end of current line 0 start of current line ^ start of non-whitespace % jump to matching parens or next closed paren Navigating the current buffer \u03bb\ufe0e Key action gg start of buffer G end of buffer H move cursor to head of buffer M move cursor to middle of buffer L move cursor to bottom line of buffer C-u jump up half a page C-d jump down half a page } move cursor forward by paragraph or block { move cursor backward by paragraph or block ma mark a line in a file with marker \"a\" `a after moving around, go back to the exact position of marker \"a\" 'a after moving around, go back to line of marker \"a\" :marks view all the marks '' go to the last place you were [{ jump back to the \"{\" at the beginning of the current code block SPC j i jump using helm list of headings / functions SPC j j avy-jump to character (specify) SPC j l avy-jump to line C-o jump back to previous cursor location ( evil-jump-backwards ) C-i Go to newer position in jump list (opposite of C-o ) : 4 go to line 4 Searching \u03bb\ufe0e Searching buffers and projects with helm-swoop is recommended. SPC s s - helm-swoop - shows a buffer with all search results, C-j and C-k navigates through results. SPC s p for a project wide search. \\b defines a boundary around the search term. For example search\\b will match search, but not searching. Key Action * search forward for the word under the cursor # search backward for the word under the cursor / search forward in current buffer ? search backward in current buffer n once searching: find forward N once searching: find backwards Hint::Ensure RET is pressed after / search \u03bb\ufe0e Using / to search should be completed by pressing RET or deleting the search term in the mini-buffer before using Evil keybindings. When in the search state the Evil keybindings act more destructively. Use SPC s s for helm swoop rather than / Text Editing \u03bb\ufe0e The following commands put you into the Evil Insert state Key Action i insert state at cursor I insert state at start of line a append - insert state after cursor A append - insert state at end of line o new line after cursor O new line before cursor Return to Normal state \u03bb\ufe0e Regularly switch between normal and insert states is normal practice in Spacemacs. As soon as you finish typing some new text, it should become second nature to go back to normal state. c Switching from insert to normal state: ESC or press f d keys in extremely quick succession. Hint:: \u03bb\ufe0e Using f d together is low risk as if you dont get it right it will either add the characters or try find the next d character (as f moves to the next character). Keep trying this key combination as once in normal state you can use u to undo any f d characters inserted. The character sequence can be customized or deactivated by adding evil-escape to dotspacemacs-excluded-packages in the ~/.spacemacs configuration file. Copy, cut, paste, undo, redo \u03bb\ufe0e v in Vim normal mode changes to Visual select mode. Use the navigation keys or any other movement keys to select text to copy or cut. Key Action y copy (yank) selection and add to kill ring x delete character at point and add to kill ring X delete character before point and add to kill ring p paste (put) u undo Ctrl-r redo Hint:: Undo tips \u03bb\ufe0e Undo will revert the last action in normal mode or all the changes you made in insert state Replace and changing text \u03bb\ufe0e Key Action r replace the character under cursor R replace multiple characters until ESC cw change word from cursor to end 4 c w change 4 words v (select) c change region SPC v c change current word/region SPC v d delete current word/region d w delete from cursor to end of word C change from cursor to end of line D delete from cursor to end of line d $ delete from cursor to end of line Combine d | c | v | r with avy-goto Hint::Search and replace \u03bb\ufe0e Delete commands \u03bb\ufe0e Key Action de delete to end of word, not including space dw delete to end of word, including space d$ delete to end of line dd delete the current line 4 d w delete 4 words 4 d $ delete 4 lines to end dt delete to a character (not including character) dab delete a whole block / expression dib delete contents of a block / expression cab change all the block / expression cib change inner block contents / expression yab yank all block / expression yib yank inner block contents / expression Repeat commands \u03bb\ufe0e Key Action . repeat last command again <number> <cmd> repeat command a number of times The . keybinding will repeat the last command in normal mode or the last text edit in insert mode. Type a number before a command and that command will run that number of times. Hint::Inserting a comment border \u03bb\ufe0e Use the number repeat to create a border of 42 ; characters. Type 42 to repeat the command 42 times Press i for insert mode Press ; as the character to repeat insert Press ESC or fd to leave insert mode and insert all 42 ; characters Transposing / swap \u03bb\ufe0e Key Description x p or SPC x t c transpose the current character with the next character SPC x t w transpose the current character with the previous character SPC x t l transpose current line with previous line SPC k tf transpose expression Comments - works for all major modes \u03bb\ufe0e SPC ; ; or g c c to comment out the current line SPC ; or g c to comment out the currently selected region M-; creates a ;; comment on an empty line, or ; at the end of the text of the current line. To comment multiple lines you can use the repeat command style, especially useful if you are using relative line numbers. g c 3 j will comment the current line and the following two lines below. Comment in reverse using g c 3 k . In Visual state, v , select the lines you wish to comment and use g c to comment all the marked lines. Partially marked lines are not commented. http://spacemacs.org/layers/+vim/evil-commentary/README.html Working with Buffers \u03bb\ufe0e To work with files in Emacs, they are first loaded into a Buffer . So when you open a file with M-x find file or SPC f f a new buffer is created so you can manage that file. Buffers are displayed in a window and you can change the window to show any of the current buffers. Here are the most commonly used buffer commands Key Command Description SPC b b helm-mini List current buffers SPC b d kill-this-buffer Kill current buffer SPC b h home Switch to Spacemacs home page SPC b n next-buffer Switch to next buffer SPC b p previous-buffer Switch to previous buffer SPC b s switch-to-scratch-buffer Switch to the scratch buffer SPC b Y copy-whole-buffer-to-clipboard Copy current buffer contents to kill ring See the full buffer menu via SPC b Managing Files \u03bb\ufe0e Key Description SPC f c copy file - save current buffer with a new file name SPC f R change file name of current buffer SPC f y n yank file name of current buffer Also consider using treemacs and projectile Quit or Restart Emacs \u03bb\ufe0e I recommend using the Spacemacs menu from normal mode to quit / restart Spacemacs. Key Action SPC q q Quit Spacemacs SPS q r Restart Spacemacs keeping current window and buffer layout SPS q R Restart Spacemacs Hint::Work in progress - sorry \u03bb\ufe0e The rest of this section is work in progress and a little messy. Classic Vim commands \u03bb\ufe0e Todo::Reference section \u03bb\ufe0e The classic vim commands are also available, however, I dont think they are as nice to learn. Adding as reference for those used to Vim already and would miss them. Substitution \u03bb\ufe0e key Action :s/old/new substitute new for the first old pattern :s/old/new/g substitute new for all 'old's on a line :#,#s/old/new/g substitute phrases between two line #'s type :%s/old/new/g substitute all occurrences in the file :%s/old/new/gc as above, asking for confirmation each time External commands \u03bb\ufe0e You can run external commands using :! followed by a command. For example: :!ls - run the ls command Spacemacs shell can be configured to pop-up a shell buffer to run commands from the directory of the current buffer. Spelling Checking \u03bb\ufe0e As you are typing in any(?) buffer then Spacemacs is checking your spelling as you type. If you type a word that Spacemacs does not recognise then that word is underscored in red. To correct a spelling: Move to the word that is incorrectly spelt SPC S c to change the word and show a list of suggested words Either type in a new spelling or use C-j and C-k keys to move down and back up the list of words, using RET to select that word. Scrolling \u03bb\ufe0e In evil command mode you can scroll just the text using the classic vi bindings. This does not scroll the cursor unless the cursor hist the top or bottom of the window, in which case the cursor stays at that window boundary. C-y - scroll down C-e - scroll text up Jump around \u03bb\ufe0e SPC j i shows imenu that lists all the def and defn expressions in the current buffer, allowing you to jump to one of these definitions directly by typing its name or using C-j and C-k to select the name and pressing RET to jump to the name in the buffer SPC j l labels each line of the buffer with a short, unique character code. By entering the character code you are taken directly to the specific line. This is the avy goto line function and this works on all visible buffers by default, although it can be just shown on the current buffer (TODO: how is this set). Searching \u03bb\ufe0e Search with SPC /","title":"Vim Quick Reference"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#vim-quick-reference","text":"A reference of the most common keybindings available in Vim Normal mode. Spacemacs DOCUMENTATION key bindings section contains full details . repeats the last keybinding sequence used in Vim Normal mode or a change made within a complete Vim Insert session.","title":"Vim Quick Reference"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#moving-around","text":"In normal mode you can keep your fingers resting on the main row of your keyboard to move around. Key action j move cursor down one line k move cursor up one line l move cursor right one character h move cursor left one character In menus such as helm you can move around using Ctrl and these keybindings. So C-j will move the cursor down one item in a menu.","title":"Moving around"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#navigating-the-current-line","text":"Key Action f to next character (you specify) t to just before the next character ; repeat f or t search w start of next word W start of next word, white space delimited e end of current word b start of previous word W end of next word, white space delimited * to next matching symbol name $ end of current line 0 start of current line ^ start of non-whitespace % jump to matching parens or next closed paren","title":"Navigating the current line"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#navigating-the-current-buffer","text":"Key action gg start of buffer G end of buffer H move cursor to head of buffer M move cursor to middle of buffer L move cursor to bottom line of buffer C-u jump up half a page C-d jump down half a page } move cursor forward by paragraph or block { move cursor backward by paragraph or block ma mark a line in a file with marker \"a\" `a after moving around, go back to the exact position of marker \"a\" 'a after moving around, go back to line of marker \"a\" :marks view all the marks '' go to the last place you were [{ jump back to the \"{\" at the beginning of the current code block SPC j i jump using helm list of headings / functions SPC j j avy-jump to character (specify) SPC j l avy-jump to line C-o jump back to previous cursor location ( evil-jump-backwards ) C-i Go to newer position in jump list (opposite of C-o ) : 4 go to line 4","title":"Navigating the current buffer"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#searching","text":"Searching buffers and projects with helm-swoop is recommended. SPC s s - helm-swoop - shows a buffer with all search results, C-j and C-k navigates through results. SPC s p for a project wide search. \\b defines a boundary around the search term. For example search\\b will match search, but not searching. Key Action * search forward for the word under the cursor # search backward for the word under the cursor / search forward in current buffer ? search backward in current buffer n once searching: find forward N once searching: find backwards","title":"Searching"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hintensure-ret-is-pressed-after-search","text":"Using / to search should be completed by pressing RET or deleting the search term in the mini-buffer before using Evil keybindings. When in the search state the Evil keybindings act more destructively. Use SPC s s for helm swoop rather than /","title":"Hint::Ensure RET is pressed after / search"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#text-editing","text":"The following commands put you into the Evil Insert state Key Action i insert state at cursor I insert state at start of line a append - insert state after cursor A append - insert state at end of line o new line after cursor O new line before cursor","title":"Text Editing"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#return-to-normal-state","text":"Regularly switch between normal and insert states is normal practice in Spacemacs. As soon as you finish typing some new text, it should become second nature to go back to normal state. c Switching from insert to normal state: ESC or press f d keys in extremely quick succession.","title":"Return to Normal state"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hint","text":"Using f d together is low risk as if you dont get it right it will either add the characters or try find the next d character (as f moves to the next character). Keep trying this key combination as once in normal state you can use u to undo any f d characters inserted. The character sequence can be customized or deactivated by adding evil-escape to dotspacemacs-excluded-packages in the ~/.spacemacs configuration file.","title":"Hint::"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#copy-cut-paste-undo-redo","text":"v in Vim normal mode changes to Visual select mode. Use the navigation keys or any other movement keys to select text to copy or cut. Key Action y copy (yank) selection and add to kill ring x delete character at point and add to kill ring X delete character before point and add to kill ring p paste (put) u undo Ctrl-r redo","title":"Copy, cut, paste, undo, redo"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hint-undo-tips","text":"Undo will revert the last action in normal mode or all the changes you made in insert state","title":"Hint:: Undo tips"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#replace-and-changing-text","text":"Key Action r replace the character under cursor R replace multiple characters until ESC cw change word from cursor to end 4 c w change 4 words v (select) c change region SPC v c change current word/region SPC v d delete current word/region d w delete from cursor to end of word C change from cursor to end of line D delete from cursor to end of line d $ delete from cursor to end of line Combine d | c | v | r with avy-goto","title":"Replace and changing text"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hintsearch-and-replace","text":"","title":"Hint::Search and replace"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#delete-commands","text":"Key Action de delete to end of word, not including space dw delete to end of word, including space d$ delete to end of line dd delete the current line 4 d w delete 4 words 4 d $ delete 4 lines to end dt delete to a character (not including character) dab delete a whole block / expression dib delete contents of a block / expression cab change all the block / expression cib change inner block contents / expression yab yank all block / expression yib yank inner block contents / expression","title":"Delete commands"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#repeat-commands","text":"Key Action . repeat last command again <number> <cmd> repeat command a number of times The . keybinding will repeat the last command in normal mode or the last text edit in insert mode. Type a number before a command and that command will run that number of times.","title":"Repeat commands"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hintinserting-a-comment-border","text":"Use the number repeat to create a border of 42 ; characters. Type 42 to repeat the command 42 times Press i for insert mode Press ; as the character to repeat insert Press ESC or fd to leave insert mode and insert all 42 ; characters","title":"Hint::Inserting a comment border"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#transposing-swap","text":"Key Description x p or SPC x t c transpose the current character with the next character SPC x t w transpose the current character with the previous character SPC x t l transpose current line with previous line SPC k tf transpose expression","title":"Transposing / swap"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#comments-works-for-all-major-modes","text":"SPC ; ; or g c c to comment out the current line SPC ; or g c to comment out the currently selected region M-; creates a ;; comment on an empty line, or ; at the end of the text of the current line. To comment multiple lines you can use the repeat command style, especially useful if you are using relative line numbers. g c 3 j will comment the current line and the following two lines below. Comment in reverse using g c 3 k . In Visual state, v , select the lines you wish to comment and use g c to comment all the marked lines. Partially marked lines are not commented. http://spacemacs.org/layers/+vim/evil-commentary/README.html","title":"Comments - works for all major modes"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#working-with-buffers","text":"To work with files in Emacs, they are first loaded into a Buffer . So when you open a file with M-x find file or SPC f f a new buffer is created so you can manage that file. Buffers are displayed in a window and you can change the window to show any of the current buffers. Here are the most commonly used buffer commands Key Command Description SPC b b helm-mini List current buffers SPC b d kill-this-buffer Kill current buffer SPC b h home Switch to Spacemacs home page SPC b n next-buffer Switch to next buffer SPC b p previous-buffer Switch to previous buffer SPC b s switch-to-scratch-buffer Switch to the scratch buffer SPC b Y copy-whole-buffer-to-clipboard Copy current buffer contents to kill ring See the full buffer menu via SPC b","title":"Working with Buffers"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#managing-files","text":"Key Description SPC f c copy file - save current buffer with a new file name SPC f R change file name of current buffer SPC f y n yank file name of current buffer Also consider using treemacs and projectile","title":"Managing Files"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#quit-or-restart-emacs","text":"I recommend using the Spacemacs menu from normal mode to quit / restart Spacemacs. Key Action SPC q q Quit Spacemacs SPS q r Restart Spacemacs keeping current window and buffer layout SPS q R Restart Spacemacs","title":"Quit or Restart Emacs"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hintwork-in-progress-sorry","text":"The rest of this section is work in progress and a little messy.","title":"Hint::Work in progress - sorry"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#classic-vim-commands","text":"","title":"Classic Vim commands"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#todoreference-section","text":"The classic vim commands are also available, however, I dont think they are as nice to learn. Adding as reference for those used to Vim already and would miss them.","title":"Todo::Reference section"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#substitution","text":"key Action :s/old/new substitute new for the first old pattern :s/old/new/g substitute new for all 'old's on a line :#,#s/old/new/g substitute phrases between two line #'s type :%s/old/new/g substitute all occurrences in the file :%s/old/new/gc as above, asking for confirmation each time","title":"Substitution"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#external-commands","text":"You can run external commands using :! followed by a command. For example: :!ls - run the ls command Spacemacs shell can be configured to pop-up a shell buffer to run commands from the directory of the current buffer.","title":"External commands"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#spelling-checking","text":"As you are typing in any(?) buffer then Spacemacs is checking your spelling as you type. If you type a word that Spacemacs does not recognise then that word is underscored in red. To correct a spelling: Move to the word that is incorrectly spelt SPC S c to change the word and show a list of suggested words Either type in a new spelling or use C-j and C-k keys to move down and back up the list of words, using RET to select that word.","title":"Spelling Checking"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#scrolling","text":"In evil command mode you can scroll just the text using the classic vi bindings. This does not scroll the cursor unless the cursor hist the top or bottom of the window, in which case the cursor stays at that window boundary. C-y - scroll down C-e - scroll text up","title":"Scrolling"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#jump-around","text":"SPC j i shows imenu that lists all the def and defn expressions in the current buffer, allowing you to jump to one of these definitions directly by typing its name or using C-j and C-k to select the name and pressing RET to jump to the name in the buffer SPC j l labels each line of the buffer with a short, unique character code. By entering the character code you are taken directly to the specific line. This is the avy goto line function and this works on all visible buffers by default, although it can be just shown on the current buffer (TODO: how is this set).","title":"Jump around"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#searching_1","text":"Search with SPC /","title":"Searching"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/","text":"Vim editing for Clojure developers \u03bb\ufe0e Vim keybindings that drive Vim editing tools that are common for developers Comments and Commenting code \u03bb\ufe0e g c c comment line SPC ; ; comment current line SPC ; p comment current paragraph / code structure v (select) g c comment region g c 9 j comment 9 lines from current, downwards SPC v v g c select line and comment it Simulated structural editing with surround \u03bb\ufe0e Keybinding Description v s ] surround with [characters] without spaces v s [ surround with [ characters ] without spaces c s ( [ change surrounding from ( to [ c i ( change in ( c a ( change \u201caround\u201d ( % jump forwards to next paren, further % toggles between open and close parens. x p transpose characters (cut current, paste after) multi-replace with iedit and narrowing \u03bb\ufe0e SPC v select whatever you're at. Press v to widen region and S-v to narrow region. zt , zz , and zb to pull the current line to the top/middle/bottom of the screen. [count]G jump to line number gf jump to file name under the cursor - try this in the summary.md file C-] Jump to definition of keyword under the cursor Code \u03bb\ufe0e g D open definition in another window = (code-aware indenting) operator. Nice with the ap (a paragraph) text object. code folding \u03bb\ufe0e zc and zo are useful to close and open folds, which can be a nice way of focusing on certain pieces of code. Transposing characters and sections \u03bb\ufe0e x p simple transpose of the current and next character M-t transpose words before and after cursor position { , } motions jump to next and previous empty lines. This motion makes it simple to rearrange paragraphs { d } will kill the paragraph (or multiple paragraphs) { will jump to the start of the previous paragraph p pastes the killed paragraph before the current paragraph > and < (indent and dedent) operators, useful with the aforementioned } / { motions.","title":"Vim editing for Clojure developers"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#vim-editing-for-clojure-developers","text":"Vim keybindings that drive Vim editing tools that are common for developers","title":"Vim editing for Clojure developers"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#comments-and-commenting-code","text":"g c c comment line SPC ; ; comment current line SPC ; p comment current paragraph / code structure v (select) g c comment region g c 9 j comment 9 lines from current, downwards SPC v v g c select line and comment it","title":"Comments and Commenting code"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#simulated-structural-editing-with-surround","text":"Keybinding Description v s ] surround with [characters] without spaces v s [ surround with [ characters ] without spaces c s ( [ change surrounding from ( to [ c i ( change in ( c a ( change \u201caround\u201d ( % jump forwards to next paren, further % toggles between open and close parens. x p transpose characters (cut current, paste after)","title":"Simulated structural editing with surround"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#multi-replace-with-iedit-and-narrowing","text":"SPC v select whatever you're at. Press v to widen region and S-v to narrow region. zt , zz , and zb to pull the current line to the top/middle/bottom of the screen. [count]G jump to line number gf jump to file name under the cursor - try this in the summary.md file C-] Jump to definition of keyword under the cursor","title":"multi-replace with iedit and narrowing"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#code","text":"g D open definition in another window = (code-aware indenting) operator. Nice with the ap (a paragraph) text object.","title":"Code"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#code-folding","text":"zc and zo are useful to close and open folds, which can be a nice way of focusing on certain pieces of code.","title":"code folding"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#transposing-characters-and-sections","text":"x p simple transpose of the current and next character M-t transpose words before and after cursor position { , } motions jump to next and previous empty lines. This motion makes it simple to rearrange paragraphs { d } will kill the paragraph (or multiple paragraphs) { will jump to the start of the previous paragraph p pastes the killed paragraph before the current paragraph > and < (indent and dedent) operators, useful with the aforementioned } / { motions.","title":"Transposing characters and sections"},{"location":"spacemacs-basics/working-with-projects/","text":"Working with Projects \u03bb\ufe0e Techniques to work specifically with Clojure projects as well as any concept of a project, e.g. a local git repository or using .projectile file to manually define a project. Spacemacs gives you several options for managing the files in your project and you will use commands from the following menus File menu \u03bb\ufe0e Find, copy, delete, rename, sudo-edit, bookmark and browse files. Read Open and Create files section for more details. Buffer menu \u03bb\ufe0e list, show and delete buffers. A buffer is a container for file content and any other text and images (if images support is included in your Emacs install) Read the Managing Buffers section for more details. Project (Projectile) menu \u03bb\ufe0e find files and search/replace text in the current project (e.g. local git project or arbitrary .projectile defined project) and many other project specific functions. Read the Projectile section for more details. Layouts \u03bb\ufe0e Layouts providing an easy way to group buffers together, for projects or any arbitrary grouping you decide. Read the Layouts and Workspaces section for more details. File browsers / managers \u03bb\ufe0e Treemacs and Ranger are file managers that help you browse through files and directories.","title":"Working with Projects"},{"location":"spacemacs-basics/working-with-projects/#working-with-projects","text":"Techniques to work specifically with Clojure projects as well as any concept of a project, e.g. a local git repository or using .projectile file to manually define a project. Spacemacs gives you several options for managing the files in your project and you will use commands from the following menus","title":"Working with Projects"},{"location":"spacemacs-basics/working-with-projects/#file-menu","text":"Find, copy, delete, rename, sudo-edit, bookmark and browse files. Read Open and Create files section for more details.","title":"File menu"},{"location":"spacemacs-basics/working-with-projects/#buffer-menu","text":"list, show and delete buffers. A buffer is a container for file content and any other text and images (if images support is included in your Emacs install) Read the Managing Buffers section for more details.","title":"Buffer menu"},{"location":"spacemacs-basics/working-with-projects/#project-projectile-menu","text":"find files and search/replace text in the current project (e.g. local git project or arbitrary .projectile defined project) and many other project specific functions. Read the Projectile section for more details.","title":"Project (Projectile) menu"},{"location":"spacemacs-basics/working-with-projects/#layouts","text":"Layouts providing an easy way to group buffers together, for projects or any arbitrary grouping you decide. Read the Layouts and Workspaces section for more details.","title":"Layouts"},{"location":"spacemacs-basics/working-with-projects/#file-browsers-managers","text":"Treemacs and Ranger are file managers that help you browse through files and directories.","title":"File browsers / managers"},{"location":"spacemacs-basics/working-with-projects/dird/","text":"dired Emacs directory editor \u03bb\ufe0e A Dired buffer displays the contents of a single directory or listings of one or more sub-directories. A Dired buffer can display an arbitrary set of files and directories from any file systems. dired mode is built-in to Emacs (version 23 onward) SPC f f and select the . root of a directory to open a directory listing in dired SPC f j or SPC j d to jump to the current buffer in a dired buffer. SPC j D opens dired buffer in a different window. Use Evil style navigation and editing with the dired buffer SPC SPC wdired-change-to-wdired-mode WDired mode (writable dired) enables editing of the dired buffer. Names of the files in the buffer, the target of symbolic links and the permission bits of the files can be changed. Dired commands \u03bb\ufe0e m mark files to run an action across multiple files in the listing key Action * mark / unmark meun R rename a file C copy file + make directory m mark files u unmark d flag for deletion s sort menu x execute deletions ^ or - move up a directory Rename files with WDired mode \u03bb\ufe0e The names in a dired directory listing can be renamed by editing the file names in the dired buffer and committing the changes. SPC f f and select the . root of a directory to open a directory listing in dired (or switch to an open dired buffer). SPC SPC wdired-change-to-wdired-mode to make the dired buffer writable. The cursor enters insert mode and is placed on the top entry of the directory listing. Use Evil style editing to manage changes to the file names. Some Evil tools and Multiple cursors are not available in the WDired mode, so experience with Evil basics can be very useful. C-c C-c to commit the changes and update all the affected files. C-c Esc to cancel all changes. Hint::Small changes often \u03bb\ufe0e Undo is not available in this mode, so make simple changes and save the results as soon as possible. Emacs macro for multiple file renames \u03bb\ufe0e Record a macro to rename a file and run the macro over multiple lines in the dired buffer in WDired mode. q a in normal mode will start recording all following key bindings q again to stop recording and save all the key bindings as a macro bound to the a character. Any character other than q can be used as the macro name and Practicalli finds a , z and x as convenient characters for macros. @ a to run the macro and repeat the same change 24 @ a to run the macro on the next 24 lines including the current line, repeating the same change on multiple file names in the dired buffer. Hint::Reset cursor position at end of macro \u03bb\ufe0e If using positional aspects for changes made by the macro ensure the cursor is moved back to the correct starting place just before ending the macro recording. Reference: Mastering Emacs: Macros","title":"dired Emacs directory editor"},{"location":"spacemacs-basics/working-with-projects/dird/#dired-emacs-directory-editor","text":"A Dired buffer displays the contents of a single directory or listings of one or more sub-directories. A Dired buffer can display an arbitrary set of files and directories from any file systems. dired mode is built-in to Emacs (version 23 onward) SPC f f and select the . root of a directory to open a directory listing in dired SPC f j or SPC j d to jump to the current buffer in a dired buffer. SPC j D opens dired buffer in a different window. Use Evil style navigation and editing with the dired buffer SPC SPC wdired-change-to-wdired-mode WDired mode (writable dired) enables editing of the dired buffer. Names of the files in the buffer, the target of symbolic links and the permission bits of the files can be changed.","title":"dired Emacs directory editor"},{"location":"spacemacs-basics/working-with-projects/dird/#dired-commands","text":"m mark files to run an action across multiple files in the listing key Action * mark / unmark meun R rename a file C copy file + make directory m mark files u unmark d flag for deletion s sort menu x execute deletions ^ or - move up a directory","title":"Dired commands"},{"location":"spacemacs-basics/working-with-projects/dird/#rename-files-with-wdired-mode","text":"The names in a dired directory listing can be renamed by editing the file names in the dired buffer and committing the changes. SPC f f and select the . root of a directory to open a directory listing in dired (or switch to an open dired buffer). SPC SPC wdired-change-to-wdired-mode to make the dired buffer writable. The cursor enters insert mode and is placed on the top entry of the directory listing. Use Evil style editing to manage changes to the file names. Some Evil tools and Multiple cursors are not available in the WDired mode, so experience with Evil basics can be very useful. C-c C-c to commit the changes and update all the affected files. C-c Esc to cancel all changes.","title":"Rename files with WDired mode"},{"location":"spacemacs-basics/working-with-projects/dird/#hintsmall-changes-often","text":"Undo is not available in this mode, so make simple changes and save the results as soon as possible.","title":"Hint::Small changes often"},{"location":"spacemacs-basics/working-with-projects/dird/#emacs-macro-for-multiple-file-renames","text":"Record a macro to rename a file and run the macro over multiple lines in the dired buffer in WDired mode. q a in normal mode will start recording all following key bindings q again to stop recording and save all the key bindings as a macro bound to the a character. Any character other than q can be used as the macro name and Practicalli finds a , z and x as convenient characters for macros. @ a to run the macro and repeat the same change 24 @ a to run the macro on the next 24 lines including the current line, repeating the same change on multiple file names in the dired buffer.","title":"Emacs macro for multiple file renames"},{"location":"spacemacs-basics/working-with-projects/dird/#hintreset-cursor-position-at-end-of-macro","text":"If using positional aspects for changes made by the macro ensure the cursor is moved back to the correct starting place just before ending the macro recording. Reference: Mastering Emacs: Macros","title":"Hint::Reset cursor position at end of macro"},{"location":"spacemacs-basics/working-with-projects/layouts/","text":"Layouts and Workspaces \u03bb\ufe0e Layouts provide an easy way to group buffers for a project or any arbitrary buffer grouping you wish. Workspaces define window arrangements within a particular layout. Working with buffers in a layout \u03bb\ufe0e SPC b b shows only the buffers for the current layout, making it easy to switch between them. SPC b B will show all buffers. SPC TAB will toggle between the previous buffer and current buffer, regardless of layout the previous buffer is in. Add (spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t) to the dotspacemacs-configuration-layers in your .spacemacs file to limit SPC TAB to buffers of the current layout. Managing Layouts \u03bb\ufe0e SPC l TAB switches to the previous layout, providing a quick way to jump between two projects actively being worked on. SPC l enters the layout transient state SPC l l lists the current layouts with a helm prompt to narrow the list. Entering a new name will prompt to create a new layout (perspective) The current layout name appears on the far left of the mode-line. SPC l s saves the current layouts to a file, SPC l L loads a layout from a file. Layouts are kept when restarting Spacemacs with SPC q r and can be configured to auto-resume when starting Emacs. dotspacemacs-auto-resume-layouts t SPC l x kill current layout with its buffers, SPC l d deletes the layout and keeps the buffers available SPC l ? will show the help menu Global layout \u03bb\ufe0e SPC b b in the default layout shows all open buffers as this layout has global scope. This layout is useful to check if there are unsaved files or for killing unwanted or temporary buffers. M-SPC when helm popup is active opens the helm transient state . t will mark (tag) an item in the list, T will mark all items. M-D will kill all marked buffers. Workspaces \u03bb\ufe0e Workspaces define multiple window arrangements in a given layout. The active workspace number is placed before the window number, i.e \u278a|\u278d, the fourth window of the first workspace. Any new layout comes with a default workspace, \u278a|\u278a. Switching to a workspace that does not exist in the current layout will create a new one. SPC l w R gives a name to the current workspace. Pressing a workspace number will activate it or create a new one. Ctrl-<number> will preview a workspace. TAB makes the previous workspace activate. SPC l w ? to toggle the full help. There are also some handy globally available key bindings related to workspaces: Key Binding Description gt go to next workspace gT go to previous workspace SPC b W go to workspace and window by buffer References \u03bb\ufe0e spacemacs-layout layer on GitHub develop.spacemacs.org layer description Spacemacs documentation Eyebrowse GitHub repository","title":"Layouts and Workspaces"},{"location":"spacemacs-basics/working-with-projects/layouts/#layouts-and-workspaces","text":"Layouts provide an easy way to group buffers for a project or any arbitrary buffer grouping you wish. Workspaces define window arrangements within a particular layout.","title":"Layouts and Workspaces"},{"location":"spacemacs-basics/working-with-projects/layouts/#working-with-buffers-in-a-layout","text":"SPC b b shows only the buffers for the current layout, making it easy to switch between them. SPC b B will show all buffers. SPC TAB will toggle between the previous buffer and current buffer, regardless of layout the previous buffer is in. Add (spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t) to the dotspacemacs-configuration-layers in your .spacemacs file to limit SPC TAB to buffers of the current layout.","title":"Working with buffers in a layout"},{"location":"spacemacs-basics/working-with-projects/layouts/#managing-layouts","text":"SPC l TAB switches to the previous layout, providing a quick way to jump between two projects actively being worked on. SPC l enters the layout transient state SPC l l lists the current layouts with a helm prompt to narrow the list. Entering a new name will prompt to create a new layout (perspective) The current layout name appears on the far left of the mode-line. SPC l s saves the current layouts to a file, SPC l L loads a layout from a file. Layouts are kept when restarting Spacemacs with SPC q r and can be configured to auto-resume when starting Emacs. dotspacemacs-auto-resume-layouts t SPC l x kill current layout with its buffers, SPC l d deletes the layout and keeps the buffers available SPC l ? will show the help menu","title":"Managing Layouts"},{"location":"spacemacs-basics/working-with-projects/layouts/#global-layout","text":"SPC b b in the default layout shows all open buffers as this layout has global scope. This layout is useful to check if there are unsaved files or for killing unwanted or temporary buffers. M-SPC when helm popup is active opens the helm transient state . t will mark (tag) an item in the list, T will mark all items. M-D will kill all marked buffers.","title":"Global layout"},{"location":"spacemacs-basics/working-with-projects/layouts/#workspaces","text":"Workspaces define multiple window arrangements in a given layout. The active workspace number is placed before the window number, i.e \u278a|\u278d, the fourth window of the first workspace. Any new layout comes with a default workspace, \u278a|\u278a. Switching to a workspace that does not exist in the current layout will create a new one. SPC l w R gives a name to the current workspace. Pressing a workspace number will activate it or create a new one. Ctrl-<number> will preview a workspace. TAB makes the previous workspace activate. SPC l w ? to toggle the full help. There are also some handy globally available key bindings related to workspaces: Key Binding Description gt go to next workspace gT go to previous workspace SPC b W go to workspace and window by buffer","title":"Workspaces"},{"location":"spacemacs-basics/working-with-projects/layouts/#references","text":"spacemacs-layout layer on GitHub develop.spacemacs.org layer description Spacemacs documentation Eyebrowse GitHub repository","title":"References"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/","text":"Buffer management \u03bb\ufe0e Buffers manage the display of files and other information. Opening a file replaces the content in the current buffer. Listing open buffers \u03bb\ufe0e SPC b b to select a buffer from a list of buffers A helm pop-up window appears at the bottom listing all open buffers. The helm popup window also shows recently opened buffers. Using the buffer menu, SPC b b you can switch to any buffer currently open, especially useful for those buffers that are not currently being shown in a window. You can also delete any of the currently open buffers when you no longer need them. Buffer Transient State \u03bb\ufe0e SPC b . launches buffer transient state to manage buffers using single character keybindings. With a single key you can cycle quickly through all open buffers, forward with n or backwards with either N or p . Use d to kill the current buffer. Commonly used keybindings \u03bb\ufe0e Vim Normal Description SPC b . Enter buffer transient state b list open buffers h switch to home buffer m switch to home message n Show next buffer N or p Show previous buffer q Quit the buffer transient state Kill buffers using buffer menu \u03bb\ufe0e Use helm-mini menu when you have a large number of buffers to delete. SPC b b to open the buffer helm-mini menu C-j and C-k to navigate buffer names in the list of open buffers C-SPC to mark a buffer for deletion M-D deletes all the marked buffers.","title":"Buffer management"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#buffer-management","text":"Buffers manage the display of files and other information. Opening a file replaces the content in the current buffer.","title":"Buffer management"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#listing-open-buffers","text":"SPC b b to select a buffer from a list of buffers A helm pop-up window appears at the bottom listing all open buffers. The helm popup window also shows recently opened buffers. Using the buffer menu, SPC b b you can switch to any buffer currently open, especially useful for those buffers that are not currently being shown in a window. You can also delete any of the currently open buffers when you no longer need them.","title":"Listing open buffers"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#buffer-transient-state","text":"SPC b . launches buffer transient state to manage buffers using single character keybindings. With a single key you can cycle quickly through all open buffers, forward with n or backwards with either N or p . Use d to kill the current buffer.","title":"Buffer Transient State"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#commonly-used-keybindings","text":"Vim Normal Description SPC b . Enter buffer transient state b list open buffers h switch to home buffer m switch to home message n Show next buffer N or p Show previous buffer q Quit the buffer transient state","title":"Commonly used keybindings"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#kill-buffers-using-buffer-menu","text":"Use helm-mini menu when you have a large number of buffers to delete. SPC b b to open the buffer helm-mini menu C-j and C-k to navigate buffer names in the list of open buffers C-SPC to mark a buffer for deletion M-D deletes all the marked buffers.","title":"Kill buffers using buffer menu"},{"location":"spacemacs-basics/working-with-projects/managing-windows/","text":"Managing Windows \u03bb\ufe0e Windows in Spacemacs allow you to organise your buffers, splitting horizontally and vertically with multiple rows and columns. Windows can also be moved around and resized without resorting to using the mouse. SPC w is the windows menu. SPC w u will undo a change to the windows. Golden Ratio - added focus for multiple windows \u03bb\ufe0e SPC t g toggles golden ratio mode Golden ratio automatically makes the active window the largest in the frame. Chainging windows will resize all windows to make the new active window the largest Windows Transient menu \u03bb\ufe0e SPC W . opens the Windows Transient state menu, enabling single character keybindings for window commands, simplifying multiple commands.","title":"Managing Windows"},{"location":"spacemacs-basics/working-with-projects/managing-windows/#managing-windows","text":"Windows in Spacemacs allow you to organise your buffers, splitting horizontally and vertically with multiple rows and columns. Windows can also be moved around and resized without resorting to using the mouse. SPC w is the windows menu. SPC w u will undo a change to the windows.","title":"Managing Windows"},{"location":"spacemacs-basics/working-with-projects/managing-windows/#golden-ratio-added-focus-for-multiple-windows","text":"SPC t g toggles golden ratio mode Golden ratio automatically makes the active window the largest in the frame. Chainging windows will resize all windows to make the new active window the largest","title":"Golden Ratio - added focus for multiple windows"},{"location":"spacemacs-basics/working-with-projects/managing-windows/#windows-transient-menu","text":"SPC W . opens the Windows Transient state menu, enabling single character keybindings for window commands, simplifying multiple commands.","title":"Windows Transient menu"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/","text":"Open and creating Files (and directories) \u03bb\ufe0e {% youtube %} https://www.youtube.com/embed/oOzzkUjtgZc?autoplay=1loop=1 Opening a File \u03bb\ufe0e Using the File menu you can open files from anywhere on your file space. New files and directories can also be created. Find File , SPC f f will open a file from anywhere on the file system. A helm pop-up window appears at the bottom listing directories and files from the current directory. As you type the name you are looking for, the list of matching directory and file names narrows to just those that match. Keybindings Description TAB select highlighted directory / complete filename C-h navigate to parent directory C-y paste kill ring into file path C-j Move cursor down list of directories & filenames C-k Move cursor up list of directories & filenames Create a new file (and directory) \u03bb\ufe0e A new file (and directories) can also be created using SPC f f . Simply enter the full path and name of the new file. You are prompted to confirm that you want a new file created. When you save the file, SPC f s you are prompted to create any directories required. Auto-renaming Files for kebab-case namespace \u03bb\ufe0e When you create a new file for a namespace that has multiple words, then convention is to use kebab-case to separate the words. However, due to a limitation with the Java Virtual Machine class loader, filenames should not include dashes, rather they should use underscore characters instead. So when you create a new file for a kebab-case namespace, Spacemacs will ask if you want to change the filename to use underscores for the dashes in the name. Say yes to keep the Java class loader happy. TODO: gif of creating a new file - use kebab-case filename to show auto-renaming. Reference \u03bb\ufe0e Vim Normal Emacs Command SPC f f M-m f f spacemacs/helm-find-file In find file, the following key bindings are available TAB - complete or narrow the name of the file or open a matching directory C-h - navigate to parent directory C-j - move down list of files & directories C-k - move up list of files & directories RET - open a file (or dired if a directory) Hint::Creating files and directories \u03bb\ufe0e When creating a new file in a new directory, you can simply type in the full path and file name and Spacemacs will prompt you to confirm the creation of the new directory and the file name.","title":"Open and creating Files (and directories)"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#open-and-creating-files-and-directories","text":"{% youtube %} https://www.youtube.com/embed/oOzzkUjtgZc?autoplay=1loop=1","title":"Open and creating Files (and directories)"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#opening-a-file","text":"Using the File menu you can open files from anywhere on your file space. New files and directories can also be created. Find File , SPC f f will open a file from anywhere on the file system. A helm pop-up window appears at the bottom listing directories and files from the current directory. As you type the name you are looking for, the list of matching directory and file names narrows to just those that match. Keybindings Description TAB select highlighted directory / complete filename C-h navigate to parent directory C-y paste kill ring into file path C-j Move cursor down list of directories & filenames C-k Move cursor up list of directories & filenames","title":"Opening a File"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#create-a-new-file-and-directory","text":"A new file (and directories) can also be created using SPC f f . Simply enter the full path and name of the new file. You are prompted to confirm that you want a new file created. When you save the file, SPC f s you are prompted to create any directories required.","title":"Create a new file (and directory)"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#auto-renaming-files-for-kebab-case-namespace","text":"When you create a new file for a namespace that has multiple words, then convention is to use kebab-case to separate the words. However, due to a limitation with the Java Virtual Machine class loader, filenames should not include dashes, rather they should use underscore characters instead. So when you create a new file for a kebab-case namespace, Spacemacs will ask if you want to change the filename to use underscores for the dashes in the name. Say yes to keep the Java class loader happy. TODO: gif of creating a new file - use kebab-case filename to show auto-renaming.","title":"Auto-renaming Files for kebab-case namespace"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#reference","text":"Vim Normal Emacs Command SPC f f M-m f f spacemacs/helm-find-file In find file, the following key bindings are available TAB - complete or narrow the name of the file or open a matching directory C-h - navigate to parent directory C-j - move down list of files & directories C-k - move up list of files & directories RET - open a file (or dired if a directory)","title":"Reference"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#hintcreating-files-and-directories","text":"When creating a new file in a new directory, you can simply type in the full path and file name and Spacemacs will prompt you to confirm the creation of the new directory and the file name.","title":"Hint::Creating files and directories"},{"location":"spacemacs-basics/working-with-projects/projectile/","text":"Projectile - project specific commands \u03bb\ufe0e SPC p opens the projectile menu allowing you to run commands relative to the project of the active buffer. What is a Projectile project \u03bb\ufe0e A project can be one or more of the following things Git - a directory with the .git directory Language specific - e.g. a Clojure Leiningen project Projectile - any directory with a .projectile file Hint::Searching across multiple projects \u03bb\ufe0e Create an empty file called .projectile in the root of the directory that contains all your projects. SPC / in any project will now search through all files in all your projects. Remove the .projectile file when finished, to search through just the current project. Opening Files from the same project \u03bb\ufe0e SPC p f to open a file in the current project that you know the name of. All project files are listed and as you type the file name the list of names is narrowed. Use C-k and C-j keybindings to move up and down the list respectively. This is a good approach if you know the name but not the directory path of the file. Use SPC f f if you know the directory but not the name of the file you want. Switching between buffers \u03bb\ufe0e SPC p b gives a helm popup list of currently open buffers for the current project. Entering a buffer name pattern narrows that list and C-k and C-j keybindings move up and down the list respectively. Toggling between test and code files \u03bb\ufe0e SPC p a toggles the buffer between the test and code files in your project. In Clojure this is based on the corresponding namespaces, so SPC p a would toggle between these two files. src/project-name/component/clojure-code.clj test/project-name/component/clojure-code.clj Keybindings / commands projectile-toggle-between-implementation-and-test Cider also has a command to do this: cider-test-default-test-ns-fn Allegedly, this command is not as effective as the projectile command. Project search and replace \u03bb\ufe0e SPC p % starts projectile-grep, prompting for the search term and what text to use to replace it. Each buffer containing a matching search text will be opened in turn and each matching instance of the text will be jumped to for confirmation that it should be replaced. y to replace the current match and jump to the next match n to skip replacement of the current match and jump to the next match. Hint::Helm-ag and iedit more effective for larger changes \u03bb\ufe0e Use Evil tools to replace text across projects (refactor), especially for large numbers of changes. Only matching lines are displayed so it is easier to see how many places you are making the change in.","title":"Projectile - project specific commands"},{"location":"spacemacs-basics/working-with-projects/projectile/#projectile-project-specific-commands","text":"SPC p opens the projectile menu allowing you to run commands relative to the project of the active buffer.","title":"Projectile - project specific commands"},{"location":"spacemacs-basics/working-with-projects/projectile/#what-is-a-projectile-project","text":"A project can be one or more of the following things Git - a directory with the .git directory Language specific - e.g. a Clojure Leiningen project Projectile - any directory with a .projectile file","title":"What is a Projectile project"},{"location":"spacemacs-basics/working-with-projects/projectile/#hintsearching-across-multiple-projects","text":"Create an empty file called .projectile in the root of the directory that contains all your projects. SPC / in any project will now search through all files in all your projects. Remove the .projectile file when finished, to search through just the current project.","title":"Hint::Searching across multiple projects"},{"location":"spacemacs-basics/working-with-projects/projectile/#opening-files-from-the-same-project","text":"SPC p f to open a file in the current project that you know the name of. All project files are listed and as you type the file name the list of names is narrowed. Use C-k and C-j keybindings to move up and down the list respectively. This is a good approach if you know the name but not the directory path of the file. Use SPC f f if you know the directory but not the name of the file you want.","title":"Opening Files from the same project"},{"location":"spacemacs-basics/working-with-projects/projectile/#switching-between-buffers","text":"SPC p b gives a helm popup list of currently open buffers for the current project. Entering a buffer name pattern narrows that list and C-k and C-j keybindings move up and down the list respectively.","title":"Switching between buffers"},{"location":"spacemacs-basics/working-with-projects/projectile/#toggling-between-test-and-code-files","text":"SPC p a toggles the buffer between the test and code files in your project. In Clojure this is based on the corresponding namespaces, so SPC p a would toggle between these two files. src/project-name/component/clojure-code.clj test/project-name/component/clojure-code.clj Keybindings / commands projectile-toggle-between-implementation-and-test Cider also has a command to do this: cider-test-default-test-ns-fn Allegedly, this command is not as effective as the projectile command.","title":"Toggling between test and code files"},{"location":"spacemacs-basics/working-with-projects/projectile/#project-search-and-replace","text":"SPC p % starts projectile-grep, prompting for the search term and what text to use to replace it. Each buffer containing a matching search text will be opened in turn and each matching instance of the text will be jumped to for confirmation that it should be replaced. y to replace the current match and jump to the next match n to skip replacement of the current match and jump to the next match.","title":"Project search and replace"},{"location":"spacemacs-basics/working-with-projects/projectile/#hinthelm-ag-and-iedit-more-effective-for-larger-changes","text":"Use Evil tools to replace text across projects (refactor), especially for large numbers of changes. Only matching lines are displayed so it is easier to see how many places you are making the change in.","title":"Hint::Helm-ag and iedit more effective for larger changes"},{"location":"spacemacs-basics/working-with-projects/ranger/","text":"Ranger file manager \u03bb\ufe0e Ranger is a very fast and lightweight file manager that is great for previewing files without explicitly opening them. Ranger is very well suited to Vim keybindings too. Ranger is not part of Spacemacs by default, so the simplest way is to add the ranger layer . Add ranger layer to Spacemacs \u03bb\ufe0e Edit your ~./spacemacs file and in the ... section add the following layer ( ranger :variables ranger-show-preview t ranger-show-hidden t ranger-cleanup-eagerly t ranger-cleanup-on-disable t ranger-ignored-extensions ' ( \"mkv\" \"flv\" \"iso\" \"mp4\" )) This layer definition will add the ranger package and set some recommended variables: * preview files when the cursor is on a file name in ranger * show hidden files (dot files) * clean up buffers when closing ranger * file name extensions to ignore (multi-media files) Basic usage \u03bb\ufe0e Keybinding Description SPC a r Open ranger in current buffer directory q Quit ranger j Move down the current list / preview screen k Move up the current list / preview screen l Jump into currently selected child directory / or open previewed file h Up to the parent directory File management \u03bb\ufe0e Keybinding Description r revert buffer R rename current file or directory D delete ... yy copy pp paste f search for file names i toggle showing literal / full-text previews zh toggle dot files o sort options H search through history z- or z+ reduce / increase parents C-SPC mark a file or directory v toggle mark V visually select lines ;C copy / move directory ;+ create directory SPC a d deer (minimal ranger window in current directory) C-j (ranger) scroll preview window down C-k (ranger) scroll preview window up S (ranger) enter shell","title":"Ranger file manager"},{"location":"spacemacs-basics/working-with-projects/ranger/#ranger-file-manager","text":"Ranger is a very fast and lightweight file manager that is great for previewing files without explicitly opening them. Ranger is very well suited to Vim keybindings too. Ranger is not part of Spacemacs by default, so the simplest way is to add the ranger layer .","title":"Ranger file manager"},{"location":"spacemacs-basics/working-with-projects/ranger/#add-ranger-layer-to-spacemacs","text":"Edit your ~./spacemacs file and in the ... section add the following layer ( ranger :variables ranger-show-preview t ranger-show-hidden t ranger-cleanup-eagerly t ranger-cleanup-on-disable t ranger-ignored-extensions ' ( \"mkv\" \"flv\" \"iso\" \"mp4\" )) This layer definition will add the ranger package and set some recommended variables: * preview files when the cursor is on a file name in ranger * show hidden files (dot files) * clean up buffers when closing ranger * file name extensions to ignore (multi-media files)","title":"Add ranger layer to Spacemacs"},{"location":"spacemacs-basics/working-with-projects/ranger/#basic-usage","text":"Keybinding Description SPC a r Open ranger in current buffer directory q Quit ranger j Move down the current list / preview screen k Move up the current list / preview screen l Jump into currently selected child directory / or open previewed file h Up to the parent directory","title":"Basic usage"},{"location":"spacemacs-basics/working-with-projects/ranger/#file-management","text":"Keybinding Description r revert buffer R rename current file or directory D delete ... yy copy pp paste f search for file names i toggle showing literal / full-text previews zh toggle dot files o sort options H search through history z- or z+ reduce / increase parents C-SPC mark a file or directory v toggle mark V visually select lines ;C copy / move directory ;+ create directory SPC a d deer (minimal ranger window in current directory) C-j (ranger) scroll preview window down C-k (ranger) scroll preview window up S (ranger) enter shell","title":"File management"},{"location":"spacemacs-basics/working-with-projects/searching-projects/","text":"Searching Projects \u03bb\ufe0e SPC / and SPC s p ( spacemacs/helm-project-smart-do-search ) enables a a fuzzy logic search through the content of all the files in the current project. A helm pop-up displays, typing a pattern shows matching lines from all the files in the project. Use C-j and C-k to move down and up through the search results. RET selects the search result and shows the file and line in the current buffer. SPC s l will repeat the last search M-n and M-p will scroll through the search patterns whenever the search pop-up window is open Hint::Replacing text across a project \u03bb\ufe0e Use search results to replace text across a project . Open files from search results \u03bb\ufe0e With a search open, C-c C-f enables helm-follow . When moving through results with C-j and C-k the corresponding file is opened in the current buffer. Set helm-follow-mode-persistent to true in .spacemacs to remember the use of C-c C-f follow mode for helm actions. ( helm :variables helm-follow-mode-persistent t ) Search tool binary \u03bb\ufe0e Searching requires an external tool to be available on your system PATH. Ripgrep is the recommended search tool, although silver searcher (ag) is a viable alternative. Using grep is noticeably slower and has fewer options for searching. Ripgrep install instructions silver searcher (ag) Ripgrep search tool options \u03bb\ufe0e Option flags can be passed to the search tool binary to tailor the results returned in the helm-ag pop-up window. The option flags can be used before or after the search pattern. SPC h m rg shows the man page for ripgrep which explains the options of that search tool. Replace rg with the command line name of the search tool binary installed. Including options without their correct argument will show a warning, e.g. the -g option without a glob pattern or -A without a number. Once the option has a valid value the error should be replaced by search results. Searching specific files \u03bb\ufe0e Include or exclude specific files by their names or filename extensions. Use the -g option for a filename to search (globbing), or -g! for a filename to ignore. -g*.clj map shows only results of searching for map from files ending in .clj -g!*.md map will search for map for all files except those ending in .md Showing more lines for each match \u03bb\ufe0e -A option for ripgrep is used to show a number of lines after each match of the pattern. -A4 will show the 4 additional lines after the line containing a matching pattern. If there are multiple pattern matches in the same file within the scope of extra lines, then contiguous lines are shown with 4 lines after the final pattern line. SPC / with a pattern of -A4 layout will show each line containing the pattern layout and 4 lines after it. This option can also be combined with the -g option above. Example search patterns \u03bb\ufe0e Additional search patterns that work with ripgrep or ag . -G*time - search for the word \"time\" in all files -G*time -g*.clj - search for the word \"time\" in .clj files only -tclojure time - search for \"time\" in all .{clj,cljs,cljc} files uno\\ duo\\ tre - search for the string \"uno duo tre\" -C5 foo - search for \"foo\" but show 5 lines of context before and after the match (?:^|[^\\w-])time(?:[^\\w-]|$) - search for \"time\" even in kebab-case words. i.e. search for the full word \"time\" including \"-\" to be a word character Ripgrep documentation has many regular expression examples Searching hidden files \u03bb\ufe0e Searching a project using SPC / and SPC s p will ignore hidden files, those that start with . -- --hidden or -- -uu after the search pattern to include hidden files in the search For example, to search for the pattern scissors scissors -- --hidden Hint::Searching hidden files may slow searching \u03bb\ufe0e Ripgrep configuration and arguments \u03bb\ufe0e Define an environment variable called RIPGREP_CONFIG_PATH set to the file name and path export RIPGREP_CONFIG_PATH=~/.config/ripgrep.config Argument Description -u don't respect .gitignore or .ignore files -uu same as -u and show hidden files -uuu same as -uu and search binary files --max-columns Maximum number of columns (Spacemacs default: 150) --glob=!git/* glob patters, ! excluded --smart-case Ignore case Ripgrep configuration file References \u03bb\ufe0e https://github.com/BurntSushi/ripgrep https://blog.burntsushi.net/ripgrep/","title":"Searching Projects"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#searching-projects","text":"SPC / and SPC s p ( spacemacs/helm-project-smart-do-search ) enables a a fuzzy logic search through the content of all the files in the current project. A helm pop-up displays, typing a pattern shows matching lines from all the files in the project. Use C-j and C-k to move down and up through the search results. RET selects the search result and shows the file and line in the current buffer. SPC s l will repeat the last search M-n and M-p will scroll through the search patterns whenever the search pop-up window is open","title":"Searching Projects"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#hintreplacing-text-across-a-project","text":"Use search results to replace text across a project .","title":"Hint::Replacing text across a project"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#open-files-from-search-results","text":"With a search open, C-c C-f enables helm-follow . When moving through results with C-j and C-k the corresponding file is opened in the current buffer. Set helm-follow-mode-persistent to true in .spacemacs to remember the use of C-c C-f follow mode for helm actions. ( helm :variables helm-follow-mode-persistent t )","title":"Open files from search results"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#search-tool-binary","text":"Searching requires an external tool to be available on your system PATH. Ripgrep is the recommended search tool, although silver searcher (ag) is a viable alternative. Using grep is noticeably slower and has fewer options for searching. Ripgrep install instructions silver searcher (ag)","title":"Search tool binary"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#ripgrep-search-tool-options","text":"Option flags can be passed to the search tool binary to tailor the results returned in the helm-ag pop-up window. The option flags can be used before or after the search pattern. SPC h m rg shows the man page for ripgrep which explains the options of that search tool. Replace rg with the command line name of the search tool binary installed. Including options without their correct argument will show a warning, e.g. the -g option without a glob pattern or -A without a number. Once the option has a valid value the error should be replaced by search results.","title":"Ripgrep search tool options"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#searching-specific-files","text":"Include or exclude specific files by their names or filename extensions. Use the -g option for a filename to search (globbing), or -g! for a filename to ignore. -g*.clj map shows only results of searching for map from files ending in .clj -g!*.md map will search for map for all files except those ending in .md","title":"Searching specific files"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#showing-more-lines-for-each-match","text":"-A option for ripgrep is used to show a number of lines after each match of the pattern. -A4 will show the 4 additional lines after the line containing a matching pattern. If there are multiple pattern matches in the same file within the scope of extra lines, then contiguous lines are shown with 4 lines after the final pattern line. SPC / with a pattern of -A4 layout will show each line containing the pattern layout and 4 lines after it. This option can also be combined with the -g option above.","title":"Showing more lines for each match"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#example-search-patterns","text":"Additional search patterns that work with ripgrep or ag . -G*time - search for the word \"time\" in all files -G*time -g*.clj - search for the word \"time\" in .clj files only -tclojure time - search for \"time\" in all .{clj,cljs,cljc} files uno\\ duo\\ tre - search for the string \"uno duo tre\" -C5 foo - search for \"foo\" but show 5 lines of context before and after the match (?:^|[^\\w-])time(?:[^\\w-]|$) - search for \"time\" even in kebab-case words. i.e. search for the full word \"time\" including \"-\" to be a word character Ripgrep documentation has many regular expression examples","title":"Example search patterns"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#searching-hidden-files","text":"Searching a project using SPC / and SPC s p will ignore hidden files, those that start with . -- --hidden or -- -uu after the search pattern to include hidden files in the search For example, to search for the pattern scissors scissors -- --hidden","title":"Searching hidden files"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#hintsearching-hidden-files-may-slow-searching","text":"","title":"Hint::Searching hidden files may slow searching"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#ripgrep-configuration-and-arguments","text":"Define an environment variable called RIPGREP_CONFIG_PATH set to the file name and path export RIPGREP_CONFIG_PATH=~/.config/ripgrep.config Argument Description -u don't respect .gitignore or .ignore files -uu same as -u and show hidden files -uuu same as -uu and search binary files --max-columns Maximum number of columns (Spacemacs default: 150) --glob=!git/* glob patters, ! excluded --smart-case Ignore case Ripgrep configuration file","title":"Ripgrep configuration and arguments"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#references","text":"https://github.com/BurntSushi/ripgrep https://blog.burntsushi.net/ripgrep/","title":"References"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/","text":"Tidying up buffers \u03bb\ufe0e Sometimes you want to close several buffers and not just the current buffer with SPC b d . SPC b b displays a list of open buffers in a popup window. M-SPC opens the Helm transient menu on the buffer popup window, allowing you to navigate using j and k keys. M-D will prompt you to kill the buffer the cursor is currently on. t will mark the buffer the cursor is currently on. T will mark all buffers listed in the popup. M-D will prompt you in turn to delete all the marked buffers. Actions \u03bb\ufe0e There are a range of actions you can run from the Helm transient state or even when you just have the buffer list popup open. a switches to the actions page C-z displays list of available actions for a buffer Helm Transient state menu \u03bb\ufe0e M-SPC to open Helm transient state menu, simplifying the keybindings for tidying up lots of buffers. Hint::Gnome Desktop keybinding conflict \u03bb\ufe0e M-SPC is used by the Gnome desktop for the window menu, so recommend you change the Gnome keyboard settings to use a different binding, i.e. Super w .","title":"Tidying up buffers"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#tidying-up-buffers","text":"Sometimes you want to close several buffers and not just the current buffer with SPC b d . SPC b b displays a list of open buffers in a popup window. M-SPC opens the Helm transient menu on the buffer popup window, allowing you to navigate using j and k keys. M-D will prompt you to kill the buffer the cursor is currently on. t will mark the buffer the cursor is currently on. T will mark all buffers listed in the popup. M-D will prompt you in turn to delete all the marked buffers.","title":"Tidying up buffers"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#actions","text":"There are a range of actions you can run from the Helm transient state or even when you just have the buffer list popup open. a switches to the actions page C-z displays list of available actions for a buffer","title":"Actions"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#helm-transient-state-menu","text":"M-SPC to open Helm transient state menu, simplifying the keybindings for tidying up lots of buffers.","title":"Helm Transient state menu"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#hintgnome-desktop-keybinding-conflict","text":"M-SPC is used by the Gnome desktop for the window menu, so recommend you change the Gnome keyboard settings to use a different binding, i.e. Super w .","title":"Hint::Gnome Desktop keybinding conflict"},{"location":"spacemacs-basics/working-with-projects/treemacs/","text":"Treemacs - Visualise your project structure \u03bb\ufe0e You can easily view your project structure and navigate your project files with Treemacs. Show files and directories as a navigable tree in a buffer. Spacemacs uses a pop-up buffer to the left hand side of the frame to display treemacs. Toggling open the treemacs buffer will show the directory of the current buffer. Opening the treemacs project root will show the directory list for the project that the current buffer is part of. Vim Normal Emacs Command Description SPC f t M-m f t treemacs-toggle Show / hide treemacs buffer SPC p t M-m p t treemacs-find-project-root Show project root in treemacs SPC 0 M-m 0 select-window-0 Switch to open treemacs buffer Treemacs shows version control changes \u03bb\ufe0e New and changed files are highlighted in Treemacs against the current version controlled changes in the project. Directory names turn blue when they contain changes. Filenames turn green when they are changed. Treemacs Keybindings \u03bb\ufe0e Press ? in the treemacs buffer to see the available keybindings to control treemacs and use more of its features.","title":"Treemacs - Visualise your project structure"},{"location":"spacemacs-basics/working-with-projects/treemacs/#treemacs-visualise-your-project-structure","text":"You can easily view your project structure and navigate your project files with Treemacs. Show files and directories as a navigable tree in a buffer. Spacemacs uses a pop-up buffer to the left hand side of the frame to display treemacs. Toggling open the treemacs buffer will show the directory of the current buffer. Opening the treemacs project root will show the directory list for the project that the current buffer is part of. Vim Normal Emacs Command Description SPC f t M-m f t treemacs-toggle Show / hide treemacs buffer SPC p t M-m p t treemacs-find-project-root Show project root in treemacs SPC 0 M-m 0 select-window-0 Switch to open treemacs buffer","title":"Treemacs - Visualise your project structure"},{"location":"spacemacs-basics/working-with-projects/treemacs/#treemacs-shows-version-control-changes","text":"New and changed files are highlighted in Treemacs against the current version controlled changes in the project. Directory names turn blue when they contain changes. Filenames turn green when they are changed.","title":"Treemacs shows version control changes"},{"location":"spacemacs-basics/working-with-projects/treemacs/#treemacs-keybindings","text":"Press ? in the treemacs buffer to see the available keybindings to control treemacs and use more of its features.","title":"Treemacs Keybindings"},{"location":"structural-editing/","text":"Structural Editing \u03bb\ufe0e Structural Editing is a way to navigate and refactor your code without breaking parenthesis or other characters that define the structure of your code: () [] {} \"\" . You can quickly jump between the start and end of expressions. It is easy to move expressions around, pull code into expressions or push code out of expressions too. Smartparens - writing structural text \u03bb\ufe0e Spacemacs uses smart parens to help you write structural code really fast and also move expressions around. Space Space sp-cheat-sheet lists all the smartparens commands available and we will cover the most common commands in this section. Smartparens is not just for lisps Smartparens supports structural editing for all languages in Spacemacs, event closing & matching for markup languages such as tags in HTML. Smartparens is a newer implementation of the classic paredit package. Lisp mode - manipulating structural text \u03bb\ufe0e Spacemacs includes an Evil lisp-state , SPC k . for refactoring Lisp base languages like Clojure. In this lisp-state you can use single character commands to move symbols and expressions around without risking unmatched parenthesis or other structure characters. The lisp-state uses smartparens commands, so its a great way to learn structural editing. The common commands I use are Lisp state SPC k Description s / S slurp forwards / backwards - pull in code from the right / left b / B barf forwards / backwards - push out code to the right / left d x delete expression r raise expression - replace parent expression with current expression Enable Vim support for Structural editing \u03bb\ufe0e , T s toggles evil safe structural editing in all languages that support using evil-cleverparens . This package is included in the Clojure layer, but by default this mode is not activated. Safe Structural editing in Vim normal state respects structural editing, meaning the standard vim commands can be used for cutting and deleting text without breaking Clojure or Lisp code structures. \ud83c\udd82 symbol is displayed in the mode-line when evil safe structural editing is enabled. Enable for all clojure buffers by adding the following function in dotspacemacs/user-config ( spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode ) To enable evil safe structural editing for all supported modes: ( spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks ) Evil Cleverparents for Evil state ensures Vim Normal commands respect the structure of the language, i.e. will not delete parents that contain code.","title":"Structural Editing"},{"location":"structural-editing/#structural-editing","text":"Structural Editing is a way to navigate and refactor your code without breaking parenthesis or other characters that define the structure of your code: () [] {} \"\" . You can quickly jump between the start and end of expressions. It is easy to move expressions around, pull code into expressions or push code out of expressions too.","title":"Structural Editing"},{"location":"structural-editing/#smartparens-writing-structural-text","text":"Spacemacs uses smart parens to help you write structural code really fast and also move expressions around. Space Space sp-cheat-sheet lists all the smartparens commands available and we will cover the most common commands in this section. Smartparens is not just for lisps Smartparens supports structural editing for all languages in Spacemacs, event closing & matching for markup languages such as tags in HTML. Smartparens is a newer implementation of the classic paredit package.","title":"Smartparens - writing structural text"},{"location":"structural-editing/#lisp-mode-manipulating-structural-text","text":"Spacemacs includes an Evil lisp-state , SPC k . for refactoring Lisp base languages like Clojure. In this lisp-state you can use single character commands to move symbols and expressions around without risking unmatched parenthesis or other structure characters. The lisp-state uses smartparens commands, so its a great way to learn structural editing. The common commands I use are Lisp state SPC k Description s / S slurp forwards / backwards - pull in code from the right / left b / B barf forwards / backwards - push out code to the right / left d x delete expression r raise expression - replace parent expression with current expression","title":"Lisp mode - manipulating structural text"},{"location":"structural-editing/#enable-vim-support-for-structural-editing","text":", T s toggles evil safe structural editing in all languages that support using evil-cleverparens . This package is included in the Clojure layer, but by default this mode is not activated. Safe Structural editing in Vim normal state respects structural editing, meaning the standard vim commands can be used for cutting and deleting text without breaking Clojure or Lisp code structures. \ud83c\udd82 symbol is displayed in the mode-line when evil safe structural editing is enabled. Enable for all clojure buffers by adding the following function in dotspacemacs/user-config ( spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode ) To enable evil safe structural editing for all supported modes: ( spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks ) Evil Cleverparents for Evil state ensures Vim Normal commands respect the structure of the language, i.e. will not delete parents that contain code.","title":"Enable Vim support for Structural editing"},{"location":"structural-editing/classic-emacs/","text":"Classic Emacs structural editing \u03bb\ufe0e Developers using Emacs and Cider will probably be familiar with paredit for their structural editing needs. Paredit is a very nice library, however, it was only created for Clojure / Lisp languages. Spacemacs uses Smartparens which provides structural editing for all languages, so paredit is not required. Paredit is however part of the Clojure layer in Spacemacs, although there are no keybindings defined.","title":"Classic Emacs structural editing"},{"location":"structural-editing/classic-emacs/#classic-emacs-structural-editing","text":"Developers using Emacs and Cider will probably be familiar with paredit for their structural editing needs. Paredit is a very nice library, however, it was only created for Clojure / Lisp languages. Spacemacs uses Smartparens which provides structural editing for all languages, so paredit is not required. Paredit is however part of the Clojure layer in Spacemacs, although there are no keybindings defined.","title":"Classic Emacs structural editing"},{"location":"structural-editing/cleverparens/","text":"Evil Cleverparens safe structural editing \u03bb\ufe0e With evil-cleverparens enabled , editing in Evil Normal state respects the structure of your code. Spacemacs Evil Description SPC m T s , T s Enable evil safe structural editing for the current buffer Default safe structural editing for all major modes by adding the following to dotspacemacs/user-config in .spacemacs or .spacemacs.d/init.el ( spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks ) ;; for clojure layer only (comment out line above) ;; (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode) Evil normal editing \u03bb\ufe0e Evil-cleverparens modifies some of the existing behaviour of Evil keybindings. It also adds some extra keybindings that use forms as a text object. Keybinding Description d d deletes the current line, moving closing parens to live above D deletes from point to end of line, keeping closing parens H Move backward by sexp L Move forward by sexp M-a Append at end of current form (insert) M-i Insert at start of current form (insert) M-h Move to the beginning of a top-level form M-l Move to the end of the top-level form M-O New line before current form (insert) M-o New line after current form (insert) x if point on parens, unwrap expression, else delete character at point _ jump point to the first non-blank non-opening paren Slurping and Barfing \u03bb\ufe0e < and > to slurp and barf, both forwards and backwards depending on cursor location On an open delimiter, ( , [ , { < slurp backwards as many times as there are preceding opening delimiters. < barf forwards unless form contains a single sexp On a closing delimiter, ) , ] , } > slurp forwards as many times as there are closing delimiters behind > barf backwards unless form contains a single sexp When inside a form < will barf and > will slurp forwards . Wrapping \u03bb\ufe0e Key Behaviour M-( Wrap next sexp in () M-) Wrap the previous sexp in () M-[ Wrap the next sexp in [] M-] Wrap the previous sexp in [] M-{ Wrap the next sexp in {} M-} Wrap the previous sexp in {} Start with a numeric argument to operate on multiple s-expressions until the end of the surrounding form. SPC-u (universal argument) acts on the surrounding form instead. Each consecutive SPC-u wraps an additional expression from the surrounding form. Navigating via parens \u03bb\ufe0e Evil-cleverparens has some convenient keybindings for jumping around code using the parens, including double quotes. Key Description ( Move backward up a sexp. ) Move forward up a sexp. [ Move to the previous opening parentheses ] Move to the next closing parentheses { Move to the next opening parentheses } Move to the previous closing parentheses Dragging / Transposing \u03bb\ufe0e Drag the expression under point forward or backward. M-j evil-drag-forward drag expression forward M-k evil-drag-backward drag expression backward The depth of the expression being moved never changes, i.e. dragging is distinct from slurping or barfing. The expression affected is dependent on the location of the cursor: On top of a symbol acts on that symbol. Inside or on the delimiters of a form moves the form. If a symbol or a form can't be moved any further, the command acts on its surrounding form. Outside a form on a safe line will move the line. On a top-level comment will move the entire comment-block. The behavior of the command with respect to top-level sexps and lines can be customized with evil-cleverparens-drag-ignore-lines (default nil ) evil-cleverparens-drag-comment-blocks to nil treats connected commented lines as singular units Copy and Paste \u03bb\ufe0e M-w aka evil-cp-evil-copy-paste-form copies the surrounding form and inserts it below with the proper indentation. Call outside a form it will do the same with the current line instead (as long as its safe). Call with a numeric argument to repeat the paste operation multiple times. Call with SPC-u copy-paste the current top-level form and insert newlines between them. From Smartparens \u03bb\ufe0e The following commands have been lifted straight from smartparens : Key Behavior M-q sp-indent-defun M-J sp-join-sexp M-s sp-splice-sexp M-S sp-split-sexp M-t sp-transpose-sexp M-v sp-convolute-sexp M-r sp-raise-sexp M-R bound to evil-cp-raise-form acts like sp-raise-sexp but on the enclosing form instead of the next one.","title":"Evil Cleverparens safe structural editing"},{"location":"structural-editing/cleverparens/#evil-cleverparens-safe-structural-editing","text":"With evil-cleverparens enabled , editing in Evil Normal state respects the structure of your code. Spacemacs Evil Description SPC m T s , T s Enable evil safe structural editing for the current buffer Default safe structural editing for all major modes by adding the following to dotspacemacs/user-config in .spacemacs or .spacemacs.d/init.el ( spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks ) ;; for clojure layer only (comment out line above) ;; (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode)","title":"Evil Cleverparens safe structural editing"},{"location":"structural-editing/cleverparens/#evil-normal-editing","text":"Evil-cleverparens modifies some of the existing behaviour of Evil keybindings. It also adds some extra keybindings that use forms as a text object. Keybinding Description d d deletes the current line, moving closing parens to live above D deletes from point to end of line, keeping closing parens H Move backward by sexp L Move forward by sexp M-a Append at end of current form (insert) M-i Insert at start of current form (insert) M-h Move to the beginning of a top-level form M-l Move to the end of the top-level form M-O New line before current form (insert) M-o New line after current form (insert) x if point on parens, unwrap expression, else delete character at point _ jump point to the first non-blank non-opening paren","title":"Evil normal editing"},{"location":"structural-editing/cleverparens/#slurping-and-barfing","text":"< and > to slurp and barf, both forwards and backwards depending on cursor location On an open delimiter, ( , [ , { < slurp backwards as many times as there are preceding opening delimiters. < barf forwards unless form contains a single sexp On a closing delimiter, ) , ] , } > slurp forwards as many times as there are closing delimiters behind > barf backwards unless form contains a single sexp When inside a form < will barf and > will slurp forwards .","title":"Slurping and Barfing"},{"location":"structural-editing/cleverparens/#wrapping","text":"Key Behaviour M-( Wrap next sexp in () M-) Wrap the previous sexp in () M-[ Wrap the next sexp in [] M-] Wrap the previous sexp in [] M-{ Wrap the next sexp in {} M-} Wrap the previous sexp in {} Start with a numeric argument to operate on multiple s-expressions until the end of the surrounding form. SPC-u (universal argument) acts on the surrounding form instead. Each consecutive SPC-u wraps an additional expression from the surrounding form.","title":"Wrapping"},{"location":"structural-editing/cleverparens/#navigating-via-parens","text":"Evil-cleverparens has some convenient keybindings for jumping around code using the parens, including double quotes. Key Description ( Move backward up a sexp. ) Move forward up a sexp. [ Move to the previous opening parentheses ] Move to the next closing parentheses { Move to the next opening parentheses } Move to the previous closing parentheses","title":"Navigating via parens"},{"location":"structural-editing/cleverparens/#dragging-transposing","text":"Drag the expression under point forward or backward. M-j evil-drag-forward drag expression forward M-k evil-drag-backward drag expression backward The depth of the expression being moved never changes, i.e. dragging is distinct from slurping or barfing. The expression affected is dependent on the location of the cursor: On top of a symbol acts on that symbol. Inside or on the delimiters of a form moves the form. If a symbol or a form can't be moved any further, the command acts on its surrounding form. Outside a form on a safe line will move the line. On a top-level comment will move the entire comment-block. The behavior of the command with respect to top-level sexps and lines can be customized with evil-cleverparens-drag-ignore-lines (default nil ) evil-cleverparens-drag-comment-blocks to nil treats connected commented lines as singular units","title":"Dragging / Transposing"},{"location":"structural-editing/cleverparens/#copy-and-paste","text":"M-w aka evil-cp-evil-copy-paste-form copies the surrounding form and inserts it below with the proper indentation. Call outside a form it will do the same with the current line instead (as long as its safe). Call with a numeric argument to repeat the paste operation multiple times. Call with SPC-u copy-paste the current top-level form and insert newlines between them.","title":"Copy and Paste"},{"location":"structural-editing/cleverparens/#from-smartparens","text":"The following commands have been lifted straight from smartparens : Key Behavior M-q sp-indent-defun M-J sp-join-sexp M-s sp-splice-sexp M-S sp-split-sexp M-t sp-transpose-sexp M-v sp-convolute-sexp M-r sp-raise-sexp M-R bound to evil-cp-raise-form acts like sp-raise-sexp but on the enclosing form instead of the next one.","title":"From Smartparens"},{"location":"structural-editing/lisp-state-deleting/","text":"Deleting symbols, words & expressions \u03bb\ufe0e In lisp-state you can easily delete symbols, words and expressions without deleting the structures they are in (unless that structure is empty). Delete a symbol, word or expression using the d menu lisp-state Description d s delete the current symbol d w delete the current word d x delete the current expression Evil Safe Structural Editing Enable evil-cleverparens to Vim editing respect structural editing. For example, using d d will delete a line within a function without unbalancing the outer parenthesis. Closing parentheses are pulled up to the preceding line, keeping the correct formatting for the Clojure code.","title":"Deleting symbols, words & expressions"},{"location":"structural-editing/lisp-state-deleting/#deleting-symbols-words-expressions","text":"In lisp-state you can easily delete symbols, words and expressions without deleting the structures they are in (unless that structure is empty). Delete a symbol, word or expression using the d menu lisp-state Description d s delete the current symbol d w delete the current word d x delete the current expression Evil Safe Structural Editing Enable evil-cleverparens to Vim editing respect structural editing. For example, using d d will delete a line within a function without unbalancing the outer parenthesis. Closing parentheses are pulled up to the preceding line, keeping the correct formatting for the Clojure code.","title":"Deleting symbols, words &amp; expressions"},{"location":"structural-editing/lisp-state-raising/","text":"Raising expressions \u03bb\ufe0e Instead of barfing out an expression from its parent and then deleting the parent, you can raise a nested expression and replace its parent all in one go. Key Description r raise the current expression to replace its parent","title":"Raising expressions"},{"location":"structural-editing/lisp-state-raising/#raising-expressions","text":"Instead of barfing out an expression from its parent and then deleting the parent, you can raise a nested expression and replace its parent all in one go. Key Description r raise the current expression to replace its parent","title":"Raising expressions"},{"location":"structural-editing/lisp-state-slurp-barf/","text":"Slurp and barf \u03bb\ufe0e When writing Clojure you sometimes put symbols or expressions in the wrong parenthesis, () , [] , {} . Rather than delete the code or parenthesis you can use structural editing to move the code between parenthesis. So you can change the behaviour of the code without worrying about breaking the structure. Slurp - pull something into an expression (like slurping a really thick milkshake) Barf - push out something from an expression (like barfing out that milkshake if it tasted unpleasant) Lisp state SPC k Description b barf forwards (push symbol out to right) B barf backwards (push symbol out to left) s slurp forwards (push symbol out to right) S slurp backwards (push symbol out to left) TODO::Add video of slurp and barf in action \u03bb\ufe0e","title":"Slurp and barf"},{"location":"structural-editing/lisp-state-slurp-barf/#slurp-and-barf","text":"When writing Clojure you sometimes put symbols or expressions in the wrong parenthesis, () , [] , {} . Rather than delete the code or parenthesis you can use structural editing to move the code between parenthesis. So you can change the behaviour of the code without worrying about breaking the structure. Slurp - pull something into an expression (like slurping a really thick milkshake) Barf - push out something from an expression (like barfing out that milkshake if it tasted unpleasant) Lisp state SPC k Description b barf forwards (push symbol out to right) B barf backwards (push symbol out to left) s slurp forwards (push symbol out to right) S slurp backwards (push symbol out to left)","title":"Slurp and barf"},{"location":"structural-editing/lisp-state-slurp-barf/#todoadd-video-of-slurp-and-barf-in-action","text":"","title":"TODO::Add video of slurp and barf in action"},{"location":"structural-editing/lisp-state-wrap-unwrap/","text":"Wrap & unwrap with a list \u03bb\ufe0e You can wrap an element in a list, ( ) using wrap, w . To remove a list from one or more element use unwrap, W TODO Video of wrapping and unwrapping symbols, words and expressions.","title":"Wrap & unwrap with a list"},{"location":"structural-editing/lisp-state-wrap-unwrap/#wrap-unwrap-with-a-list","text":"You can wrap an element in a list, ( ) using wrap, w . To remove a list from one or more element use unwrap, W TODO Video of wrapping and unwrapping symbols, words and expressions.","title":"Wrap &amp; unwrap with a list"},{"location":"structural-editing/lisp-state/","text":"Lisp State \u03bb\ufe0e Lisp state provides a fast and convenient way to manipulate the structure of your Clojure code whilst keeping it valid, i.e. avoiding unbalanced parenthesis. SPC k opens the lisp state menu, providing commands for structural editing with Smartparens. Any command will put the current buffer into lisp state, a transient state where you can use single character keybindings for the commands (no need to use SPC k each time). Evil numeric values can be used with the Lisp state commands 3 s slurp three times w 2 s wrap a symbol in parenthesis then slurp two times Common commands \u03bb\ufe0e Lisp state SPC k Description j / k next close paren / previous open paren l / h next symbol / previous symbol L / H next expression / previous expression s / S slurp forward / backward (pull in code from the right / left) b / B barf forward / backward (push out code to the right / left) d s / d w / d x delete symbol / word / expression r raise expression - replace parent expression with current expression This section provides further examples of the most common lisp state commands. The Spacemacs ABC video also covers examples of Lisp State. TODO::TODO: Video of Structural editing with Lisp State \u03bb\ufe0e Key Bindings \u03bb\ufe0e Key Binding Function SPC k % evil jump item SPC k : ex command SPC k ( insert expression before (same level as current one) SPC k ) insert expression after (same level as current one) SPC k $ go to the end of current sexp SPC k 0 go to the beginning of current sexp SPC k a absorb expression SPC k b forward barf expression SPC k B backward barf expression SPC k c convolute expression SPC k ds delete symbol SPC k Ds backward delete symbol SPC k dw delete word SPC k Dw backward delete word SPC k dx delete expression SPC k Dx backward delete expression SPC k e unwrap current expression and kill all symbols after point SPC k E unwrap current expression and kill all symbols before point SPC k h previous symbol SPC k H go to previous sexp SPC k i switch to insert state SPC k I go to beginning of current expression and switch to insert state SPC k j next closing parenthesis SPC k J join expression SPC k k previous opening parenthesis SPC k l next symbol SPC k L go to next sexp SPC k p paste after SPC k P paste before SPC k r raise expression (replace parent expression by current one) SPC k s forward slurp expression SPC k S backward slurp expression SPC k t transpose expression SPC k u undo SPC k U got to parent sexp backward SPC k C-r redo SPC k v switch to =visual state= SPC k V switch to =visual line state= SPC k C-v switch to =visual block state= SPC k w wrap expression with parenthesis SPC k W unwrap expression SPC k y copy expression Hint:: SPC does not activate Spacemacs menu \u03bb\ufe0e In lisp-state the Spacemacs leader key, SPC , is not bound to the Spacemacs menu. M-m can be used to open the Spacemacs menu. References \u03bb\ufe0e evil-lisp-state and keybindings","title":"Lisp State"},{"location":"structural-editing/lisp-state/#lisp-state","text":"Lisp state provides a fast and convenient way to manipulate the structure of your Clojure code whilst keeping it valid, i.e. avoiding unbalanced parenthesis. SPC k opens the lisp state menu, providing commands for structural editing with Smartparens. Any command will put the current buffer into lisp state, a transient state where you can use single character keybindings for the commands (no need to use SPC k each time). Evil numeric values can be used with the Lisp state commands 3 s slurp three times w 2 s wrap a symbol in parenthesis then slurp two times","title":"Lisp State"},{"location":"structural-editing/lisp-state/#common-commands","text":"Lisp state SPC k Description j / k next close paren / previous open paren l / h next symbol / previous symbol L / H next expression / previous expression s / S slurp forward / backward (pull in code from the right / left) b / B barf forward / backward (push out code to the right / left) d s / d w / d x delete symbol / word / expression r raise expression - replace parent expression with current expression This section provides further examples of the most common lisp state commands. The Spacemacs ABC video also covers examples of Lisp State.","title":"Common commands"},{"location":"structural-editing/lisp-state/#todotodo-video-of-structural-editing-with-lisp-state","text":"","title":"TODO::TODO: Video of Structural editing with Lisp State"},{"location":"structural-editing/lisp-state/#key-bindings","text":"Key Binding Function SPC k % evil jump item SPC k : ex command SPC k ( insert expression before (same level as current one) SPC k ) insert expression after (same level as current one) SPC k $ go to the end of current sexp SPC k 0 go to the beginning of current sexp SPC k a absorb expression SPC k b forward barf expression SPC k B backward barf expression SPC k c convolute expression SPC k ds delete symbol SPC k Ds backward delete symbol SPC k dw delete word SPC k Dw backward delete word SPC k dx delete expression SPC k Dx backward delete expression SPC k e unwrap current expression and kill all symbols after point SPC k E unwrap current expression and kill all symbols before point SPC k h previous symbol SPC k H go to previous sexp SPC k i switch to insert state SPC k I go to beginning of current expression and switch to insert state SPC k j next closing parenthesis SPC k J join expression SPC k k previous opening parenthesis SPC k l next symbol SPC k L go to next sexp SPC k p paste after SPC k P paste before SPC k r raise expression (replace parent expression by current one) SPC k s forward slurp expression SPC k S backward slurp expression SPC k t transpose expression SPC k u undo SPC k U got to parent sexp backward SPC k C-r redo SPC k v switch to =visual state= SPC k V switch to =visual line state= SPC k C-v switch to =visual block state= SPC k w wrap expression with parenthesis SPC k W unwrap expression SPC k y copy expression","title":"Key Bindings"},{"location":"structural-editing/lisp-state/#hint-spc-does-not-activate-spacemacs-menu","text":"In lisp-state the Spacemacs leader key, SPC , is not bound to the Spacemacs menu. M-m can be used to open the Spacemacs menu.","title":"Hint:: SPC does not activate Spacemacs menu"},{"location":"structural-editing/lisp-state/#references","text":"evil-lisp-state and keybindings","title":"References"},{"location":"structural-editing/repeating-commands/","text":"Repeating Lisp State Commands \u03bb\ufe0e In Lisp State, as with Evil normal, typing a number before the command will repeat that command. For example 2 s slurp two times, starting from Evil normal state w 2 s to wrap a symbol in parenthesis then slurping two times:","title":"Repeating Lisp State Commands"},{"location":"structural-editing/repeating-commands/#repeating-lisp-state-commands","text":"In Lisp State, as with Evil normal, typing a number before the command will repeat that command. For example 2 s slurp two times, starting from Evil normal state w 2 s to wrap a symbol in parenthesis then slurping two times:","title":"Repeating Lisp State Commands"},{"location":"structural-editing/smartparens/","text":"Smartparens - Writing structural text \u03bb\ufe0e Spacemacs uses Smartparens to write and navigate code quickly, ensuring the structure of the code does not break (i.e. no unbalanced parens). smartparens keeps parens in balance by automatically creating a closing paren when you type an open paren, e.g () for lists, [] for vectors, {} for maps and \"\" for strings. Smartparens strict mode \u03bb\ufe0e Enable strict mode to prevent the deletion of parens that would leave them unbalanced. For example, the characters within parens must be deleted before deleting both parens at the same time. Space f e d to edit the Spacemacs configuration file and update dotspacemacs-smartparens-strict-mode to have a value of t Smartparens supports all languages Smartparens is a newer implementation of paredit package and provides support for all languages, not just Clojure. Paredit and smartparens has a comparison of these two packages. Jump past the end of an expression \u03bb\ufe0e Using smart closing parenthesis, ) jumps to the end of the current expression. C-q temporarily disables this feature, allowing a ) to be entered dotspacemacs-smart-closing-parenthesis in .spacemacs controls this feature, set this to t to enable. dotspacemacs-smart-closing-parenthesis t Smartparens and symbol highlighting \u03bb\ufe0e Spacemacs highlights the surrounding symbols, including any parents. So if you are in a nested list, (parent code (nested code)) , then if the cursor is on the nested code, both nested & parent symbols are highlighted. A closing symbol is also highlighted when the cursor is at the opening symbol. References \u03bb\ufe0e Animated guide to paredit","title":"Smartparens - Writing structural text"},{"location":"structural-editing/smartparens/#smartparens-writing-structural-text","text":"Spacemacs uses Smartparens to write and navigate code quickly, ensuring the structure of the code does not break (i.e. no unbalanced parens). smartparens keeps parens in balance by automatically creating a closing paren when you type an open paren, e.g () for lists, [] for vectors, {} for maps and \"\" for strings.","title":"Smartparens - Writing structural text"},{"location":"structural-editing/smartparens/#smartparens-strict-mode","text":"Enable strict mode to prevent the deletion of parens that would leave them unbalanced. For example, the characters within parens must be deleted before deleting both parens at the same time. Space f e d to edit the Spacemacs configuration file and update dotspacemacs-smartparens-strict-mode to have a value of t Smartparens supports all languages Smartparens is a newer implementation of paredit package and provides support for all languages, not just Clojure. Paredit and smartparens has a comparison of these two packages.","title":"Smartparens strict mode"},{"location":"structural-editing/smartparens/#jump-past-the-end-of-an-expression","text":"Using smart closing parenthesis, ) jumps to the end of the current expression. C-q temporarily disables this feature, allowing a ) to be entered dotspacemacs-smart-closing-parenthesis in .spacemacs controls this feature, set this to t to enable. dotspacemacs-smart-closing-parenthesis t","title":"Jump past the end of an expression"},{"location":"structural-editing/smartparens/#smartparens-and-symbol-highlighting","text":"Spacemacs highlights the surrounding symbols, including any parents. So if you are in a nested list, (parent code (nested code)) , then if the cursor is on the nested code, both nested & parent symbols are highlighted. A closing symbol is also highlighted when the cursor is at the opening symbol.","title":"Smartparens and symbol highlighting"},{"location":"structural-editing/smartparens/#references","text":"Animated guide to paredit","title":"References"},{"location":"termux/","text":"NeoVim on Termux \u03bb\ufe0e A smart phone or tablet and an external keyboard can make an excellent ultra-portable development environment, especially when travelling with limited space or weight constraints. Termux can be installed using the F-Droid marketplace , which is as easy as installing any other Android app. Do not install Termux App from the Google Play store The Termux App in Google Play store is out of date and will simply not work properly and probably not at all Running Termux \u03bb\ufe0e Run Termux from the app launcher added as an android app by the F-Droid install. A help menu will show the basic command needed to work with packages. Software keys for Termux specific controls are shown. Keys can be toggled with the Volume Up + q key combination. Termux may not display in fullscreen when Android productivity mode, usually activated on tablets when physical keyboard or mouse is attached. Disabling productivity mode in the Android settings is recommended.","title":"NeoVim on Termux"},{"location":"termux/#neovim-on-termux","text":"A smart phone or tablet and an external keyboard can make an excellent ultra-portable development environment, especially when travelling with limited space or weight constraints. Termux can be installed using the F-Droid marketplace , which is as easy as installing any other Android app. Do not install Termux App from the Google Play store The Termux App in Google Play store is out of date and will simply not work properly and probably not at all","title":"NeoVim on Termux"},{"location":"termux/#running-termux","text":"Run Termux from the app launcher added as an android app by the F-Droid install. A help menu will show the basic command needed to work with packages. Software keys for Termux specific controls are shown. Keys can be toggled with the Volume Up + q key combination. Termux may not display in fullscreen when Android productivity mode, usually activated on tablets when physical keyboard or mouse is attached. Disabling productivity mode in the Android settings is recommended.","title":"Running Termux"},{"location":"termux/clojure-development/","text":"Clojure development environment \u03bb\ufe0e A comprehensive development environment for Clojure, supporting a REPL workflow and static analysis of code via Clojure Language Server Protocol. Java host platform \u03bb\ufe0e Install OpenJDK to host the Clojure REPL process and run packaged Clojure applications. Java 17 Long Term Support version is recommended as it is very stable, receives security updates and has the latest highly tested performance improvements. pkg install openjdk-17 Install Clojure \u03bb\ufe0e Clone practicalli/clojure-deps-edn to add a wide range of community tools to the Clojure CLI git clone git@github.com:practicalli/clojure-deps-edn.git ~/.config/clojure Use the Linux install with a prefix path pointing to Termux equivalent of /usr/local . Find the path using echo $PATH and remove bin from the end. Without the prefix Clojure will not install correctly curl -O https://download.clojure.org/install/linux-install-1.11.1.1149.sh chmod +x linux-install-1.11.1.1149.sh ./linux-install-1.11.1.1149.sh --prefix /data/data/com.termux/files/usr/ clojure binary is installed in the existing bin, lib and share directories in /data/..../usr/ , placing that binary on the system execution path. Test by running a REPL session, for example with Rebel Readline clojure -M:repl/rebel optionally install rlwrap package if using the basic repl terminal UI Install Clojure LSP \u03bb\ufe0e Visit clojure-lsp GitHub releases page and download the clojure-lsp file visit the relases page in firefox and copy the link to the file. use wget and paste the link to the file to download make executable chmod 755 clojure-lsp test locally ./clojure-lsp --version - should print clojure-lsp version and clj-kondo version copy or move file to path mv clojure-lsp $PATH Clone practicalli/clojure-lsp-config repository to the ~/.config/clojure-lsp directory git clone https://github.com/practicalli/clojure-lsp-config.git ~/.config/clojure-lsp","title":"Clojure"},{"location":"termux/clojure-development/#clojure-development-environment","text":"A comprehensive development environment for Clojure, supporting a REPL workflow and static analysis of code via Clojure Language Server Protocol.","title":"Clojure development environment"},{"location":"termux/clojure-development/#java-host-platform","text":"Install OpenJDK to host the Clojure REPL process and run packaged Clojure applications. Java 17 Long Term Support version is recommended as it is very stable, receives security updates and has the latest highly tested performance improvements. pkg install openjdk-17","title":"Java host platform"},{"location":"termux/clojure-development/#install-clojure","text":"Clone practicalli/clojure-deps-edn to add a wide range of community tools to the Clojure CLI git clone git@github.com:practicalli/clojure-deps-edn.git ~/.config/clojure Use the Linux install with a prefix path pointing to Termux equivalent of /usr/local . Find the path using echo $PATH and remove bin from the end. Without the prefix Clojure will not install correctly curl -O https://download.clojure.org/install/linux-install-1.11.1.1149.sh chmod +x linux-install-1.11.1.1149.sh ./linux-install-1.11.1.1149.sh --prefix /data/data/com.termux/files/usr/ clojure binary is installed in the existing bin, lib and share directories in /data/..../usr/ , placing that binary on the system execution path. Test by running a REPL session, for example with Rebel Readline clojure -M:repl/rebel optionally install rlwrap package if using the basic repl terminal UI","title":"Install Clojure"},{"location":"termux/clojure-development/#install-clojure-lsp","text":"Visit clojure-lsp GitHub releases page and download the clojure-lsp file visit the relases page in firefox and copy the link to the file. use wget and paste the link to the file to download make executable chmod 755 clojure-lsp test locally ./clojure-lsp --version - should print clojure-lsp version and clj-kondo version copy or move file to path mv clojure-lsp $PATH Clone practicalli/clojure-lsp-config repository to the ~/.config/clojure-lsp directory git clone https://github.com/practicalli/clojure-lsp-config.git ~/.config/clojure-lsp","title":"Install Clojure LSP"},{"location":"termux/custom-shell/","text":"Customise shell \u03bb\ufe0e Customising the shell is optional, although gives an enhanced experience. Zsh provides the richest command line experience, providing many advanced features over bash. Oh My Zsh is a community configuration that provides a simple way to configure Zsh features and also supports powerline10k terminal theme , providing context specific information and a more engaging visual experience. Oh My Zsh community configuration enhances the Zsh experience. Practicalli normally uses Prezto community configuration , unfortunately this did not work well on Termux. Install Zsh \u03bb\ufe0e Install the zsh package using the Termux package manager pkg install zsh Start zsh, which will show a % character as the prompt zsh Set the shell to run zsh by default chsh -s zsh Install Oh My Zsh \u03bb\ufe0e Install Oh My Zsh via curl (or wget if preferred) in the .oh-my-zsh/ directory sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \" Install Powerline10k \u03bb\ufe0e Powerline10k is a visually appealing prompt with a setup script to visually choose the presentation of the prompt. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Next time zsh is run, powerline10k setup script will run. If Meslo is not set as the terminal font, the setup script offers to install the font. Installing the font will restart Termux. p10k configure to manually run the powerline10k setup script. Using Oh My Bash If preferring Bash, then ohmybash provides a nice command line experience, showing completions clearer, nice themes that provide information.","title":"Zsh"},{"location":"termux/custom-shell/#customise-shell","text":"Customising the shell is optional, although gives an enhanced experience. Zsh provides the richest command line experience, providing many advanced features over bash. Oh My Zsh is a community configuration that provides a simple way to configure Zsh features and also supports powerline10k terminal theme , providing context specific information and a more engaging visual experience. Oh My Zsh community configuration enhances the Zsh experience. Practicalli normally uses Prezto community configuration , unfortunately this did not work well on Termux.","title":"Customise shell"},{"location":"termux/custom-shell/#install-zsh","text":"Install the zsh package using the Termux package manager pkg install zsh Start zsh, which will show a % character as the prompt zsh Set the shell to run zsh by default chsh -s zsh","title":"Install Zsh"},{"location":"termux/custom-shell/#install-oh-my-zsh","text":"Install Oh My Zsh via curl (or wget if preferred) in the .oh-my-zsh/ directory sh -c \" $( curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh ) \"","title":"Install Oh My Zsh"},{"location":"termux/custom-shell/#install-powerline10k","text":"Powerline10k is a visually appealing prompt with a setup script to visually choose the presentation of the prompt. git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Next time zsh is run, powerline10k setup script will run. If Meslo is not set as the terminal font, the setup script offers to install the font. Installing the font will restart Termux. p10k configure to manually run the powerline10k setup script. Using Oh My Bash If preferring Bash, then ohmybash provides a nice command line experience, showing completions clearer, nice themes that provide information.","title":"Install Powerline10k"},{"location":"termux/fdroid-install/","text":"Install Termux via the F-Droid App \u03bb\ufe0e Visit the FDroid app website and download F-Droid, which saves an F-Droid.apk file. Android may display a security prompt stating the browser does not have permissions to install software. The popup should include a configure link that opens the Android settings to allow the browser to install software. F-Droid should now be installed and its icon added to the Android system alongside all other Android apps. Open the F-Droid App and allow it to update its repositories, to ensure the latest list of apps are shown. Search for the Termux application, clicking on the Termux name if more details are required. Select the Install button. When installing apps from F-Droid for the first time, a security prompt is show as F-Droid is an unknown source. Select Settings to open the Android settings and enable Allow from this source for the F-Droid app. A Termux App launcher will be added to the Android screen. Consider adding the Termux icon to the commonly used icons bar. Termux Styling \u03bb\ufe0e Styling is a Termux plugin that provides a visually richer experience. Styling contains beautiful color schemes and powerline-reaqdy fonts to customise the appearance of the terminal Install the package via F-Droid The styling menu is accessed via a long press on the Termux app screen, showing a More > Style option on the usual cut/copy/paste popup menu. Practicalli recommends FiraCode fonts.","title":"F-Droid"},{"location":"termux/fdroid-install/#install-termux-via-the-f-droid-app","text":"Visit the FDroid app website and download F-Droid, which saves an F-Droid.apk file. Android may display a security prompt stating the browser does not have permissions to install software. The popup should include a configure link that opens the Android settings to allow the browser to install software. F-Droid should now be installed and its icon added to the Android system alongside all other Android apps. Open the F-Droid App and allow it to update its repositories, to ensure the latest list of apps are shown. Search for the Termux application, clicking on the Termux name if more details are required. Select the Install button. When installing apps from F-Droid for the first time, a security prompt is show as F-Droid is an unknown source. Select Settings to open the Android settings and enable Allow from this source for the F-Droid app. A Termux App launcher will be added to the Android screen. Consider adding the Termux icon to the commonly used icons bar.","title":"Install Termux via the F-Droid App"},{"location":"termux/fdroid-install/#termux-styling","text":"Styling is a Termux plugin that provides a visually richer experience. Styling contains beautiful color schemes and powerline-reaqdy fonts to customise the appearance of the terminal Install the package via F-Droid The styling menu is accessed via a long press on the Termux app screen, showing a More > Style option on the usual cut/copy/paste popup menu. Practicalli recommends FiraCode fonts.","title":"Termux Styling"},{"location":"termux/git/","text":"Git version control \u03bb\ufe0e A Git client is used to version control projects and to clone projects and configuration from GitHub/GitLab. Practicalli maintains several editor configurations in shared repositories on GitHub Install a Git Client (and optionally GitHub CLI) [optionally] clone the practicalli/dotfiles repository for the Git config and global ignores Configure an SSH key to access remote repositories (or Developer token if you cannot use SSH keys) Install a git client and GitHub CLI \u03bb\ufe0e pkg install git gh Clone the practicalli/dotfiles repository git clone https://github.com/practicalli/dotfiles projects/dotfiles Move or symbolically link the top-level directories to ~/.config , e.g. for the Git configuration: ln -s projects/dotfiles/git ~/.config/git Edit the .config/git/config and update the core.user , core.name and github or gitlab identities Create SSH Key for remote repository access \u03bb\ufe0e Install the openssh package which contains the ssh-keygen command to generate a new public/private key combinations for use with GitHub SSH repository URLs pkg install openssh Generate a key using the email address of the GitHub or GitLab account ssh-keygen -t rsa -C name@domain.tld RET to confirm storing the keys in the default location. Usually a passphrase is recommended, however, termux does not seem to save a keyring to save the key passphrase using ssh-add . So the passphrase must be entered each time the key is used, unless a blank passphrase is used. Vist your GitHub account settings and create a new SSH key Use cat ~/.ssh/id_rsa.pub to show the public key contents. Press the screen to select and copy the public key to the clipboard. Paste the public key into the GitHub new key form. [optional] Create a developer token \u03bb\ufe0e A developer token (or ssh key) is required to access GitHub {and far more secure over password} Should the android device become lost or compromised, the developer token can be deleted to protect the repositories from any malicious access. The developer token should be limited to the minimal access. The developer token does not give access to the GitHub or GitLab account. HTTPS URLs should be used with a developer token. git@git.com URLs are for SSH keys only. Visit GitHub / GitLab settings for your account Create a new developer token specifically for Termux Add a descriptive name for the token, based on the device Termuxc is runniung on, e.g. Termux Pixel2XL Check the public_repo and status repo scopes Generate button creates a new token. Copy the token using the copy icon. Edit the .config/git/config file and add a github section with the GitHub account name and token [github] name = practicalli token = ghp_************************************ Consider using GitHub CLI to cache the developer token rather than write the token to the Git configuration file for greater security.","title":"Git"},{"location":"termux/git/#git-version-control","text":"A Git client is used to version control projects and to clone projects and configuration from GitHub/GitLab. Practicalli maintains several editor configurations in shared repositories on GitHub Install a Git Client (and optionally GitHub CLI) [optionally] clone the practicalli/dotfiles repository for the Git config and global ignores Configure an SSH key to access remote repositories (or Developer token if you cannot use SSH keys)","title":"Git version control"},{"location":"termux/git/#install-a-git-client-and-github-cli","text":"pkg install git gh Clone the practicalli/dotfiles repository git clone https://github.com/practicalli/dotfiles projects/dotfiles Move or symbolically link the top-level directories to ~/.config , e.g. for the Git configuration: ln -s projects/dotfiles/git ~/.config/git Edit the .config/git/config and update the core.user , core.name and github or gitlab identities","title":"Install a git client and GitHub CLI"},{"location":"termux/git/#create-ssh-key-for-remote-repository-access","text":"Install the openssh package which contains the ssh-keygen command to generate a new public/private key combinations for use with GitHub SSH repository URLs pkg install openssh Generate a key using the email address of the GitHub or GitLab account ssh-keygen -t rsa -C name@domain.tld RET to confirm storing the keys in the default location. Usually a passphrase is recommended, however, termux does not seem to save a keyring to save the key passphrase using ssh-add . So the passphrase must be entered each time the key is used, unless a blank passphrase is used. Vist your GitHub account settings and create a new SSH key Use cat ~/.ssh/id_rsa.pub to show the public key contents. Press the screen to select and copy the public key to the clipboard. Paste the public key into the GitHub new key form.","title":"Create SSH Key for remote repository access"},{"location":"termux/git/#optional-create-a-developer-token","text":"A developer token (or ssh key) is required to access GitHub {and far more secure over password} Should the android device become lost or compromised, the developer token can be deleted to protect the repositories from any malicious access. The developer token should be limited to the minimal access. The developer token does not give access to the GitHub or GitLab account. HTTPS URLs should be used with a developer token. git@git.com URLs are for SSH keys only. Visit GitHub / GitLab settings for your account Create a new developer token specifically for Termux Add a descriptive name for the token, based on the device Termuxc is runniung on, e.g. Termux Pixel2XL Check the public_repo and status repo scopes Generate button creates a new token. Copy the token using the copy icon. Edit the .config/git/config file and add a github section with the GitHub account name and token [github] name = practicalli token = ghp_************************************ Consider using GitHub CLI to cache the developer token rather than write the token to the Git configuration file for greater security.","title":"[optional] Create a developer token"},{"location":"termux/setup/","text":"Termux Setup \u03bb\ufe0e Launch Termux via its application icon. A black terminal screen will appear with a bash shell prompt. Update packages \u03bb\ufe0e Check for new packages and update them all package upgrade -y If you wish to first check the packages that will be updated, use pkg --list-upgradable termux-change-repo to select a specific region to minimise the number of mirrors checked during package upgrades, especially useful if on a limited data plan. At time of writing, the Termux package on F-Droid was around 6 months old so there will be a number of packages that should be updated before any further installation steps are undertaken. Configure Freedesktop.org XDG locations \u03bb\ufe0e nano ~/.profile to edit the ~/.profile file, adding export directives to set the XDG locations: export XDG_CONFIG_HOME = $HOME /.config export XDG_DATA_HOME = $HOME /.local/share export XDG_STATE_HOME = $HOME /.local/state export XDG_CACHE_HOME = $HOME /.cache # Set XDG location of Emacs Spacemacs configuration export SPACEMACSDIR = \" $XDG_CONFIG_HOME /spacemacs\" source ~/.profile to load the environment variables into the shell, or exit Termux and restart. nano editor installed by default nano editor is used to edit the commands as the package is installed by default in termux. vim , neovim , emacs or any other Linux command line editor can be used if the package is first installed. Termux will list packages to install when trying to run a command that is from a package not yet installed. Tools to download binaries and configuration \u03bb\ufe0e Many tools can be installed via the pkg tool, although specific Clojure tools and configuration require additional tools: wget and curl - download tools not packaged, i.e. clojure-lsp binary git - clone configuration files and projects (see Git version control section) openssh - SSH service and tools to generate SSH keys pkg install curl wget git openssh Configure a Git Identify and SSH key to before committing and pushing changes, or cloning repositories using the SSH protocol. practicalli/dotfiles contains example configuration, ignore patterns and commit template for using Git. [Optional] Configure Termux Settings \u03bb\ufe0e nano ~/.termu/termux.properties to configure the default settings for termux. termux-reload-settings if any of the values are set (restarting Termux is not enough to load setting changes) The defaults are suitable for the majority of uses, although you may wish to consider: fullscreen set to true to us the whole screen, hiding Android menu bars, etc. hide-soft-keyboard-on-startup set to true if always using a physical keyboard default-working-directory to save files user files and directories in an alternative location, If swiping from left edge of the screen is already taken, set key bindings for creating a new termux session, naming a session and switching between sessions. Alternatively, use byobu to create and switch between its tabs for multiple terminal sessions. Set Color Scheme and Font \u03bb\ufe0e The Termux:Styling plug provides menus for selecting terminal color scheme and font to use Press and hold on the Termux screen to show the context menu and select the Style menu. On smaller screens select More > Style If Termux:Styling plugin was not installed, a prompt will display asking if the plugin should be installed A menu appears with Choose Color and Choose Font Select Choose Color to select from the available list of colour schemes, e.g. Gruvbox Dark or Gruvbox Light ~/.termux/colors.properties file is added when selecting a colour scheme, defining Hex colors from the theme selected. Select Choose Font to select from the available fonts, e.g. FiraCode or Ubuntu ~/.termux/font.ttf font file is added when selecting a font. Termux:Styling uses NerdFonts for icons All fonts installed via Termux:Styling have been patched with NerdFonts , providing several thousand icons to use within the terminal prompt and Neovim itself (e.g. VimDevIcons).","title":"Termux Setup"},{"location":"termux/setup/#termux-setup","text":"Launch Termux via its application icon. A black terminal screen will appear with a bash shell prompt.","title":"Termux Setup"},{"location":"termux/setup/#update-packages","text":"Check for new packages and update them all package upgrade -y If you wish to first check the packages that will be updated, use pkg --list-upgradable termux-change-repo to select a specific region to minimise the number of mirrors checked during package upgrades, especially useful if on a limited data plan. At time of writing, the Termux package on F-Droid was around 6 months old so there will be a number of packages that should be updated before any further installation steps are undertaken.","title":"Update packages"},{"location":"termux/setup/#configure-freedesktoporg-xdg-locations","text":"nano ~/.profile to edit the ~/.profile file, adding export directives to set the XDG locations: export XDG_CONFIG_HOME = $HOME /.config export XDG_DATA_HOME = $HOME /.local/share export XDG_STATE_HOME = $HOME /.local/state export XDG_CACHE_HOME = $HOME /.cache # Set XDG location of Emacs Spacemacs configuration export SPACEMACSDIR = \" $XDG_CONFIG_HOME /spacemacs\" source ~/.profile to load the environment variables into the shell, or exit Termux and restart. nano editor installed by default nano editor is used to edit the commands as the package is installed by default in termux. vim , neovim , emacs or any other Linux command line editor can be used if the package is first installed. Termux will list packages to install when trying to run a command that is from a package not yet installed.","title":"Configure Freedesktop.org XDG locations"},{"location":"termux/setup/#tools-to-download-binaries-and-configuration","text":"Many tools can be installed via the pkg tool, although specific Clojure tools and configuration require additional tools: wget and curl - download tools not packaged, i.e. clojure-lsp binary git - clone configuration files and projects (see Git version control section) openssh - SSH service and tools to generate SSH keys pkg install curl wget git openssh Configure a Git Identify and SSH key to before committing and pushing changes, or cloning repositories using the SSH protocol. practicalli/dotfiles contains example configuration, ignore patterns and commit template for using Git.","title":"Tools to download binaries and configuration"},{"location":"termux/setup/#optional-configure-termux-settings","text":"nano ~/.termu/termux.properties to configure the default settings for termux. termux-reload-settings if any of the values are set (restarting Termux is not enough to load setting changes) The defaults are suitable for the majority of uses, although you may wish to consider: fullscreen set to true to us the whole screen, hiding Android menu bars, etc. hide-soft-keyboard-on-startup set to true if always using a physical keyboard default-working-directory to save files user files and directories in an alternative location, If swiping from left edge of the screen is already taken, set key bindings for creating a new termux session, naming a session and switching between sessions. Alternatively, use byobu to create and switch between its tabs for multiple terminal sessions.","title":"[Optional] Configure Termux Settings"},{"location":"termux/setup/#set-color-scheme-and-font","text":"The Termux:Styling plug provides menus for selecting terminal color scheme and font to use Press and hold on the Termux screen to show the context menu and select the Style menu. On smaller screens select More > Style If Termux:Styling plugin was not installed, a prompt will display asking if the plugin should be installed A menu appears with Choose Color and Choose Font Select Choose Color to select from the available list of colour schemes, e.g. Gruvbox Dark or Gruvbox Light ~/.termux/colors.properties file is added when selecting a colour scheme, defining Hex colors from the theme selected. Select Choose Font to select from the available fonts, e.g. FiraCode or Ubuntu ~/.termux/font.ttf font file is added when selecting a font. Termux:Styling uses NerdFonts for icons All fonts installed via Termux:Styling have been patched with NerdFonts , providing several thousand icons to use within the terminal prompt and Neovim itself (e.g. VimDevIcons).","title":"Set Color Scheme and Font"},{"location":"termux/spacemacs/","text":"Install Spacemacs \u03bb\ufe0e Emacs version 28 availabe as current package pkg install emacs Clone Spacemacs \u03bb\ufe0e Use your favourite git client or the following command in a terminal window to clone Spacemacs: Free Desktop XDG config Classic config git clone https://github.com/syl20bnr/spacemacs ~/.config/emacs git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d Clone Practicalli Spacemacs configuration \u03bb\ufe0e Clone practicalli/spacemacs.d configuration or first create a fork and clone that fork Free Desktop XDG config Classic config Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.config/spacemacs Using HTTPS git clone https://github.com/practicalli/spacemacs.d ~/.config/spacemacs ~/.config/spacemacs/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.spacemacs.d Using HTTP git clone https://github.com/practicalli/spacemacs.d ~/.spacemacs.d ~/.spacemacs.d/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Searching files \u03bb\ufe0e Spacemacs uses ripgrep, a highly optimised tool for finding files on the operating system. pkg install ripgrep","title":"Spacemacs"},{"location":"termux/spacemacs/#install-spacemacs","text":"Emacs version 28 availabe as current package pkg install emacs","title":"Install Spacemacs"},{"location":"termux/spacemacs/#clone-spacemacs","text":"Use your favourite git client or the following command in a terminal window to clone Spacemacs: Free Desktop XDG config Classic config git clone https://github.com/syl20bnr/spacemacs ~/.config/emacs git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d","title":"Clone Spacemacs"},{"location":"termux/spacemacs/#clone-practicalli-spacemacs-configuration","text":"Clone practicalli/spacemacs.d configuration or first create a fork and clone that fork Free Desktop XDG config Classic config Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.config/spacemacs Using HTTPS git clone https://github.com/practicalli/spacemacs.d ~/.config/spacemacs ~/.config/spacemacs/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence. Using SSH git clone git@github.com:practicalli/spacemacs.d.git ~/.spacemacs.d Using HTTP git clone https://github.com/practicalli/spacemacs.d ~/.spacemacs.d ~/.spacemacs.d/init.el is the main configuration file, ensure ~/.spacemacs file does not exist as that file would take precedence.","title":"Clone Practicalli Spacemacs configuration"},{"location":"termux/spacemacs/#searching-files","text":"Spacemacs uses ripgrep, a highly optimised tool for finding files on the operating system. pkg install ripgrep","title":"Searching files"},{"location":"termux/using-termux/","text":"Using Termux \u03bb\ufe0e Start Termux app and a terminal prompt is shown, along with the standard Android software keyboard. An extended keyboard is provided with common key bindings for the command line interface (Tab, Esc, Ctrl, arrow keys, etc.). Keyboards \u03bb\ufe0e Termux provides an extended keyboard with key combinations not possible with the Android software keyboard, i.e Ctrl-c , arrow keys, etc. TAB is especially useful for driving command and filename completion. Volume Up + q toggles the extended keyboard, so more screen is available when using a hardware keyboard. Connect a hardware keyboard for the best experience, e.g the Keyboard.io atreus is an excellent and highly portable mechanical keyboard. The software keyboard is automatically switched off when a hardware keyboard is connected, although the extended keyboard is still displayed by default. Adjusting Font size \u03bb\ufe0e Pinch the screen inwards to zoom out making the text font smaller. Pinch the screen outwards to zoom in making the text font larger. Termux menus \u03bb\ufe0e Termux has three menus: A context menu, navigation drawer and Termux section of the Android notification. The context menu is shown by a long press anywhere on the terminal screen: Select and Paste text to share text with other applications Reset the terminal if it gets stuck or Hangup to exit the current terminal session Style the terminal by selecting a font and a color scheme The navigation drawer is shown by swiping inwards from the left of the screen list and select terminal sessions, set a name for a session with a long press A button to toggle visibility of the touch keyboard. A button to create new terminal sessions (long press for creating a named session or a fail-safe one). If gesture navigation is enabled in Android, hold the edge of the screen briefly before swiping to bring up the navigation drawer The Android notification menu contains a Termux section. Press the Termux section to show the current terminal session or expand the Termux section to exiting all running terminal sessions or aquire a wake lock to avoid Termux entering sleep mode. A wake lock allows server and other background processes to run reliably and to continue to receive notifications Package management \u03bb\ufe0e Termux provides a Linux command line experience, providing a wide range of Unix tools and development environments. Termux uses a Debian based system and packages are easily installed apt install add tools and libraries to the Linux environment from the curated packages in the software center apt update updates the list of packages fromhe software center apt list --upgradable shows list of packages with new versions apt upgrade install new versions of currently installed packages apt-cache search --names-only - search for packages that include a specific pattern in their name. apt-cache show - shows detail of the supplied package name, including a description pkg is an alias for apt , the advance package tool, although there seems little benefit to using pkg if familiar with apt (they are both 3 characters) Byobu terminal tab manager \u03bb\ufe0e Byobu is an alternative to Termux provides a single terminal prompt. Byobu provides multiple shell prompts, allowing individual Clojure tools and editors to be run from the Termux prompt simultaneously. Practicalli uses byobu to run Neovim, a Clojure REPL and unit test watcher in separate byobu tabs with the ability to add further tabs for other command line tools. pkg install byobu F2 to create a new tab F3 to select previous tab F4 to select next tab byobu-enable command will configure the current shell to run byobu on startup. Test this is working by typing exit in Termux and start Termux app again. byobu-disable stops this behaviour and byobu will need to be run manually after starting Termux. Run the byobu-enable command again if zsh is configured after this step or if adding any other shell to Termux.","title":"Using Termux"},{"location":"termux/using-termux/#using-termux","text":"Start Termux app and a terminal prompt is shown, along with the standard Android software keyboard. An extended keyboard is provided with common key bindings for the command line interface (Tab, Esc, Ctrl, arrow keys, etc.).","title":"Using Termux"},{"location":"termux/using-termux/#keyboards","text":"Termux provides an extended keyboard with key combinations not possible with the Android software keyboard, i.e Ctrl-c , arrow keys, etc. TAB is especially useful for driving command and filename completion. Volume Up + q toggles the extended keyboard, so more screen is available when using a hardware keyboard. Connect a hardware keyboard for the best experience, e.g the Keyboard.io atreus is an excellent and highly portable mechanical keyboard. The software keyboard is automatically switched off when a hardware keyboard is connected, although the extended keyboard is still displayed by default.","title":"Keyboards"},{"location":"termux/using-termux/#adjusting-font-size","text":"Pinch the screen inwards to zoom out making the text font smaller. Pinch the screen outwards to zoom in making the text font larger.","title":"Adjusting Font size"},{"location":"termux/using-termux/#termux-menus","text":"Termux has three menus: A context menu, navigation drawer and Termux section of the Android notification. The context menu is shown by a long press anywhere on the terminal screen: Select and Paste text to share text with other applications Reset the terminal if it gets stuck or Hangup to exit the current terminal session Style the terminal by selecting a font and a color scheme The navigation drawer is shown by swiping inwards from the left of the screen list and select terminal sessions, set a name for a session with a long press A button to toggle visibility of the touch keyboard. A button to create new terminal sessions (long press for creating a named session or a fail-safe one). If gesture navigation is enabled in Android, hold the edge of the screen briefly before swiping to bring up the navigation drawer The Android notification menu contains a Termux section. Press the Termux section to show the current terminal session or expand the Termux section to exiting all running terminal sessions or aquire a wake lock to avoid Termux entering sleep mode. A wake lock allows server and other background processes to run reliably and to continue to receive notifications","title":"Termux menus"},{"location":"termux/using-termux/#package-management","text":"Termux provides a Linux command line experience, providing a wide range of Unix tools and development environments. Termux uses a Debian based system and packages are easily installed apt install add tools and libraries to the Linux environment from the curated packages in the software center apt update updates the list of packages fromhe software center apt list --upgradable shows list of packages with new versions apt upgrade install new versions of currently installed packages apt-cache search --names-only - search for packages that include a specific pattern in their name. apt-cache show - shows detail of the supplied package name, including a description pkg is an alias for apt , the advance package tool, although there seems little benefit to using pkg if familiar with apt (they are both 3 characters)","title":"Package management"},{"location":"termux/using-termux/#byobu-terminal-tab-manager","text":"Byobu is an alternative to Termux provides a single terminal prompt. Byobu provides multiple shell prompts, allowing individual Clojure tools and editors to be run from the Termux prompt simultaneously. Practicalli uses byobu to run Neovim, a Clojure REPL and unit test watcher in separate byobu tabs with the ability to add further tabs for other command line tools. pkg install byobu F2 to create a new tab F3 to select previous tab F4 to select next tab byobu-enable command will configure the current shell to run byobu on startup. Test this is working by typing exit in Termux and start Termux app again. byobu-disable stops this behaviour and byobu will need to be run manually after starting Termux. Run the byobu-enable command again if zsh is configured after this step or if adding any other shell to Termux.","title":"Byobu terminal tab manager"},{"location":"testing/","text":"Testing \u03bb\ufe0e There are many aspects to testing software throughout the development lifecycle. Category Description Unit testing Assertion based testing of specific functions (units) Specification testing Checking data and functions conform to clojure.spec specifications Generative testing Automatically generated data to test specifications Integration testing Tests across system components and multiple systems, typically during the build process Performance testing Measuring the resources taken during function calls and system events Load testing Measuring the capacity for the system to manage concurrent events Unit testing \u03bb\ufe0e clojure.test is the de facto unit testing framework for Clojure. Tests have a simple syntax using deftest to contain multiple assertions defined with is . It is part of the Clojure.core library and therefore accessible to all Clojure projects. expectations.clojure.test library can be added to clojure test to provide expectations style assertions ( expect , more , more-of , etc.). Specification testing - clojure.spec \u03bb\ufe0e Defining specifications around functions and data structures, testing to ensure those contracts are not broken. Instrumentation of functions ensures that function calls follow specifications, including arguments, return values and a relationship between both. Generative Testing \u03bb\ufe0e Tests are only as good as the thought that goes into them. Generative testing can create a wider range of testing scenarios by providing generated data for tests. This approach is very good at catching conditions that were not considered. Integration testing \u03bb\ufe0e Continuous Integration (CI) services CircleCI, GitHub and GitLabs all support Clojure projects. Clojure has several test runners that can be used with CI servers and practicalli/clojure-deps.edn defines a range of aliases for Clojure test runners . :test/run to run lambdaisland/kaocha test runner, which is configured to stop immediately if any tests fail, minimising the time the CI workflow is running. test/cognitect to run cognitect-labs/test-runner , a light-weight test runner Performance testing \u03bb\ufe0e Tesing the execution time of specific functions or groups of functions, typically within a namespace. time is a quick and easy tool to give a rough comparison of performance. criterium provides more accurate guidance on performance Load / Stress Testing \u03bb\ufe0e Testing the whole system under load that simulate the stress the system would be placed under in normal production environments. Gattling is a JVM load tool. There are many on-line load testing tools if you have a web facing application.","title":"Testing"},{"location":"testing/#testing","text":"There are many aspects to testing software throughout the development lifecycle. Category Description Unit testing Assertion based testing of specific functions (units) Specification testing Checking data and functions conform to clojure.spec specifications Generative testing Automatically generated data to test specifications Integration testing Tests across system components and multiple systems, typically during the build process Performance testing Measuring the resources taken during function calls and system events Load testing Measuring the capacity for the system to manage concurrent events","title":"Testing"},{"location":"testing/#unit-testing","text":"clojure.test is the de facto unit testing framework for Clojure. Tests have a simple syntax using deftest to contain multiple assertions defined with is . It is part of the Clojure.core library and therefore accessible to all Clojure projects. expectations.clojure.test library can be added to clojure test to provide expectations style assertions ( expect , more , more-of , etc.).","title":"Unit testing"},{"location":"testing/#specification-testing-clojurespec","text":"Defining specifications around functions and data structures, testing to ensure those contracts are not broken. Instrumentation of functions ensures that function calls follow specifications, including arguments, return values and a relationship between both.","title":"Specification testing - clojure.spec"},{"location":"testing/#generative-testing","text":"Tests are only as good as the thought that goes into them. Generative testing can create a wider range of testing scenarios by providing generated data for tests. This approach is very good at catching conditions that were not considered.","title":"Generative Testing"},{"location":"testing/#integration-testing","text":"Continuous Integration (CI) services CircleCI, GitHub and GitLabs all support Clojure projects. Clojure has several test runners that can be used with CI servers and practicalli/clojure-deps.edn defines a range of aliases for Clojure test runners . :test/run to run lambdaisland/kaocha test runner, which is configured to stop immediately if any tests fail, minimising the time the CI workflow is running. test/cognitect to run cognitect-labs/test-runner , a light-weight test runner","title":"Integration testing"},{"location":"testing/#performance-testing","text":"Tesing the execution time of specific functions or groups of functions, typically within a namespace. time is a quick and easy tool to give a rough comparison of performance. criterium provides more accurate guidance on performance","title":"Performance testing"},{"location":"testing/#load-stress-testing","text":"Testing the whole system under load that simulate the stress the system would be placed under in normal production environments. Gattling is a JVM load tool. There are many on-line load testing tools if you have a web facing application.","title":"Load / Stress Testing"},{"location":"testing/kaocha-test-runner/","text":"Kaocha Test Runner \u03bb\ufe0e LambdaIsland/Kaocha is a feature rich test runner for Clojure and ClojureScript. Koacha is typically run on the command line or as part of a continuous integration workflow. Kaocha can also be run as an alternative to the cider-test runner as the Spacemacs Clojure layer now includes kaocha-runner.el . Kaocha provides options to fail-fast (stops when a test fails) and Using Kaocha from Emacs Cider \u03bb\ufe0e SPC f e d to edit the Spacemacs configuration file, adding clojure-enable-kaocha-runner t as a variable to the Clojure layer. Start a REPL process that includes the kaocha library :lib/kaocha alias in practicalli/clojure-deps-edn includes Kaocha as a library clojure -M:lib/kaocha:repl/rebel Key bindings \u03bb\ufe0e , t k a to run all tests , t k t to run the deftest at point (under the cursor) , t k n to run tests in the current namespace , t k w to show warnings from the kaocha runner , t k h to hide the kaocha test window Kaochan runner uses kaocha.repl kaocha-runner.el uses the the same appraoch as running Kaocha from the REPL Using Kaocha from Command Line \u03bb\ufe0e Kaocha on the command line will run tests from the saved code files, so is very useful to run before committing files as well as during a Continuous Integration workflow. practicalli/clojure-deps-edn defines aliases to run Kaocha from the clojure command: clojure -X:test/run will run all tests found in the project, unless there is a failing test which will end the test run. clojure -X:test/watch runs all test and then watches for changes to the test code, running again if a change is detected. Kaocha shell script \u03bb\ufe0e Kaocha install guide recommends creating an executable shell script file, i.e. bin/kaocha Use the :test/run alias from practicalli/clojure-deps-edn (or create an alias in the project deps.edn file) #!/usr/bin/env bash clojure -X:test/run \" $@ \" Run the shell script to run all the tests bin/kaocha To continually watch a function, pass the watch argument :watch? true bin/kaocha :watch? true Or define a binary that always watches, e.g. bin/kaocha-watch using the :test/watch alias from practicalli/clojure-deps-edn #!/usr/bin/env bash clojure -X:test/watch \" $@ \" Configure kaocha in tests.edn tests.edn in the root of a project can define the full range of options for Kaocha configuration options and is the preferred approach. Continuous Integration workflow \u03bb\ufe0e Add :test/run alias to the project deps.edn file and define kaocha configuration in a tests.edn file in the root of the project. Define a job that runs the tests that calls either the kaocha script or the clojure command to run all the tests. Banking on Clojure - using Kaocha Orb with Circle CI","title":"Kaocha Test Runner"},{"location":"testing/kaocha-test-runner/#kaocha-test-runner","text":"LambdaIsland/Kaocha is a feature rich test runner for Clojure and ClojureScript. Koacha is typically run on the command line or as part of a continuous integration workflow. Kaocha can also be run as an alternative to the cider-test runner as the Spacemacs Clojure layer now includes kaocha-runner.el . Kaocha provides options to fail-fast (stops when a test fails) and","title":"Kaocha Test Runner"},{"location":"testing/kaocha-test-runner/#using-kaocha-from-emacs-cider","text":"SPC f e d to edit the Spacemacs configuration file, adding clojure-enable-kaocha-runner t as a variable to the Clojure layer. Start a REPL process that includes the kaocha library :lib/kaocha alias in practicalli/clojure-deps-edn includes Kaocha as a library clojure -M:lib/kaocha:repl/rebel","title":"Using Kaocha from Emacs Cider"},{"location":"testing/kaocha-test-runner/#key-bindings","text":", t k a to run all tests , t k t to run the deftest at point (under the cursor) , t k n to run tests in the current namespace , t k w to show warnings from the kaocha runner , t k h to hide the kaocha test window Kaochan runner uses kaocha.repl kaocha-runner.el uses the the same appraoch as running Kaocha from the REPL","title":"Key bindings"},{"location":"testing/kaocha-test-runner/#using-kaocha-from-command-line","text":"Kaocha on the command line will run tests from the saved code files, so is very useful to run before committing files as well as during a Continuous Integration workflow. practicalli/clojure-deps-edn defines aliases to run Kaocha from the clojure command: clojure -X:test/run will run all tests found in the project, unless there is a failing test which will end the test run. clojure -X:test/watch runs all test and then watches for changes to the test code, running again if a change is detected.","title":"Using Kaocha from Command Line"},{"location":"testing/kaocha-test-runner/#kaocha-shell-script","text":"Kaocha install guide recommends creating an executable shell script file, i.e. bin/kaocha Use the :test/run alias from practicalli/clojure-deps-edn (or create an alias in the project deps.edn file) #!/usr/bin/env bash clojure -X:test/run \" $@ \" Run the shell script to run all the tests bin/kaocha To continually watch a function, pass the watch argument :watch? true bin/kaocha :watch? true Or define a binary that always watches, e.g. bin/kaocha-watch using the :test/watch alias from practicalli/clojure-deps-edn #!/usr/bin/env bash clojure -X:test/watch \" $@ \" Configure kaocha in tests.edn tests.edn in the root of a project can define the full range of options for Kaocha configuration options and is the preferred approach.","title":"Kaocha shell script"},{"location":"testing/kaocha-test-runner/#continuous-integration-workflow","text":"Add :test/run alias to the project deps.edn file and define kaocha configuration in a tests.edn file in the root of the project. Define a job that runs the tests that calls either the kaocha script or the clojure command to run all the tests. Banking on Clojure - using Kaocha Orb with Circle CI","title":"Continuous Integration workflow"},{"location":"testing/unit-testing/","text":"Unit Testing \u03bb\ufe0e In Clojure the unit under test is the function. Unit test coverage should test all public function that form the API of their respective namespace. clojure.test namespace provides a unit testing framework and is included in the Clojure library, so is available in all Clojure projects. Principles for writing test code \u03bb\ufe0e One test namespace for each src namespace One deftest function for each function under test Multiple is assertions for one function Group assertions in testing and provide a meaningful description of that grouping, adding more information when reviewing test failures especially for larger code bases. Requiring Namespaces \u03bb\ufe0e A test namespace has a singular purpose to test a matching application namespace. Therefore the idiomatic approach is to :refer specific functions from clojure.test . REPL Clojure Project ( require ' [ clojure.test :refer [ deftest is testing ]]) The namespace under test should be referred, using a meaningful alias name. ( require ' [ practicalli.playground :as playground ]) Add clojure.test to the namespace definition along with the namespace under test. ( ns practicalli.app-namespace-test ( :require ' [ clojure.test :refer [ deftest is testing ]] [ practicalli.app-namespace :as app-namespace ])) Providing an alias that is the same name as the namespace being tested creates easily readable test code. Project structure with tests \u03bb\ufe0e By convention, separate src and test directories are used to hold the source code and the code that tests the source code. For each source code file in src there should be a corresponding file in test with the same name and -test postfix. For example, code to test the src/codewars/rock_paper_scissors.clj is saved in the file src/codewars/rock_paper_scissors_test.clj file. Create Projects from templates Templates typically include a parallel test and src directory structure. The clj-new tool has build it templates (app, lib) and will create src and test directories in the projects it creates. clojure -X:project/new :template app :name practicalli/rock-paper-scissors-lizard-spock References \u03bb\ufe0e Example based unit testing in Clojure - PurelyFunctional.tv","title":"Unit Testing"},{"location":"testing/unit-testing/#unit-testing","text":"In Clojure the unit under test is the function. Unit test coverage should test all public function that form the API of their respective namespace. clojure.test namespace provides a unit testing framework and is included in the Clojure library, so is available in all Clojure projects.","title":"Unit Testing"},{"location":"testing/unit-testing/#principles-for-writing-test-code","text":"One test namespace for each src namespace One deftest function for each function under test Multiple is assertions for one function Group assertions in testing and provide a meaningful description of that grouping, adding more information when reviewing test failures especially for larger code bases.","title":"Principles for writing test code"},{"location":"testing/unit-testing/#requiring-namespaces","text":"A test namespace has a singular purpose to test a matching application namespace. Therefore the idiomatic approach is to :refer specific functions from clojure.test . REPL Clojure Project ( require ' [ clojure.test :refer [ deftest is testing ]]) The namespace under test should be referred, using a meaningful alias name. ( require ' [ practicalli.playground :as playground ]) Add clojure.test to the namespace definition along with the namespace under test. ( ns practicalli.app-namespace-test ( :require ' [ clojure.test :refer [ deftest is testing ]] [ practicalli.app-namespace :as app-namespace ])) Providing an alias that is the same name as the namespace being tested creates easily readable test code.","title":"Requiring Namespaces"},{"location":"testing/unit-testing/#project-structure-with-tests","text":"By convention, separate src and test directories are used to hold the source code and the code that tests the source code. For each source code file in src there should be a corresponding file in test with the same name and -test postfix. For example, code to test the src/codewars/rock_paper_scissors.clj is saved in the file src/codewars/rock_paper_scissors_test.clj file. Create Projects from templates Templates typically include a parallel test and src directory structure. The clj-new tool has build it templates (app, lib) and will create src and test directories in the projects it creates. clojure -X:project/new :template app :name practicalli/rock-paper-scissors-lizard-spock","title":"Project structure with tests"},{"location":"testing/unit-testing/#references","text":"Example based unit testing in Clojure - PurelyFunctional.tv","title":"References"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/","text":"Configure Unit Testing for deps.edn projects \u03bb\ufe0e Cider test runner is a convenient way to run Clojure unit tests, using the same REPL for evaluating source code. The test directory must be included in the classpath when running the REPL, as test code is evaluated in the running REPL. An alias should be used to include the test directory. The test path should not be part of the main :paths configuration, otherwise test code would be included in the jar or uberjar package and deployment. A .dir-locals.el file can include any number of aliases when using Cider jack-in. {% tabs practicalli=\"practicalli/clojure-deps-edn\", deps=\"Manual deps.edn projects\" %} {% content \"practicalli\" %} Practicalli user level aliases \u03bb\ufe0e practicalli/clojure-deps-edn user-level configuration contains several aliases for running tests within the CIDER jack-in REPL. :env/test adds the test directory to the class path and enables CIDER test runner to find the test code. This is the only alias required if using Cider test runner. :lib/kaocha add the kaocha library to the class path, so kaocha can be used instead of CIDER test runner . Other aliases can be used with the :env/test alias to support cider-connect approach: :repl/cider include the nrepl and cider-nrepl libraries and starts an nREPL server connected to the REPL :repl/rebel run Rebel Readline, providing a rich terminal UI for the REPL {% content \"deps\" %} Add test directory \u03bb\ufe0e Add the :env/dev alias to the project deps.edn file or user level configuration. :aliases { :env/test { :extra-paths [ \"test\" ]} } Terminal REPL UIs with nREPL \u03bb\ufe0e Use cider-connect to connect to the Clojure REPL process started in a terminal window with the following command: clojure -M:env/test:repl/cider-clj Use the :repl/rebel-nrepl alias to also run a Rebel UI for the REPL in the terminal. clojure -M:env/test:repl/rebel-nrepl Alias to run a simple Terminal UI REPL with nREPL support \u03bb\ufe0e Run a REPL using nREPL server that starts an nREPL server, enabling CIDER to connect via cider-connect-clj :repl/cider { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[cider.nrepl/cider-middleware]\" \"-i\" ]} Hint::Headless REPL \u03bb\ufe0e Remove the \"-i\" if a headless (non-interactive) REPL is required, useful if only interacting with Clojure code via the nREPL connected editor. Alias to run a Rebel REPL with nREPL support \u03bb\ufe0e Rebel readline provides a rich terminal UI with nrepl server , enabling CIDER to connect via cider-connect-clj :repl/rebel { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" } com.bhauman/rebel-readline { :mvn/version \"0.1.4\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[cider.nrepl/cider-middleware]\" \"-i\" \"-f\" \"rebel-readline.main/-main\" ]} Hint:: practicalli/clojure-deps-edn contains common tools and aliases \u03bb\ufe0e practicalli/clojure-deps-edn contains aliases for all aspects of Clojure development with the CLI tools. {% endtabs %} Using Cider Connect \u03bb\ufe0e Start the REPL in a terminal including the test directory and starting an nREPL server for CIDER to connect too. clojure -M:env/test:repl/cider Alternatively, use a rich terminal UI for the REPL using Rebel Readline which will also start an nREPL server for Cider to connect too. clojure -M:env/test:repl/rebel Using CIDER jack-in \u03bb\ufe0e .dir-locals.el file can define aliases which are always included during cider-jack-in . Add the variable cider-clojure-cli-aliases with a names of one or more alias names, which are from either the project deps.edn file or the user level deps.edn configuration. SPC p e creates or opens an existing .dir-locals.el file for the current project. (( clojure-mode . (( cider-clojure-cli-aliases . \":env/test\" )))) Remember to SPC b R ( revert-buffer ) on an existing project buffer, or open a file from the current project, to force Emacs to load in any changes to a .dir-locals.el file. Hint::Project configuration with .dir-locals.el \u03bb\ufe0e Project level configuration section contains many example configurations that can be set via .dir-locals.el file. Remember to revert-buffer an existing project buffer or open a new buffer to load in changes from the .dir-locals.el file. Edit the jack-in command \u03bb\ufe0e SPU u , ' uses the Emacs universal argument with sesman-start and displays the command line to be run. Add :env/test directly after the -M flag and before the :cider/nrepl alias SPC u is the Spacemacs equivalent of C-u in Emacs. Checking the jack-in command \u03bb\ufe0e SPC b m opens the messages buffer and the full command should be shown in the messages history.","title":"Cider test deps edn projects"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#configure-unit-testing-for-depsedn-projects","text":"Cider test runner is a convenient way to run Clojure unit tests, using the same REPL for evaluating source code. The test directory must be included in the classpath when running the REPL, as test code is evaluated in the running REPL. An alias should be used to include the test directory. The test path should not be part of the main :paths configuration, otherwise test code would be included in the jar or uberjar package and deployment. A .dir-locals.el file can include any number of aliases when using Cider jack-in. {% tabs practicalli=\"practicalli/clojure-deps-edn\", deps=\"Manual deps.edn projects\" %} {% content \"practicalli\" %}","title":"Configure Unit Testing for deps.edn projects"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#practicalli-user-level-aliases","text":"practicalli/clojure-deps-edn user-level configuration contains several aliases for running tests within the CIDER jack-in REPL. :env/test adds the test directory to the class path and enables CIDER test runner to find the test code. This is the only alias required if using Cider test runner. :lib/kaocha add the kaocha library to the class path, so kaocha can be used instead of CIDER test runner . Other aliases can be used with the :env/test alias to support cider-connect approach: :repl/cider include the nrepl and cider-nrepl libraries and starts an nREPL server connected to the REPL :repl/rebel run Rebel Readline, providing a rich terminal UI for the REPL {% content \"deps\" %}","title":"Practicalli user level aliases"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#add-test-directory","text":"Add the :env/dev alias to the project deps.edn file or user level configuration. :aliases { :env/test { :extra-paths [ \"test\" ]} }","title":"Add test directory"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#terminal-repl-uis-with-nrepl","text":"Use cider-connect to connect to the Clojure REPL process started in a terminal window with the following command: clojure -M:env/test:repl/cider-clj Use the :repl/rebel-nrepl alias to also run a Rebel UI for the REPL in the terminal. clojure -M:env/test:repl/rebel-nrepl","title":"Terminal REPL UIs with nREPL"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#alias-to-run-a-simple-terminal-ui-repl-with-nrepl-support","text":"Run a REPL using nREPL server that starts an nREPL server, enabling CIDER to connect via cider-connect-clj :repl/cider { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[cider.nrepl/cider-middleware]\" \"-i\" ]}","title":"Alias to run a simple Terminal UI REPL with nREPL support"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#hintheadless-repl","text":"Remove the \"-i\" if a headless (non-interactive) REPL is required, useful if only interacting with Clojure code via the nREPL connected editor.","title":"Hint::Headless REPL"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#alias-to-run-a-rebel-repl-with-nrepl-support","text":"Rebel readline provides a rich terminal UI with nrepl server , enabling CIDER to connect via cider-connect-clj :repl/rebel { :extra-deps { nrepl/nrepl { :mvn/version \"0.9.0\" } cider/cider-nrepl { :mvn/version \"0.27.4\" } com.bhauman/rebel-readline { :mvn/version \"0.1.4\" }} :main-opts [ \"-m\" \"nrepl.cmdline\" \"--middleware\" \"[cider.nrepl/cider-middleware]\" \"-i\" \"-f\" \"rebel-readline.main/-main\" ]}","title":"Alias to run a Rebel REPL with nREPL support"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#hint-practicalliclojure-deps-edn-contains-common-tools-and-aliases","text":"practicalli/clojure-deps-edn contains aliases for all aspects of Clojure development with the CLI tools. {% endtabs %}","title":"Hint:: practicalli/clojure-deps-edn contains common tools and aliases"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#using-cider-connect","text":"Start the REPL in a terminal including the test directory and starting an nREPL server for CIDER to connect too. clojure -M:env/test:repl/cider Alternatively, use a rich terminal UI for the REPL using Rebel Readline which will also start an nREPL server for Cider to connect too. clojure -M:env/test:repl/rebel","title":"Using Cider Connect"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#using-cider-jack-in","text":".dir-locals.el file can define aliases which are always included during cider-jack-in . Add the variable cider-clojure-cli-aliases with a names of one or more alias names, which are from either the project deps.edn file or the user level deps.edn configuration. SPC p e creates or opens an existing .dir-locals.el file for the current project. (( clojure-mode . (( cider-clojure-cli-aliases . \":env/test\" )))) Remember to SPC b R ( revert-buffer ) on an existing project buffer, or open a file from the current project, to force Emacs to load in any changes to a .dir-locals.el file.","title":"Using CIDER jack-in"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#hintproject-configuration-with-dir-localsel","text":"Project level configuration section contains many example configurations that can be set via .dir-locals.el file. Remember to revert-buffer an existing project buffer or open a new buffer to load in changes from the .dir-locals.el file.","title":"Hint::Project configuration with .dir-locals.el"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#edit-the-jack-in-command","text":"SPU u , ' uses the Emacs universal argument with sesman-start and displays the command line to be run. Add :env/test directly after the -M flag and before the :cider/nrepl alias SPC u is the Spacemacs equivalent of C-u in Emacs.","title":"Edit the jack-in command"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#checking-the-jack-in-command","text":"SPC b m opens the messages buffer and the full command should be shown in the messages history.","title":"Checking the jack-in command"},{"location":"testing/unit-testing/configure-cider-test-runner/","text":"Configure CIDER test runner \u03bb\ufe0e Configure how the CIDER test runner operates Test reports on success Automatically running tests Custom test namespaces Macros to define tests Display Test Report on Success \u03bb\ufe0e By default the test report is displayed only when there are test failures and subsequent test runs. Configure cider-test-show-report-on-success to true to show the report buffer even if tests have never failed. In the Clojure layer config: ( clojure :variables cider-test-show-report-on-success t ) Or in dotspacemacs/user-config ( setq cider-test-show-report-on-success t ) CIDER Automatic Test Running \u03bb\ufe0e , T t ( cider-auto-test-mode ) toggles automatic test. , e b evaluates the current buffer and automatically runs the CIDER test runner using all tests for that namespace cider-auto-test-mode variable configures the state of automatic testing In the Clojure layer config: ( clojure :variables cider-auto-test-mode 1 ) Or in dotspacemacs/user-config ( cider-auto-test-mode 1 ) Custom Test Namespaces \u03bb\ufe0e By convention test namespaces follow that of the src namespaces, with a -test postfix, e.g. practicalli.app-main source namespace will have a matching practicalli.app-main-test test namespace. Configure the variable cider-test-infer-test-ns to call a function that takes the current namespace and returns the matching test namespace (which may be the same as the current namespace). In this example the CIDER test runner look for practicalli.test-app-main instead of practicalli.app-main-test ( defun cider-custom-test-ns-fn ( ns ) \"For a NS, return the test namespace, which may be the argument itself. This uses the convention of prefix 'test-' to the namespace name.\" ( when ns ( let (( prefix \"test-\" )) ( if ( string-prefix-p prefix ns ) ns ( concat prefix ns ))))) ( setq cider-test-infer-test-ns #' cider-custom-test-ns-fn ) Macros Used to Define Tests \u03bb\ufe0e CIDER test runner will not recognize individual tests that are not defined by deftest or defspec, Customize the variable cider-test-defining-forms and add forms for CIDER to recognize as individual test definitions.","title":"Configure CIDER test runner"},{"location":"testing/unit-testing/configure-cider-test-runner/#configure-cider-test-runner","text":"Configure how the CIDER test runner operates Test reports on success Automatically running tests Custom test namespaces Macros to define tests","title":"Configure CIDER test runner"},{"location":"testing/unit-testing/configure-cider-test-runner/#display-test-report-on-success","text":"By default the test report is displayed only when there are test failures and subsequent test runs. Configure cider-test-show-report-on-success to true to show the report buffer even if tests have never failed. In the Clojure layer config: ( clojure :variables cider-test-show-report-on-success t ) Or in dotspacemacs/user-config ( setq cider-test-show-report-on-success t )","title":"Display Test Report on Success"},{"location":"testing/unit-testing/configure-cider-test-runner/#cider-automatic-test-running","text":", T t ( cider-auto-test-mode ) toggles automatic test. , e b evaluates the current buffer and automatically runs the CIDER test runner using all tests for that namespace cider-auto-test-mode variable configures the state of automatic testing In the Clojure layer config: ( clojure :variables cider-auto-test-mode 1 ) Or in dotspacemacs/user-config ( cider-auto-test-mode 1 )","title":"CIDER Automatic Test Running"},{"location":"testing/unit-testing/configure-cider-test-runner/#custom-test-namespaces","text":"By convention test namespaces follow that of the src namespaces, with a -test postfix, e.g. practicalli.app-main source namespace will have a matching practicalli.app-main-test test namespace. Configure the variable cider-test-infer-test-ns to call a function that takes the current namespace and returns the matching test namespace (which may be the same as the current namespace). In this example the CIDER test runner look for practicalli.test-app-main instead of practicalli.app-main-test ( defun cider-custom-test-ns-fn ( ns ) \"For a NS, return the test namespace, which may be the argument itself. This uses the convention of prefix 'test-' to the namespace name.\" ( when ns ( let (( prefix \"test-\" )) ( if ( string-prefix-p prefix ns ) ns ( concat prefix ns ))))) ( setq cider-test-infer-test-ns #' cider-custom-test-ns-fn )","title":"Custom Test Namespaces"},{"location":"testing/unit-testing/configure-cider-test-runner/#macros-used-to-define-tests","text":"CIDER test runner will not recognize individual tests that are not defined by deftest or defspec, Customize the variable cider-test-defining-forms and add forms for CIDER to recognize as individual test definitions.","title":"Macros Used to Define Tests"},{"location":"testing/unit-testing/re-run-tests-from-test-report-buffer/","text":"Re-run test from test results buffer \u03bb\ufe0e A test report is only generated once any of the tests fail for the current REPL session. Once a test report has been created, further test runs will update the report. The test report is displayed in a new buffer. Tests can be re-run from the *cider-test-results* buffer, although this buffer does not support Evil normal state (PR's welcome). C-z to switch to Emacs state in order for these keybindings to work. Keyboard shortcut Description g Run test at point. n Run tests for current namespace. l Run tests for all loaded namespaces. p Run tests for all project namespaces. This loads the additional namespaces. f Re-run test failures/errors. M-p Move point to previous test. M-n Move point to next test. t or M-. Jump to test definition. d Display diff of actual vs expected. e Display test error cause and stacktrace info.","title":"Re run tests from test report buffer"},{"location":"testing/unit-testing/re-run-tests-from-test-report-buffer/#re-run-test-from-test-results-buffer","text":"A test report is only generated once any of the tests fail for the current REPL session. Once a test report has been created, further test runs will update the report. The test report is displayed in a new buffer. Tests can be re-run from the *cider-test-results* buffer, although this buffer does not support Evil normal state (PR's welcome). C-z to switch to Emacs state in order for these keybindings to work. Keyboard shortcut Description g Run test at point. n Run tests for current namespace. l Run tests for all loaded namespaces. p Run tests for all project namespaces. This loads the additional namespaces. f Re-run test failures/errors. M-p Move point to previous test. M-n Move point to next test. t or M-. Jump to test definition. d Display diff of actual vs expected. e Display test error cause and stacktrace info.","title":"Re-run test from  test results buffer"},{"location":"testing/unit-testing/refactor-unit-tests/","text":"Refactor Unit Tests \u03bb\ufe0e Before changing the names of tests defined with deftest, those tests should be un-evaluated, i.e. removed from the running REPL. Otherwise the tests will keep running and provide incorrect reports. , e u with the cursor on a deftest expression will remove that test from the REPL. A prompt in the mini-buffer is shown to confirm the removal. The name used for any deftest can be un-evaluated, assuming it has been evaluated at least once. So if a test is failing in the test report but does not exist in the code it can be removed without having to restart the REPL.","title":"Refactor Unit Tests"},{"location":"testing/unit-testing/refactor-unit-tests/#refactor-unit-tests","text":"Before changing the names of tests defined with deftest, those tests should be un-evaluated, i.e. removed from the running REPL. Otherwise the tests will keep running and provide incorrect reports. , e u with the cursor on a deftest expression will remove that test from the REPL. A prompt in the mini-buffer is shown to confirm the removal. The name used for any deftest can be un-evaluated, assuming it has been evaluated at least once. So if a test is failing in the test report but does not exist in the code it can be removed without having to restart the REPL.","title":"Refactor Unit Tests"},{"location":"testing/unit-testing/running-tests/","text":"Running unit tests in Cider \u03bb\ufe0e SPC p a switches between source and test buffers. , t n run all tests in the current namespace. This also loads any changes to those tests. , t a run all tests. If tests are changed or added, , e f to evaluate those tests to add them to the REPL or , e b on any test buffers that have changed. The results of running the tests are displayed in the mini-buffer, showing the number of tests run and how many passed and failed. Hint::Spacemacs loads current buffer before running tests \u03bb\ufe0e Run unit tests from the buffer that has changes or new tests. Otherwise, ensure all buffers with changes have been evaluated to ensure the tests run with the right src and test code. Using Test Selectors to run specific tests \u03bb\ufe0e Using the universal argument before calling CIDER test runner will prompt for test selector filters, running only those tests that match the selector inclusions/exclusions. SPC t a runs all the tests in a project. SPC u SPC t a prompts for test selectors and runs the matching tests in a project. SPC t l runs all tests currently evaluated in the REPL. SPC u SPC t l prompts for test selectors and runs the matching tests currently evaluated in the REPL. CIDER first prompts for the test selectors to include: Then prompts for the test selectors to exclude. A warning displays in the power line if CIDER does not find the test selector name. Running tests in the REPL buffer \u03bb\ufe0e , to open the REPL command menu and select run tests Auto Unit Test Mode \u03bb\ufe0e , T t to toggle auto test mode , e b will evaluate the current buffer and automatically run all tests. Hint::CIDER test report only created on test failure \u03bb\ufe0e To show a test report each time tests are run, add the variable cider-test-show-report-on-success t in the clojure layer list of the .spacemacs file. ( clojure :variables cider-test-show-report-on-success t )","title":"Running unit tests in Cider"},{"location":"testing/unit-testing/running-tests/#running-unit-tests-in-cider","text":"SPC p a switches between source and test buffers. , t n run all tests in the current namespace. This also loads any changes to those tests. , t a run all tests. If tests are changed or added, , e f to evaluate those tests to add them to the REPL or , e b on any test buffers that have changed. The results of running the tests are displayed in the mini-buffer, showing the number of tests run and how many passed and failed.","title":"Running unit tests in Cider"},{"location":"testing/unit-testing/running-tests/#hintspacemacs-loads-current-buffer-before-running-tests","text":"Run unit tests from the buffer that has changes or new tests. Otherwise, ensure all buffers with changes have been evaluated to ensure the tests run with the right src and test code.","title":"Hint::Spacemacs loads current buffer before running tests"},{"location":"testing/unit-testing/running-tests/#using-test-selectors-to-run-specific-tests","text":"Using the universal argument before calling CIDER test runner will prompt for test selector filters, running only those tests that match the selector inclusions/exclusions. SPC t a runs all the tests in a project. SPC u SPC t a prompts for test selectors and runs the matching tests in a project. SPC t l runs all tests currently evaluated in the REPL. SPC u SPC t l prompts for test selectors and runs the matching tests currently evaluated in the REPL. CIDER first prompts for the test selectors to include: Then prompts for the test selectors to exclude. A warning displays in the power line if CIDER does not find the test selector name.","title":"Using Test Selectors to run specific tests"},{"location":"testing/unit-testing/running-tests/#running-tests-in-the-repl-buffer","text":", to open the REPL command menu and select run tests","title":"Running tests in the REPL buffer"},{"location":"testing/unit-testing/running-tests/#auto-unit-test-mode","text":", T t to toggle auto test mode , e b will evaluate the current buffer and automatically run all tests.","title":"Auto Unit Test Mode"},{"location":"testing/unit-testing/running-tests/#hintcider-test-report-only-created-on-test-failure","text":"To show a test report each time tests are run, add the variable cider-test-show-report-on-success t in the clojure layer list of the .spacemacs file. ( clojure :variables cider-test-show-report-on-success t )","title":"Hint::CIDER test report only created on test failure"},{"location":"testing/unit-testing/writing-unit-tests/","text":"Writing Unit Tests with clojure.test \u03bb\ufe0e Unit tests are centered on assertions, testing if something returns a true or false value. is function is the simplest assertion and the most common. It checks to see if an expression given is true and if so then the assertion passes. If the value is false then that assertion fails. as provides a way to run the same assertion with different values, testing the same function with a collection of arguments. This provides a clean way to test a function without lots of repetition. testing is a macro to group multiple assertions together, providing a string in which to describe the context the assertions are testing. The well worded context string is invaluable for narrowing down on which assertions are failing. deftest is a collection of assertions, with or without testing expressions. The name of the deftest should be the name of the function it is testing with -test as a postfix. For example, the function practicalli.playground/calculator would have a deftest called practicalli.playground-test/calculator-test Simple Example \u03bb\ufe0e ( deftest public-function-in-namespace-test ( testing \"A description of the test\" ( is ( = 1 ( public-function arg ))) ( is ( predicate-function? arg )))) Testing assertions with a data set \u03bb\ufe0e The are macro can also be used to define assertions, especially when there would otherwise be multiple assertions that only differ by their test data. An are assertion defines the arguments to the test, the logic of the test and a series of test data. ( are [ x y ] ( = x y ) 2 ( + 1 1 ) 4 ( * 2 2 )) This is equivalent to writing ( do ( is ( = 2 ( + 1 1 ))) ( is ( = 4 ( * 2 2 )))) In this example 5 assertions are almost the same, so are a candidate to be refactored using the are macro. ( testing \"Tens to number words\" ( is ( = ' ( \"zero\" \"ten\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\1 \\0 )))) ( is ( = ' ( \"zero\" \"eleven\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\1 \\1 )))) ( is ( = ' ( \"zero\" \"twenty\" \"zero\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\2 \\0 )))) ( is ( = ' ( \"zero\" \"twenty\"\"one\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\2 \\1 )))) ( is ( = ' ( \"zero\" \"forty\" \"two\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\4 \\2 ))))) Refactor the assertions using are simplifies the code, making it simpler to change further and extend with more data. ( testing \"Tens to number words\" ( are [ words numbers ] ( = words ( sut/character-sequence->word-sequence dictionary/digit->word numbers )) ' ( \"zero\" \"ten\" ) ' ( \\0 \\1 \\0 ) ' ( \"zero\" \"eleven\" ) ' ( \\0 \\1 \\1 ) ' ( \"zero\" \"twenty\" \"zero\" ) ' ( \\0 \\2 \\0 ) ' ( \"zero\" \"twenty\"\"one\" ) ' ( \\0 \\2 \\1 ) ' ( \"zero\" \"forty\" \"two\" ) ' ( \\0 \\4 \\2 )) Project Examples: Code challenges with unit tests \u03bb\ufe0e practicalli/codewars-guides - deps.edn projects practicalli/exercism-clojure-guides - Leiningen projects Reference \u03bb\ufe0e For full details, visit the API for clojure.test","title":"Writing Unit Tests with clojure.test"},{"location":"testing/unit-testing/writing-unit-tests/#writing-unit-tests-with-clojuretest","text":"Unit tests are centered on assertions, testing if something returns a true or false value. is function is the simplest assertion and the most common. It checks to see if an expression given is true and if so then the assertion passes. If the value is false then that assertion fails. as provides a way to run the same assertion with different values, testing the same function with a collection of arguments. This provides a clean way to test a function without lots of repetition. testing is a macro to group multiple assertions together, providing a string in which to describe the context the assertions are testing. The well worded context string is invaluable for narrowing down on which assertions are failing. deftest is a collection of assertions, with or without testing expressions. The name of the deftest should be the name of the function it is testing with -test as a postfix. For example, the function practicalli.playground/calculator would have a deftest called practicalli.playground-test/calculator-test","title":"Writing Unit Tests with clojure.test"},{"location":"testing/unit-testing/writing-unit-tests/#simple-example","text":"( deftest public-function-in-namespace-test ( testing \"A description of the test\" ( is ( = 1 ( public-function arg ))) ( is ( predicate-function? arg ))))","title":"Simple Example"},{"location":"testing/unit-testing/writing-unit-tests/#testing-assertions-with-a-data-set","text":"The are macro can also be used to define assertions, especially when there would otherwise be multiple assertions that only differ by their test data. An are assertion defines the arguments to the test, the logic of the test and a series of test data. ( are [ x y ] ( = x y ) 2 ( + 1 1 ) 4 ( * 2 2 )) This is equivalent to writing ( do ( is ( = 2 ( + 1 1 ))) ( is ( = 4 ( * 2 2 )))) In this example 5 assertions are almost the same, so are a candidate to be refactored using the are macro. ( testing \"Tens to number words\" ( is ( = ' ( \"zero\" \"ten\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\1 \\0 )))) ( is ( = ' ( \"zero\" \"eleven\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\1 \\1 )))) ( is ( = ' ( \"zero\" \"twenty\" \"zero\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\2 \\0 )))) ( is ( = ' ( \"zero\" \"twenty\"\"one\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\2 \\1 )))) ( is ( = ' ( \"zero\" \"forty\" \"two\" ) ( sut/character-sequence->word-sequence dictionary/digit->word ' ( \\0 \\4 \\2 ))))) Refactor the assertions using are simplifies the code, making it simpler to change further and extend with more data. ( testing \"Tens to number words\" ( are [ words numbers ] ( = words ( sut/character-sequence->word-sequence dictionary/digit->word numbers )) ' ( \"zero\" \"ten\" ) ' ( \\0 \\1 \\0 ) ' ( \"zero\" \"eleven\" ) ' ( \\0 \\1 \\1 ) ' ( \"zero\" \"twenty\" \"zero\" ) ' ( \\0 \\2 \\0 ) ' ( \"zero\" \"twenty\"\"one\" ) ' ( \\0 \\2 \\1 ) ' ( \"zero\" \"forty\" \"two\" ) ' ( \\0 \\4 \\2 ))","title":"Testing assertions with a data set"},{"location":"testing/unit-testing/writing-unit-tests/#project-examples-code-challenges-with-unit-tests","text":"practicalli/codewars-guides - deps.edn projects practicalli/exercism-clojure-guides - Leiningen projects","title":"Project Examples: Code challenges with unit tests"},{"location":"testing/unit-testing/writing-unit-tests/#reference","text":"For full details, visit the API for clojure.test","title":"Reference"},{"location":"using-figwheel/","text":"Using Figwheel \u03bb\ufe0e","title":"Using Figwheel"},{"location":"using-figwheel/#using-figwheel","text":"","title":"Using Figwheel"},{"location":"using-figwheel/chestnut-template/","text":"Chestnut Template \u03bb\ufe0e","title":"Chestnut Template"},{"location":"using-figwheel/chestnut-template/#chestnut-template","text":"","title":"Chestnut Template"},{"location":"using-figwheel/starting-chestnut-emacs/","text":"Starting Figwheel (Emacs) \u03bb\ufe0e","title":"Starting Figwheel (Emacs)"},{"location":"using-figwheel/starting-chestnut-emacs/#starting-figwheel-emacs","text":"","title":"Starting Figwheel (Emacs)"},{"location":"using-figwheel/starting-chestnut-terminal/","text":"Starting Figwheel (Terminal) \u03bb\ufe0e","title":"Starting Figwheel (Terminal)"},{"location":"using-figwheel/starting-chestnut-terminal/#starting-figwheel-terminal","text":"","title":"Starting Figwheel (Terminal)"},{"location":"why-spacemacs/","text":"Why Spacemacs \u03bb\ufe0e Spacemacs provides highly productive tooling for any software development, supporting numerous programming languages and tool configuration syntax (Dockerfile, Makefile, Yaml, etc) Spacemacs takes the raw power of Emacs and adds years of experience from the community. Spacemacs uses Vim-style modal editing, providing simple use and learn key bindings for common tasks, dramatically enhancing productivity and fun. Spacemacs is fast to startup and lightweight thanks to its lazy loading of features. So it only loads in those features you need. The rest of this section goes into more details as to why you would choose Spacemacs for your developer life, including: simple configuration using layers removing the need to configure individual packages Clojure layer provides CIDER and clj-kondo support Consistently discoverable commands with mnemonic menu narrowing & completion to quickly find files and commands Effective editing with multiple states Transient State menus for repetitive actions Structural editing with Smartparens and Lisp mode Fast project & file management with Projectile , simple window & buffer management","title":"Why Spacemacs"},{"location":"why-spacemacs/#why-spacemacs","text":"Spacemacs provides highly productive tooling for any software development, supporting numerous programming languages and tool configuration syntax (Dockerfile, Makefile, Yaml, etc) Spacemacs takes the raw power of Emacs and adds years of experience from the community. Spacemacs uses Vim-style modal editing, providing simple use and learn key bindings for common tasks, dramatically enhancing productivity and fun. Spacemacs is fast to startup and lightweight thanks to its lazy loading of features. So it only loads in those features you need. The rest of this section goes into more details as to why you would choose Spacemacs for your developer life, including: simple configuration using layers removing the need to configure individual packages Clojure layer provides CIDER and clj-kondo support Consistently discoverable commands with mnemonic menu narrowing & completion to quickly find files and commands Effective editing with multiple states Transient State menus for repetitive actions Structural editing with Smartparens and Lisp mode Fast project & file management with Projectile , simple window & buffer management","title":"Why Spacemacs"},{"location":"why-spacemacs/clojure-layer/","text":"Spacemacs Clojure Layer Overview \u03bb\ufe0e The Clojure layer provides full language support and tooling including, autocomplete, refactor, inspector and debug, etc. Projects managed by Leiningen , Boot and Clojure CLI ( deps.edn ) are supported and automatically detected when running the REPL. CIDER is provided by the Clojure layer CIDER is the predominant package for Clojure development with Emacs and includes a range of supporting Emacs packages, curated to ensure those packages work well together. The Clojure layer uses the latest version of CIDER on Melpa , either release or latest snapshot. Features of the Clojure layer \u03bb\ufe0e CIDER provides a comprehensive range of tools to create quality Clojure code. Start a REPL (Clojure runtime environment) from Spacemacs and evaluate one or more expressions to see the results in the source code buffer, giving extremely fast feedback on the behavior of that code. REPL based Test runner and test reports smart code completion live static analysis with clj-kondo and Clojure LSP Documentation and source navigation Error report filtering Value inspector to visualise and navigate evaluation results Interactive debugging nREPL session management Further reading \u03bb\ufe0e Official CIDER docs for comprehensive details Cider Emacs style key bindings Clojure on Emacs - A CIDER workflow hack - Kris Jenkins, December 2013","title":"Clojure Support"},{"location":"why-spacemacs/clojure-layer/#spacemacs-clojure-layer-overview","text":"The Clojure layer provides full language support and tooling including, autocomplete, refactor, inspector and debug, etc. Projects managed by Leiningen , Boot and Clojure CLI ( deps.edn ) are supported and automatically detected when running the REPL. CIDER is provided by the Clojure layer CIDER is the predominant package for Clojure development with Emacs and includes a range of supporting Emacs packages, curated to ensure those packages work well together. The Clojure layer uses the latest version of CIDER on Melpa , either release or latest snapshot.","title":"Spacemacs Clojure Layer Overview"},{"location":"why-spacemacs/clojure-layer/#features-of-the-clojure-layer","text":"CIDER provides a comprehensive range of tools to create quality Clojure code. Start a REPL (Clojure runtime environment) from Spacemacs and evaluate one or more expressions to see the results in the source code buffer, giving extremely fast feedback on the behavior of that code. REPL based Test runner and test reports smart code completion live static analysis with clj-kondo and Clojure LSP Documentation and source navigation Error report filtering Value inspector to visualise and navigate evaluation results Interactive debugging nREPL session management","title":"Features of the Clojure layer"},{"location":"why-spacemacs/clojure-layer/#further-reading","text":"Official CIDER docs for comprehensive details Cider Emacs style key bindings Clojure on Emacs - A CIDER workflow hack - Kris Jenkins, December 2013","title":"Further reading"},{"location":"why-spacemacs/extensive-language-support/","text":"Extensive Language Support \u03bb\ufe0e","title":"Extensive Languages"},{"location":"why-spacemacs/extensive-language-support/#extensive-language-support","text":"","title":"Extensive Language Support"},{"location":"why-spacemacs/helm/","text":"Helm & completion \u03bb\ufe0e Spacemacs helps you find things quickly with a minimum of typing, using Emacs Helm - Helm documentation wiki . Helm is an incremental completion and selection narrowing framework. Its the central control tower of Spacemacs, it is used to manage buffers, projects, search results, configuration layers, toggles and more. For example, Helm helps you navigate files and directory names, only showing the matching names to the pattern you type. This minimises the need to type directory and file names in full. Helm Keybinding Helm action Ctrl + h Up to parent directory Ctrl + l Into sub directory / open file Ctrl + j Move down the helm menu Ctrl + k Move up the helm menu Tab Tab completion Meta + p Traverse Helm history Ctrl + y Paste kill ring into helm Space + w + b Switch to minibuffer Helm Transient State \u03bb\ufe0e Use the Helm transient state to navigate the Helm results using Vim keybindings ( hjkl ) and call additional actions on those results. Enter this transient state with M-SPC or S-M-SPC while in a Helm buffer, for example, when navigating the results such as file find SPC f f , buffer list SPC b b , or Emacs commands list SPC SPC . Gnome desktop binding clash M-SPC is used by the Gnome desktop for the window menu, so recommend you change the Gnome keyboard settings to use a different binding, i.e. Super w . Key Binding Description Meta + Space initiate the transient state Q quit transient state Tab switch to actions page and leave the transient state 1 execute action 0 2 execute action 1 3 execute action 2 4 execute action 3 5 execute action 4 6 execute action 5 7 execute action 6 8 execute action 7 9 execute action 8 0 execute action 9 A switch to actions page g go to first candidate ++G++ go to last candidate H go to previous source j select next candidate k select previous candidate l go to next source t mark current candidate ++T++ mark all candidates v execute persistent action Helm actions for Buffer list \u03bb\ufe0e The transient state menu is really great for running actions over multiple files. In this example Helm Transient State menu is used to select and kill multiple buffers easily. Combining the pattern based searching with marking files ( T marks all files listed for a particular pattern) makes it really easy to kill lots of Magit buffers that are no longer needed. Prompt when using layouts Layouts in Spacemacs show a prompt when killing a buffer that is not in the current layout, as seen at the end of the video when killing all magit buffers. Layers separate projects into their own groups of buffers so its easier to switch between multiple projects. Select a switches to the actions page, or using C-z displays the list off all the available actions for a buffer.","title":"Selection Narrowing"},{"location":"why-spacemacs/helm/#helm-completion","text":"Spacemacs helps you find things quickly with a minimum of typing, using Emacs Helm - Helm documentation wiki . Helm is an incremental completion and selection narrowing framework. Its the central control tower of Spacemacs, it is used to manage buffers, projects, search results, configuration layers, toggles and more. For example, Helm helps you navigate files and directory names, only showing the matching names to the pattern you type. This minimises the need to type directory and file names in full. Helm Keybinding Helm action Ctrl + h Up to parent directory Ctrl + l Into sub directory / open file Ctrl + j Move down the helm menu Ctrl + k Move up the helm menu Tab Tab completion Meta + p Traverse Helm history Ctrl + y Paste kill ring into helm Space + w + b Switch to minibuffer","title":"Helm &amp; completion"},{"location":"why-spacemacs/helm/#helm-transient-state","text":"Use the Helm transient state to navigate the Helm results using Vim keybindings ( hjkl ) and call additional actions on those results. Enter this transient state with M-SPC or S-M-SPC while in a Helm buffer, for example, when navigating the results such as file find SPC f f , buffer list SPC b b , or Emacs commands list SPC SPC . Gnome desktop binding clash M-SPC is used by the Gnome desktop for the window menu, so recommend you change the Gnome keyboard settings to use a different binding, i.e. Super w . Key Binding Description Meta + Space initiate the transient state Q quit transient state Tab switch to actions page and leave the transient state 1 execute action 0 2 execute action 1 3 execute action 2 4 execute action 3 5 execute action 4 6 execute action 5 7 execute action 6 8 execute action 7 9 execute action 8 0 execute action 9 A switch to actions page g go to first candidate ++G++ go to last candidate H go to previous source j select next candidate k select previous candidate l go to next source t mark current candidate ++T++ mark all candidates v execute persistent action","title":"Helm Transient State"},{"location":"why-spacemacs/helm/#helm-actions-for-buffer-list","text":"The transient state menu is really great for running actions over multiple files. In this example Helm Transient State menu is used to select and kill multiple buffers easily. Combining the pattern based searching with marking files ( T marks all files listed for a particular pattern) makes it really easy to kill lots of Magit buffers that are no longer needed. Prompt when using layouts Layouts in Spacemacs show a prompt when killing a buffer that is not in the current layout, as seen at the end of the video when killing all magit buffers. Layers separate projects into their own groups of buffers so its easier to switch between multiple projects. Select a switches to the actions page, or using C-z displays the list off all the available actions for a buffer.","title":"Helm actions for Buffer list"},{"location":"why-spacemacs/layers/","text":"Simple Layers and Configuration \u03bb\ufe0e Most language support and many other amazing features can be added to Emacs from many hundreds of packages created by the community. It does seem that there is a package for just about everything you want to do. Spacemacs uses Layers that organise these packages and the configuration to make them work seamlessly together. For example, the Clojure layer is composed of 9 different packages that you would otherwise have to know about and install and then get them to work together with a bit of configuration code. Layers make things very simple, requiring only one word to be added to the Spacemacs configuration file. Butterfly SPC SPC butterfly to activate in Spacemacs. Use this great power very carefully. Simple Configuration \u03bb\ufe0e Spacemacs provides a well tested configuration file called ~/.spacemacs that provides lots of sensible defaults and makes customising your experience very easy. This file is created during the Spacemacs installation. .spacemacs.d/init.el file can be used as an alternative location for .spacemacs and is easier to manage changes via version control. The ~/.spacemacs configuration file is composed of three important sections Section Purpose dotspacemacs/layers Layers provide a simple way to add language support and tooling to Spacemacs. A layer can contain elisp configuration and packages from Melpa/Elpa. Individual Emacs packages can also be added (if they do not exist in any layer) dotspacemacs/init configuration applied when Spacemacs first starts, eg evil or holy mode(emacs), themes, fonts, full screen, recent files, etc dotspacemacs/user-config Add your own customisation here Spacemacs dotfile configuration dotfile configuration details installation and syncronisation options Opening and reloading the configuration file \u03bb\ufe0e Spacemacs provides specific keybindings for opening and reloading the ~/.spacemacs configuration file. Vim Normal Emacs Description SPC f e d M-m f e d open the ~/.spacemacs file SPC f e R M-m f e R reload the configuration from ~/.spacemacs Restart after changing configuration SPC q r after changes to the Spacemacs configuration file is recommended, especially after significant changes, e.g. adding multiple layers SPC F e R to update the Spacemacs configuration without restarting Emacs. Adding a Layer \u03bb\ufe0e Simply open the ~/.spacemacs file and add the name of the layer you want in the section dotspacemacs-configuration-layers . Some layers also take additional configuration in the form of variables in the layer definition. See the Spacemacs documentation for a list of layers or open the help in Spacemacs SPC h SPC to list all the layers, pressing RET on a layer name to read about it. Available Layers \u03bb\ufe0e SPC h l (or M-m h l in holy mode) displays a list of all layers available in Spacemacs. Type the layer name or scroll down ( C-j ) to a layer name and press TAB to preview the documentation for that layer or RTN to open the docs for that layer in a buffer. Create your own layers with SPC SPC configuration-layer/create-layer . See the Spacemacs docs and Configuring Spacemacs, a tutorial for more information. Existing Emacs users \u03bb\ufe0e Consider the .spacemacs configuration file a replacement for the init.el file that would otherwise be use to define an Emacs configuration. Installing packages via the packages-list-packages method is ignored by Spacemacs. Any packages installed in this way will be ignored and deleted on Emacs startup. If a desired package is not included in any layer, a package can be used without a layer . dotspacemacs/user-config section of the ~/.spacemacs configuration file should contain personal Emacs Lisp configuration and is the last section of the Spacemacs configuration to load.","title":"Layer Configuration"},{"location":"why-spacemacs/layers/#simple-layers-and-configuration","text":"Most language support and many other amazing features can be added to Emacs from many hundreds of packages created by the community. It does seem that there is a package for just about everything you want to do. Spacemacs uses Layers that organise these packages and the configuration to make them work seamlessly together. For example, the Clojure layer is composed of 9 different packages that you would otherwise have to know about and install and then get them to work together with a bit of configuration code. Layers make things very simple, requiring only one word to be added to the Spacemacs configuration file. Butterfly SPC SPC butterfly to activate in Spacemacs. Use this great power very carefully.","title":"Simple Layers and Configuration"},{"location":"why-spacemacs/layers/#simple-configuration","text":"Spacemacs provides a well tested configuration file called ~/.spacemacs that provides lots of sensible defaults and makes customising your experience very easy. This file is created during the Spacemacs installation. .spacemacs.d/init.el file can be used as an alternative location for .spacemacs and is easier to manage changes via version control. The ~/.spacemacs configuration file is composed of three important sections Section Purpose dotspacemacs/layers Layers provide a simple way to add language support and tooling to Spacemacs. A layer can contain elisp configuration and packages from Melpa/Elpa. Individual Emacs packages can also be added (if they do not exist in any layer) dotspacemacs/init configuration applied when Spacemacs first starts, eg evil or holy mode(emacs), themes, fonts, full screen, recent files, etc dotspacemacs/user-config Add your own customisation here Spacemacs dotfile configuration dotfile configuration details installation and syncronisation options","title":"Simple Configuration"},{"location":"why-spacemacs/layers/#opening-and-reloading-the-configuration-file","text":"Spacemacs provides specific keybindings for opening and reloading the ~/.spacemacs configuration file. Vim Normal Emacs Description SPC f e d M-m f e d open the ~/.spacemacs file SPC f e R M-m f e R reload the configuration from ~/.spacemacs Restart after changing configuration SPC q r after changes to the Spacemacs configuration file is recommended, especially after significant changes, e.g. adding multiple layers SPC F e R to update the Spacemacs configuration without restarting Emacs.","title":"Opening and reloading the configuration file"},{"location":"why-spacemacs/layers/#adding-a-layer","text":"Simply open the ~/.spacemacs file and add the name of the layer you want in the section dotspacemacs-configuration-layers . Some layers also take additional configuration in the form of variables in the layer definition. See the Spacemacs documentation for a list of layers or open the help in Spacemacs SPC h SPC to list all the layers, pressing RET on a layer name to read about it.","title":"Adding a Layer"},{"location":"why-spacemacs/layers/#available-layers","text":"SPC h l (or M-m h l in holy mode) displays a list of all layers available in Spacemacs. Type the layer name or scroll down ( C-j ) to a layer name and press TAB to preview the documentation for that layer or RTN to open the docs for that layer in a buffer. Create your own layers with SPC SPC configuration-layer/create-layer . See the Spacemacs docs and Configuring Spacemacs, a tutorial for more information.","title":"Available Layers"},{"location":"why-spacemacs/layers/#existing-emacs-users","text":"Consider the .spacemacs configuration file a replacement for the init.el file that would otherwise be use to define an Emacs configuration. Installing packages via the packages-list-packages method is ignored by Spacemacs. Any packages installed in this way will be ignored and deleted on Emacs startup. If a desired package is not included in any layer, a package can be used without a layer . dotspacemacs/user-config section of the ~/.spacemacs configuration file should contain personal Emacs Lisp configuration and is the last section of the Spacemacs configuration to load.","title":"Existing Emacs users"},{"location":"why-spacemacs/layouts/","text":"Layouts \u03bb\ufe0e Layouts - Spacemacs documentation Layouts enable you to switch between different projects. Each layout keeps its own list of open buffers, making it quick to navigate to specific buffers. Space l shows a menu where you can select an existing layer or create a new layer. Type in the name of the layer to narrow to the existing layer name or create a new layer of that name. Space l Tab switches to the previous active layout, providing a quick way to jump between two projects actively being worked on. Limit Space Tab to current layout Set the spacemacs-layouts-restrict-spc-tab variable to true to limit Space Tab to toggle between the last current and last buffer from the current layout. The spacemacs-layouts layer is automatically included in Spacemacs, however, to specify variables it must be added to the dotspacemacs-configuration-layers in the Spacemacs configuration file dotspacemacs-configuration-layers ( spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t ) ; (1)! 1. practicalli/spacemacs.d contains this configuration Layer Indicator \u03bb\ufe0e The layer name shows in the mode line. Layouts Transient State \u03bb\ufe0e Space L opens the Layouts transient state, allowing you to create, delete and select layouts with a single character keybinding. The transient state also lists all the current layouts. The most layouts common commands are: Keybindings Action Space L L Create a new layout or switch to existing layout by typing its name Space L D Delete current layout Space Tab 0 .. 9 Select layout in position (creates layouts if none exists) Space l Tab Select previously displayed layout Space l n / N Next / Previous layout Space l < / > Move layout left or right in the layout list Space l ? opens a helm menu for Helm transient state","title":"Layouts"},{"location":"why-spacemacs/layouts/#layouts","text":"Layouts - Spacemacs documentation Layouts enable you to switch between different projects. Each layout keeps its own list of open buffers, making it quick to navigate to specific buffers. Space l shows a menu where you can select an existing layer or create a new layer. Type in the name of the layer to narrow to the existing layer name or create a new layer of that name. Space l Tab switches to the previous active layout, providing a quick way to jump between two projects actively being worked on. Limit Space Tab to current layout Set the spacemacs-layouts-restrict-spc-tab variable to true to limit Space Tab to toggle between the last current and last buffer from the current layout. The spacemacs-layouts layer is automatically included in Spacemacs, however, to specify variables it must be added to the dotspacemacs-configuration-layers in the Spacemacs configuration file dotspacemacs-configuration-layers ( spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t ) ; (1)! 1. practicalli/spacemacs.d contains this configuration","title":"Layouts"},{"location":"why-spacemacs/layouts/#layer-indicator","text":"The layer name shows in the mode line.","title":"Layer Indicator"},{"location":"why-spacemacs/layouts/#layouts-transient-state","text":"Space L opens the Layouts transient state, allowing you to create, delete and select layouts with a single character keybinding. The transient state also lists all the current layouts. The most layouts common commands are: Keybindings Action Space L L Create a new layout or switch to existing layout by typing its name Space L D Delete current layout Space Tab 0 .. 9 Select layout in position (creates layouts if none exists) Space l Tab Select previously displayed layout Space l n / N Next / Previous layout Space l < / > Move layout left or right in the layout list Space l ? opens a helm menu for Helm transient state","title":"Layouts Transient State"},{"location":"why-spacemacs/mnemonic-menu/","text":"Mnemonic Menu with Which-Key \u03bb\ufe0e Spacemacs uses which-key to create a menus system of keybindings for the most commonly used commands. Which-key provides single chord keybindings, SCP p f rather than C-x C-p C-f . Single chord key bindings are easier to remember and therefore make Spacemacs simpler to learn and faster to use. Single chorded key bindings are also less of a strain on hands when typing. Mnemonic characters for keys are used where possible, using the first character of a command or a prominent character if a particular character is already taken. Sub-menus are added to increase the range of characters available for a menu. Spacemacs prefers a sub-menu rather than upper case or non-mnemonic characters. Which-key menu controls \u03bb\ufe0e C-h opens the which-key command menu, allowing navigation through menus and sub-menus. C-h n shows the next page of commands when a menu is so large it is be spanned over several pages. C-h p shows the previous menu page. C-h u to show the parent of the current menu, useful if you navigated to an incorrect sub-menu. Keybinding Description C-h Paging / help menu n next page in menu p previous page in menu u up to parent menu h help a abort","title":"Mneomic Menus"},{"location":"why-spacemacs/mnemonic-menu/#mnemonic-menu-with-which-key","text":"Spacemacs uses which-key to create a menus system of keybindings for the most commonly used commands. Which-key provides single chord keybindings, SCP p f rather than C-x C-p C-f . Single chord key bindings are easier to remember and therefore make Spacemacs simpler to learn and faster to use. Single chorded key bindings are also less of a strain on hands when typing. Mnemonic characters for keys are used where possible, using the first character of a command or a prominent character if a particular character is already taken. Sub-menus are added to increase the range of characters available for a menu. Spacemacs prefers a sub-menu rather than upper case or non-mnemonic characters.","title":"Mnemonic Menu with Which-Key"},{"location":"why-spacemacs/mnemonic-menu/#which-key-menu-controls","text":"C-h opens the which-key command menu, allowing navigation through menus and sub-menus. C-h n shows the next page of commands when a menu is so large it is be spanned over several pages. C-h p shows the previous menu page. C-h u to show the parent of the current menu, useful if you navigated to an incorrect sub-menu. Keybinding Description C-h Paging / help menu n next page in menu p previous page in menu u up to parent menu h help a abort","title":"Which-key menu controls"},{"location":"why-spacemacs/project-file-navigation/","text":"Project and File Navigation \u03bb\ufe0e Projectile provides easy project management and navigation. A project is a directory containing a version control repository, e.g. .git or a Clojure project, eg. project.clj , pom.xml . A directory can be manually defined as a project by adding an empty .projectile file to it. Some of Projectile's features: jump to a directory, file or buffer in project toggle between files with same names but different extensions toggle between code and its test recently visited files in the project switch between projects you have worked on kill all project buffers replace in project multi-occur in project buffers grep in project regenerate project etags or gtags (requires ggtags). browse dirty version controlled projects Treemacs \u03bb\ufe0e Treemacs is the default visual file browser in Spacemacs, providing a way to view and navigate all the directories and files in a project. Visit the Treemacs project for details of all its features Space + f + t or Space + p + t toggles the Treemacs buffer, the latter opens Treemacs with the root set to the projectile project root. Space + 0 to select the Treemacs window at any time. The Treemacs window s always assigned the number 0. Spacemacs Treemacs Layer Ranger \u03bb\ufe0e Space + A + T + R + R runs ranger to navigate directories and view contents of files quickly and easily, using standard Vi keybindings, j , k , h , l . Ranger is great for quickly looking through files, thanks to its preview option. Discover more about ranger in the working with projects section. Ranger terminal file manager Ranger terminal file manager","title":"Project and File Navigation"},{"location":"why-spacemacs/project-file-navigation/#project-and-file-navigation","text":"Projectile provides easy project management and navigation. A project is a directory containing a version control repository, e.g. .git or a Clojure project, eg. project.clj , pom.xml . A directory can be manually defined as a project by adding an empty .projectile file to it. Some of Projectile's features: jump to a directory, file or buffer in project toggle between files with same names but different extensions toggle between code and its test recently visited files in the project switch between projects you have worked on kill all project buffers replace in project multi-occur in project buffers grep in project regenerate project etags or gtags (requires ggtags). browse dirty version controlled projects","title":"Project and File Navigation"},{"location":"why-spacemacs/project-file-navigation/#treemacs","text":"Treemacs is the default visual file browser in Spacemacs, providing a way to view and navigate all the directories and files in a project. Visit the Treemacs project for details of all its features Space + f + t or Space + p + t toggles the Treemacs buffer, the latter opens Treemacs with the root set to the projectile project root. Space + 0 to select the Treemacs window at any time. The Treemacs window s always assigned the number 0. Spacemacs Treemacs Layer","title":"Treemacs"},{"location":"why-spacemacs/project-file-navigation/#ranger","text":"Space + A + T + R + R runs ranger to navigate directories and view contents of files quickly and easily, using standard Vi keybindings, j , k , h , l . Ranger is great for quickly looking through files, thanks to its preview option. Discover more about ranger in the working with projects section. Ranger terminal file manager Ranger terminal file manager","title":"Ranger"},{"location":"why-spacemacs/states/","text":"Editor states - Evil or Holy \u03bb\ufe0e Multi-modal editing simplifies keybindings for everything, keeping your hands centered on the keyboard and increasing your productivity. Multi-modal approach minimizing the need for key chords that are slower and a common source of repetitive strain e.g. C-c C-x M-j When installing Spacemacs you have the choice of editor styles Editing style Description Among the stars aboard the Evil flagship (Vim) Vim multi-model editing (normal, insert, visual, lisp, etc. C-z for classic Emacs editor On the planet Emacs in the Holy control tower (Emacs) Emacs only editing (No Vim states) Evil provide Vim style editing across all languages and modes in Emacs, simplifying the editing of files and keyboard shortcuts (keybindings) Vim is a language for manipulating text files that goes far beyond editing files. Learning this simple language removes cognitive load. Speak vim and your fingers efficiently make the changes you want. Evil states \u03bb\ufe0e Multi-modal editing can take some adjustment and time to become comfortable. Normal , Insert and Visual states are the first ones to get used to. Each state has a specific purpose, eg. normal mode is about manipulating existing text where insert state is about adding more text. Using a state for different types of editing actions greatly simplifies the keyboard bindings and arguably makes editing faster, especially once you get used to multi-state editing. This speed is in part due to simpler keybinding when in normal mode as you are not typing content into the editor, simply running commands with each key press. This means you can have single characters to do many of the common commands, eg l instead of C-f for moving the cursor forward. If you are deeply connected to the with Emacs keybindings, then probably best to stick to holy mode. If you are new to Emacs or you just want to take advantage of Vim, then select Evil mode. Evil flagship - toggling between Emacs C-z toggles between Vim states and the Emacs state when Evil Flagship editing states are used. Here is the list of all the possible states, some of which are automatically applied (eg. magit git client is automatically evilified). State Default Color Description normal orange Vim normal - used to execute and combine commands insert green Vim insert - used to actually insert text visual gray Vim visual mode of Vim=, used to make text selection motion purple Evil - used to navigate read only buffers emacs blue This state is like using a regular Emacs without Vim replace chocolate Evil - overwrites the character under point instead of inserting a new one hybrid blue Spacemacs - use Emacs state instead of the Vim insert evilified light brown Spacemacs - an emacs state modified to bring Vim navigation, selection and search. lisp pink Spacemacs - structural editing for Lisp code (and Clojure) iedit red Spacemacs - navigate between multiple regions of text iedit-insert red Spacemacs - replace multiple regions of text Spacemacs state documentation States and other concepts are explained further in the Spacemacs concepts documentation. Transient State menus \u03bb\ufe0e Transient state menus make it simple to run commands multiple times, using a single key press, from a specific sub-set of commands. For example, Font Scaling transient state menu allows you to repeatedly increase the size of the buffer font just by using the + key. The Font Scaling transient state menu contains the sub-set of commands related to scaling, so you can decrease the font size just with the - key and reset the font with 0 . Transient-states are usually triggered by using a keybinding with the following pattern: <Leader> <group> . where group is the category the transient-state falls under. When in a transient-state you will see documentation at the bottom of your window. To exit a transient-state press q. Examples of transient state menus \u03bb\ufe0e Keybindings Transient state description SPC b . buffer management SPC e . errors SPC k . lisp state for structured editing SPC w . window management SPC z . code folding SPC z f zoom frame size SPC z x Font Scaling (x for text) SPC n +/- Change the value of a number","title":"Multi-modal Editing"},{"location":"why-spacemacs/states/#editor-states-evil-or-holy","text":"Multi-modal editing simplifies keybindings for everything, keeping your hands centered on the keyboard and increasing your productivity. Multi-modal approach minimizing the need for key chords that are slower and a common source of repetitive strain e.g. C-c C-x M-j When installing Spacemacs you have the choice of editor styles Editing style Description Among the stars aboard the Evil flagship (Vim) Vim multi-model editing (normal, insert, visual, lisp, etc. C-z for classic Emacs editor On the planet Emacs in the Holy control tower (Emacs) Emacs only editing (No Vim states) Evil provide Vim style editing across all languages and modes in Emacs, simplifying the editing of files and keyboard shortcuts (keybindings) Vim is a language for manipulating text files that goes far beyond editing files. Learning this simple language removes cognitive load. Speak vim and your fingers efficiently make the changes you want.","title":"Editor states - Evil or Holy"},{"location":"why-spacemacs/states/#evil-states","text":"Multi-modal editing can take some adjustment and time to become comfortable. Normal , Insert and Visual states are the first ones to get used to. Each state has a specific purpose, eg. normal mode is about manipulating existing text where insert state is about adding more text. Using a state for different types of editing actions greatly simplifies the keyboard bindings and arguably makes editing faster, especially once you get used to multi-state editing. This speed is in part due to simpler keybinding when in normal mode as you are not typing content into the editor, simply running commands with each key press. This means you can have single characters to do many of the common commands, eg l instead of C-f for moving the cursor forward. If you are deeply connected to the with Emacs keybindings, then probably best to stick to holy mode. If you are new to Emacs or you just want to take advantage of Vim, then select Evil mode. Evil flagship - toggling between Emacs C-z toggles between Vim states and the Emacs state when Evil Flagship editing states are used. Here is the list of all the possible states, some of which are automatically applied (eg. magit git client is automatically evilified). State Default Color Description normal orange Vim normal - used to execute and combine commands insert green Vim insert - used to actually insert text visual gray Vim visual mode of Vim=, used to make text selection motion purple Evil - used to navigate read only buffers emacs blue This state is like using a regular Emacs without Vim replace chocolate Evil - overwrites the character under point instead of inserting a new one hybrid blue Spacemacs - use Emacs state instead of the Vim insert evilified light brown Spacemacs - an emacs state modified to bring Vim navigation, selection and search. lisp pink Spacemacs - structural editing for Lisp code (and Clojure) iedit red Spacemacs - navigate between multiple regions of text iedit-insert red Spacemacs - replace multiple regions of text Spacemacs state documentation States and other concepts are explained further in the Spacemacs concepts documentation.","title":"Evil states"},{"location":"why-spacemacs/states/#transient-state-menus","text":"Transient state menus make it simple to run commands multiple times, using a single key press, from a specific sub-set of commands. For example, Font Scaling transient state menu allows you to repeatedly increase the size of the buffer font just by using the + key. The Font Scaling transient state menu contains the sub-set of commands related to scaling, so you can decrease the font size just with the - key and reset the font with 0 . Transient-states are usually triggered by using a keybinding with the following pattern: <Leader> <group> . where group is the category the transient-state falls under. When in a transient-state you will see documentation at the bottom of your window. To exit a transient-state press q.","title":"Transient State menus"},{"location":"why-spacemacs/states/#examples-of-transient-state-menus","text":"Keybindings Transient state description SPC b . buffer management SPC e . errors SPC k . lisp state for structured editing SPC w . window management SPC z . code folding SPC z f zoom frame size SPC z x Font Scaling (x for text) SPC n +/- Change the value of a number","title":"Examples of transient state menus"},{"location":"why-spacemacs/structural-editing/","text":"Structural Editing \u03bb\ufe0e Structural editing is an invaluable tool when working with Lisp languages (elisp, lisp, clojure, etc) as it enables you to easily move code around without breaking the structural syntax of the language. Clojure has very precise syntax as everything is contained in a list or similar structure. It is very simple to navigate the structure of Clojure code by jumping from expression to expression. This well defined structure also makes it trivial to move expressions around, giving you a simple way to develop and refactor your code. Structural Editing Section Structural editing section provides a detailed guide to using Lisp mode, Smartparens, Paredit and Evil mode to manage your Clojure (and elsip) code. Smartparens For Writing Structural Text \u03bb\ufe0e Spacemacs uses smartparens {target= blank} to help you write structural code really fast and also move expressions around. Smartparens is a newer implementation of the classic _paredit package. Evil-cleverparens Evil-cleverparens configures Vim states to respect smartparens rules. This ensures that you do not accidentally delete parenthesis and keeps the structure of your Clojure intact. See the section on Evil Clojure Editing . Lisp State For Manipulating Structural Text \u03bb\ufe0e Space + k + . opens lisp-state for refactoring Lisp base languages like Clojure and eLisp. lisp-state allows use of the Vim normal state keys to navigate your code by its structure, j , k , h , l . Move symbols and expressions around without breaking parenthesis and other structural characters (using slurp , barf , wrap , unwrap , etc.).","title":"Structural Editing"},{"location":"why-spacemacs/structural-editing/#structural-editing","text":"Structural editing is an invaluable tool when working with Lisp languages (elisp, lisp, clojure, etc) as it enables you to easily move code around without breaking the structural syntax of the language. Clojure has very precise syntax as everything is contained in a list or similar structure. It is very simple to navigate the structure of Clojure code by jumping from expression to expression. This well defined structure also makes it trivial to move expressions around, giving you a simple way to develop and refactor your code. Structural Editing Section Structural editing section provides a detailed guide to using Lisp mode, Smartparens, Paredit and Evil mode to manage your Clojure (and elsip) code.","title":"Structural Editing"},{"location":"why-spacemacs/structural-editing/#smartparens-for-writing-structural-text","text":"Spacemacs uses smartparens {target= blank} to help you write structural code really fast and also move expressions around. Smartparens is a newer implementation of the classic _paredit package. Evil-cleverparens Evil-cleverparens configures Vim states to respect smartparens rules. This ensures that you do not accidentally delete parenthesis and keeps the structure of your Clojure intact. See the section on Evil Clojure Editing .","title":"Smartparens For Writing Structural Text"},{"location":"why-spacemacs/structural-editing/#lisp-state-for-manipulating-structural-text","text":"Space + k + . opens lisp-state for refactoring Lisp base languages like Clojure and eLisp. lisp-state allows use of the Vim normal state keys to navigate your code by its structure, j , k , h , l . Move symbols and expressions around without breaking parenthesis and other structural characters (using slurp , barf , wrap , unwrap , etc.).","title":"Lisp State For Manipulating Structural Text"},{"location":"why-spacemacs/why-evil/","text":"Evil Vim Style Editing \u03bb\ufe0e Evil provide Vim style editing across all languages and modes in Emacs, simplifying the editing of files and keyboard shortcuts (keybindings) Vim is a language for manipulating text files that goes far beyond editing files. Learning this simple language removes cognitive load. Speak vim and your fingers efficiently make the changes you want. Multi-modal editing simplifies keybindings for everything, keeping your hands centered on the keyboard and increasing your productivity. Multi-modal approach minimizing the need for key chords that are slower and a common source of repetitive strain e.g. C-c C-x M-j","title":"Evil Vim Style Editing"},{"location":"why-spacemacs/why-evil/#evil-vim-style-editing","text":"Evil provide Vim style editing across all languages and modes in Emacs, simplifying the editing of files and keyboard shortcuts (keybindings) Vim is a language for manipulating text files that goes far beyond editing files. Learning this simple language removes cognitive load. Speak vim and your fingers efficiently make the changes you want. Multi-modal editing simplifies keybindings for everything, keeping your hands centered on the keyboard and increasing your productivity. Multi-modal approach minimizing the need for key chords that are slower and a common source of repetitive strain e.g. C-c C-x M-j","title":"Evil Vim Style Editing"},{"location":"writing-emacs-lisp/","text":"Writing Emacs Lisp \u03bb\ufe0e You do not need to learn how to write Emacs Lisp to use thousands of commands that Spacemacs already provides. If you do want to do some extensive customisation, beyond creating a simple layer, then here are some useful resources to get started. Example: writing an interactive game \u03bb\ufe0e {% youtube %} https://youtu.be/gk39mp8Vy4M?autoplay=1loop=1","title":"Writing Emacs Lisp"},{"location":"writing-emacs-lisp/#writing-emacs-lisp","text":"You do not need to learn how to write Emacs Lisp to use thousands of commands that Spacemacs already provides. If you do want to do some extensive customisation, beyond creating a simple layer, then here are some useful resources to get started.","title":"Writing Emacs Lisp"},{"location":"writing-emacs-lisp/#example-writing-an-interactive-game","text":"{% youtube %} https://youtu.be/gk39mp8Vy4M?autoplay=1loop=1","title":"Example: writing an interactive game"}]}